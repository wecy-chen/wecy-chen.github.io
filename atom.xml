<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎,欢迎━(*｀∀´*)ノ亻!</title>
  
  
  <link href="https://wecy-chen.github.io/atom.xml" rel="self"/>
  
  <link href="https://wecy-chen.github.io/"/>
  <updated>2022-06-24T00:58:12.039Z</updated>
  <id>https://wecy-chen.github.io/</id>
  
  <author>
    <name>wecyChen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://wecy-chen.github.io/2022/06/23/md/"/>
    <id>https://wecy-chen.github.io/2022/06/23/md/</id>
    <published>2022-06-23T06:37:07.686Z</published>
    <updated>2022-06-24T00:58:12.039Z</updated>
    
    <content type="html"><![CDATA[<p><strong>markdown 学习</strong></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">百度百科</a></p><ul><li><p>简介<br>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p></li><li><p>应用</p></li></ul><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、知乎等</p><ul><li>徽章<br>徽章是一种小巧精美的小图标，一般配有相关文字进行辅助说明，可对数据进行监控，链接跳转等，富有表现力。<br>常见于 github 项目主页，但其不仅出现于 github 项目主页，凡是能够表现图片的地方都可以出现徽章</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式: [![图片文字说明](图片源地址)](超链接地址)  即超链接内部嵌套图片</span><br><span class="line">语法：</span><br><span class="line">[![github](https://img.shields.io/badge/github-xugaoyi-brightgreen.svg)](https://github.com/xugaoyi)</span><br></pre></td></tr></table></figure><p><a href="https://wecy-chen.github.io/"><img src="https://img.shields.io/badge/github-wecychen-brightgreen.svg" alt="github"></a></p><p>徽章生成网站: <a href="https://shields.io/">https://shields.io/</a></p><p><a href="https://segmentfault.com/a/1190000019552597">徽章生成教程</a></p><ul><li>编辑<br>vscode 下载markdown-formatter插件<br>setting.json配置：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照js格式化</span></span><br><span class="line"><span class="comment">// &quot;markdownFormatter.codeAreaToBlock&quot;: &quot;js&quot;,</span></span><br><span class="line"><span class="comment">// 不格式化</span></span><br><span class="line"><span class="string">&quot;markdownFormatter.codeAreaToBlock&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="comment">// 自动格式化标点</span></span><br><span class="line"><span class="string">&quot;markdownFormatter.fullWidthTurnHalfWidth&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line"><span class="comment">// 中文标点格式化为英文</span></span><br><span class="line"><span class="comment">// &quot;markdownFormatter.fullWidthTurnHalfWidth&quot;: &quot;，：；！“”‘’（）？。&quot;,</span></span><br><span class="line"><span class="string">&quot;markdownFormatter.formatOpt&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;indent_size&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;[markdown]&quot;</span>: &#123;</span><br><span class="line">  <span class="comment">// 自动保存</span></span><br><span class="line">  <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 显示空格</span></span><br><span class="line">  <span class="string">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="comment">// 快速补全</span></span><br><span class="line">  <span class="string">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;other&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;comments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;strings&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// snippet 提示优先</span></span><br><span class="line">  <span class="string">&quot;editor.snippetSuggestions&quot;</span>: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">  <span class="string">&quot;editor.tabCompletion&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="comment">// 使用enter 接受提示</span></span><br><span class="line">  <span class="string">&quot;editor.acceptSuggestionOnEnter&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="comment">// 默认格式化工具为本工具</span></span><br><span class="line">  <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;mervin.markdown-formatter&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul><li><p><strong>段落</strong><br>Markdown 段落没有特殊的格式，直接编写文字，需要段落缩进时使用 2 个 Tab</p></li><li><p><strong>字体</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*   _斜体文本_</span><br><span class="line">**粗体文本**  __粗体文本__</span><br><span class="line">***粗斜体文本***  ___粗斜体文本___</span><br></pre></td></tr></table></figure><p><em>斜体文本</em> <em>斜体文本</em><br><strong>粗体文本</strong> <strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong> <strong><em>粗斜体文本</em></strong></p><ul><li><strong>删除线</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><del>删除线</del></p><ul><li><strong>下划线</strong><br>下划线可以通过 HTML 的 标签来实现：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线的文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p><u>带下划线的文本</u></p><ul><li><strong>文字高亮</strong><br>文字高亮功能能使行内部分文字高亮，使用一对反引号。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`html` `css` `javascript`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>html</code>  <code>css</code>  <code>javascript</code></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">[^变量]</span><br><span class="line">在文档结尾或其他位置給变量赋值：</span><br><span class="line">[^变量]: 注明框内显示的内容</span><br><span class="line"></span><br><span class="line">鼠标移到这里&gt; [^哈喽]</span><br><span class="line">[^哈喽]: 注明框内显示的内容</span><br></pre></td></tr></table></figure><p>鼠标移到这里&gt; [^1]</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><strong>无序列表</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br></pre></td></tr></table></figure><ul><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第一项</p></li><li><p>第二项</p></li></ul><ul><li><strong>有序列表</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li></ol><ul><li><strong>折叠列表</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>点我打开关闭折叠<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  折叠内容</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><details><summary>点我打开关闭折叠</summary>折叠内容 <ul><li>1</li> <li>2</li> <li>3</li> </ul></details><ul><li><strong>带复选框列表</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* [x] 第一项</span><br><span class="line">* [ ] 第二项</span><br><span class="line">* [ ] 第三项</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 第一项</li><li><input disabled="" type="checkbox"> 第二项</li><li><input disabled="" type="checkbox"> 第三项</li></ul><p>-<strong>列表嵌套</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">   - 嵌套1</span><br><span class="line">   - 嵌套2</span><br><span class="line">2. 第二项</span><br><span class="line">   - 嵌套1</span><br><span class="line">   - 嵌套2</span><br></pre></td></tr></table></figure><ol><li>第一项<ul><li>嵌套1</li><li>嵌套2</li></ul></li><li>第二项<ul><li>嵌套1</li><li>嵌套2</li></ul></li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br></pre></td></tr></table></figure><blockquote><p>区块引用</p><p>回车键自动延伸区块</p></blockquote><ul><li><p><strong>区块嵌套</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 第一层</span><br><span class="line">&gt; &gt; 第二层</span><br><span class="line">&gt; &gt; &gt; 第三层</span><br></pre></td></tr></table></figure><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote></li></ul><p>-<strong>区块中使用列表</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; * 111</span><br><span class="line">&gt; * 222</span><br></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>111</li><li>222</li></ul></blockquote><ul><li><p><strong>列表中使用区块</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; 区块</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure><ul><li>第一项<blockquote><p>区块</p></blockquote></li><li>第二项</li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**）：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`function()` 函数</span><br></pre></td></tr></table></figure><p>  <code>function()</code>函数</p><ul><li><p><strong>代码块</strong></p><p>用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）<br>本代码区块为说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```javascript</span><br><span class="line">function test() &#123;</span><br><span class="line">alert(&#x27;test&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line">[链接名称](链接地址,可选的alt)</span><br><span class="line">或</span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](http://www.baidu.com,&#x27;百度&#x27;)</span><br></pre></td></tr></table></figure><p>  <a href="http://www.baidu.com,'百度'/">百度</a></p><p>  直接显示链接地址：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p>  <a href="http://www.baidu.com/">http://www.baidu.com</a></p></li><li><p><strong>变量链接</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">链接可以用变量来代替，文档末尾或其他位置附带变量地址：</span><br><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 baidu 作为网址变量 [Baidu][baidu]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [baidu]: http://www.baidu.com/</span><br></pre></td></tr></table></figure><p>  [Google][1]</p><p>  [Baidu][baidu]</p><p>  [1]:<a href="http://www.google.com/">http://www.google.com</a></p><p>  [baidu]: <a href="http://www.baidu.com/">http://www.baidu.com/</a></p></li><li><p><strong>Github中使用内部链接</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可使用相对路径（前提是有该路径下的文件）</span><br><span class="line">[test](/2022/05/30/git/)</span><br></pre></td></tr></table></figure><p>  <a href="/2022/05/30/git/">test</a></p></li><li><p><strong>锚点链接</strong></p><p>  本文件中每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Markdown](#Markdown)</span><br></pre></td></tr></table></figure><blockquote><p>注： github对含有标点符号的标题进行锚点时会忽略掉标点符号，<br>本页中，如果这样写则无法跳转：[链接](#九、链接)<br>正确写法：[链接](#九链接)<br>  <a href="#%E4%B8%80Markdown">Markdown</a></p></blockquote><p>  <a href="#%E4%B9%9D%E9%93%BE%E6%8E%A5">链接</a>     </p><p>  <a href="#%E6%B5%81%E7%A8%8B%E5%9B%BE">流程图</a></p></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt替代文本](图片地址)</span><br><span class="line">![alt替代文本](图片地址 &quot;title标题&quot;)</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>开头一个感叹号 !</p></li><li><p>接着一个方括号，里面放上图片的替代文字</p></li><li><p>接着一个普通括号，里面放上图片的地址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://img2.baidu.com/it/u=594502772,1564194739&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=499&amp;h=265 &quot;logo&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://img2.baidu.com/it/u=594502772,1564194739&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=265" alt="logo" title="logo"></p><p>  当然，你也可以像链接那样对图片地址使用变量:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里链接用 img 作为图片地址变量 </span><br><span class="line">然后在文档的结尾或其他位置给变量赋值（图片地址）</span><br><span class="line">![RUNOOB][img]</span><br><span class="line"> [img]: https://img2.baidu.com/it/u=594502772,1564194739&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=499&amp;h=265</span><br></pre></td></tr></table></figure><p><img src="https://img2.baidu.com/it/u=594502772,1564194739&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=265" alt="RUNOOB"></p></li></ul><ul><li><strong>图片宽高</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://img2.baidu.com/it/u=594502772,1564194739&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=499&amp;h=265&quot; width=&quot;50px&quot; height=&quot;30px&quot;&gt;</span><br></pre></td></tr></table></figure><img src="https://img2.baidu.com/it/u=594502772,1564194739&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=265" width="50px" height="30px"><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>制作表格使用 (<strong>|</strong>) 来分隔不同的单元格，使用( <strong>-</strong>) 来分隔表头和其他行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">单元格</td><td align="center">单元格</td></tr><tr><td align="center">单元格</td><td align="center">单元格</td></tr></tbody></table><ul><li><strong>对齐方式</strong><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐  </li><li><strong>:-</strong> 设置内容和标题栏居左对齐</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="Emoji表情包"><a href="#Emoji表情包" class="headerlink" title="Emoji表情包"></a>Emoji表情包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：Emoji表情英文名的前后加冒号，Typore上先输入冒号再输入首字母有表情提示</span><br><span class="line">或直接复制表情包</span><br><span class="line">如：</span><br><span class="line">:smirk:</span><br><span class="line">&amp;#x1f602;</span><br></pre></td></tr></table></figure><p>支持不完善</p><p><a href="https://blog.csdn.net/qq_39218530/article/details/118671991">表情包</a></p><p>😀 😃 🥰 😍 😘</p><p>&#x1f602;<br>:smirk: </p><p>更多表情名称请查看：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">表情包清单</a></p><h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 语法涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p><b>使用b标签的加粗字体</b></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用反斜杠转义字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">**未转义星号显示加粗** </span><br><span class="line">\*\* 转义显示星号 \*\*</span><br></pre></td></tr></table></figure><p><strong>未转义星号显示加粗</strong><br>** 转义显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><hr><p>*** <strong>以下部分在Github暂未支持</strong> ***</p><hr><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$\sqrt{3x-1}+(1+x)^2$</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```chart</span><br><span class="line">,Budget,Income,Expenses,Debt</span><br><span class="line">June,5000,8000,4000,6000</span><br><span class="line">July,3000,1000,4000,3000</span><br><span class="line">Aug,5000,7000,6000,3000</span><br><span class="line">Sep,7000,2000,3000,1000</span><br><span class="line">Oct,6000,5000,4000,2000</span><br><span class="line">Nov,4000,3000,5000,</span><br><span class="line">type: pie</span><br><span class="line">title: Monthly Revenue</span><br><span class="line">x.title: Amount</span><br><span class="line">y.title: Month</span><br><span class="line">y.suffix: $</span><br><span class="line">​```</span><br><span class="line">​```mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: 是否已收到消息？</span><br><span class="line">B--&gt;&gt;A: 已收到消息</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>​<code>chart ,Budget,Income,Expenses,Debt June,5000,8000,4000,6000 July,3000,1000,4000,3000 Aug,5000,7000,6000,3000 Sep,7000,2000,3000,1000 Oct,6000,5000,4000,2000 Nov,4000,3000,5000, type: pie title: Monthly Revenue x.title: Amount y.title: Month y.suffix: $ ​</code></p><p>​<code>mermaid sequenceDiagram A-&gt;&gt;B: 是否已收到消息？ B--&gt;&gt;A: 已收到消息 ​</code></p><blockquote><p>注：在Typora中未支持</p></blockquote><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```mermaid</span><br><span class="line">graph TD</span><br><span class="line">A[模块A] --&gt;|A1| B(模块B)</span><br><span class="line">B --&gt; C&#123;判断条件C&#125;</span><br><span class="line">C --&gt;|条件C1| D[模块D]</span><br><span class="line">C --&gt;|条件C2| E[模块E]</span><br><span class="line">C --&gt;|条件C3| F[模块F]</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>流程图相关文章：<a href="https://www.jianshu.com/p/b421cc723da5">https://www.jianshu.com/p/b421cc723da5</a></p><p><a href="http://www.imooc.com/article/292708">http://www.imooc.com/article/292708</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[模块A] --&gt;|A1| B(模块B)</span><br><span class="line">B --&gt; C&#123;判断条件C&#125;</span><br><span class="line">C --&gt;|条件C1| D[模块D]</span><br><span class="line">C --&gt;|条件C2| E[模块E]</span><br><span class="line">C --&gt;|条件C3| F[模块F]</span><br></pre></td></tr></table></figure><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: 是否已收到消息？</span><br><span class="line">B--&gt;&gt;A: 已收到消息</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: 是否已收到消息？</span><br><span class="line">B--&gt;&gt;A: 已收到消息</span><br></pre></td></tr></table></figure><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```mermaid</span><br><span class="line">gantt</span><br><span class="line">title 甘特图</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">section 项目A</span><br><span class="line">任务1           :a1, 2018-06-06, 30d</span><br><span class="line">任务2     :after a1  , 20d</span><br><span class="line">section 项目B</span><br><span class="line">任务3      :2018-06-12  , 12d</span><br><span class="line">任务4      : 24d</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">title 甘特图</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">section 项目A</span><br><span class="line">任务1           :a1, 2018-06-06, 30d</span><br><span class="line">任务2     :after a1  , 20d</span><br><span class="line">section 项目B</span><br><span class="line">任务3      :2018-06-12  , 12d</span><br><span class="line">任务4      : 24d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">markdown语法学习</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://wecy-chen.github.io/2022/05/30/git/"/>
    <id>https://wecy-chen.github.io/2022/05/30/git/</id>
    <published>2022-05-30T08:31:10.051Z</published>
    <updated>2022-06-01T02:05:47.795Z</updated>
    
    <content type="html"><![CDATA[<p><strong>git学习</strong></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://git-scm.com/">官网</a></p><blockquote><p>初次安装git配置用户名和邮箱</p></blockquote>]]></content>
    
    
    <summary type="html">git学习</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue3.0</title>
    <link href="https://wecy-chen.github.io/2022/05/30/vue3/"/>
    <id>https://wecy-chen.github.io/2022/05/30/vue3/</id>
    <published>2022-05-30T08:03:44.323Z</published>
    <updated>2022-06-21T03:40:25.173Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Vue3.0 学习</strong></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>文档说明</p><ol><li> <a href="https://vue3js.cn/">学习地址</a></li><li> <a href="https://24kcs.github.io/vue3_study/">快速上手</a></li><li> <a href="https://v3.cn.vuejs.org/">vue 中文官网</a></li><li> <a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8aDE+e3sgbXNnIH19PC9oMT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5jb25zdCBtc2cgPSAnSGVsbG8gV29ybGQhJ1xuPC9zY3JpcHQ+IiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCJcbiAgfVxufSJ9">代码测试</a></li><li> <a href="https://juejin.cn/post/6955129410705948702">Vue3 掘金</a></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">文档</a></p><h3 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g @vue/cli  ## 安装或者升级</span><br><span class="line">$ vue --version  ## 保证 vue cli 版本在 <span class="number">4.5</span><span class="number">.0</span> 以上  当前安装版本<span class="number">5.0</span><span class="number">.4</span></span><br><span class="line">$ vue create my-project ## 创建项目</span><br></pre></td></tr></table></figure><blockquote><p>安装步骤<br>注意:选项无法按箭头键选择时,可以用数字键选择</p></blockquote><ul><li>Use <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a> for faster installation? Yes 使用更快的 npm 镜像</li><li>Target directory D:\桌面\github\vue-3.0 already exists. Pick an action: (Use<br>arrow keys) ** merge 文件已存在,合并本地文件</li><li>? Please pick a preset: Default ([Vue 3] babel, eslint)**1 使用 vue3 配置项(一般选择自定义配置)</li><li>? Pick the package manager to use when installing dependencies: Yarn 安装</li></ul><p>创建成功之后一般会自动安装依赖包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd vue-<span class="number">3.0</span></span><br><span class="line">$ yarn serve</span><br></pre></td></tr></table></figure><h3 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h3><p><a href="https://v3.cn.vuejs.org/guide/installation.html">文档</a></p><ul><li>vite 是一个由原生 ESM 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES imports 开发</li><li>它做到了**<em>本地快速开发启动</em>**, 在生产环境下基于 Rollup 打包</li></ul><ul><li>1.快速的冷启动，不需要等待打包操作；</li><li>2.即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li><li>3.真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm init vite-app &lt;project-name&gt;</span><br><span class="line">$ cd &lt;project-name&gt;</span><br><span class="line">$ npm install  或者 yarn</span><br><span class="line">$ npm run dev 或者 yarn dev</span><br></pre></td></tr></table></figure><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><ul><li>新的 option, 所有的组合 API 函数都在此使用, 只在初始化时执行一次</li><li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li></ul><p><code>注意:</code>setup 细节问题</p><ul><li>setup 是在 beforeCreate 生命周期回调之前就执行了,而且就执行一次</li></ul><ul><li>1.由此可以推断出:setup 在执行的时候,当前的组件还没有创建出来,也就意味着:组件实例对象 this 根本就不能用</li><li>2.this 是 undefined,说明,就不能通过 this 再去调用 data/computed/methods/props 中的相关内容了</li><li>3.其实所有的 composition API 相关回调函数中也都不可以</li></ul><ul><li>setup 中的返回值是一个对象,内部的属性和方法是给 html 模版使用的</li><li>setup 中的对象内部的属性和 data 函数中的 return 对象的属性都可以在 html 模版中使用</li><li>setup 中的对象中的属性和 data 函数中的对象中的属性会合并为组件对象的属性</li><li>setup 中的对象中的方法和 methods 对象中的方法会合并为组件对象的方法</li><li>在 Vue3 中尽量不要混合的使用 data 和 setup 及 methods 和 setup</li><li>一般不要混合使用: methods 中可以访问 setup 提供的属性和方法, 但在 setup 方法中不能访问 data 和 methods</li><li>setup 不能是一个 async 函数: 因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性数据</li></ul><ul><li>setup 的参数<ul><li>setup(props, context) / setup(props, {attrs, slots, emit})</li><li>props: 包含 props 配置声明且传入了的所有属性的对象</li><li>attrs: 包含没有在 props 配置中声明的属性的对象, 相当于 this.$attrs</li><li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li><li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child子级组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>msg:&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h3&gt;count:&#123;&#123; count &#125;&#125;&lt;/h3&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;emitXxx&quot;</span>&gt;</span>分发事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: [<span class="string">&quot;msg&quot;</span>],</span></span><br><span class="line"><span class="javascript">    <span class="attr">emits</span>: [<span class="string">&quot;fn&quot;</span>], <span class="comment">// 可选的, 声明了更利于程序员阅读, 且可以对分发的事件数据进行校验</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// beforeCreate() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(&#x27;beforeCreate执行了&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 界面渲染完毕</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// mounted() &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// setup(props,context) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// props参数,是一个对象,里面有父级组件向子级组件传递的数据,并且是在子级组件中使用props接收到的所有的属性</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 包含props配置声明且传入了的所有属性的对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(props.msg)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(context.attrs)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(context.emit)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// context参数,是一个对象,里面有attrs对象(获取当前组件标签上的所有的属性的对象,但是该属性是在props中没有声明接收的所有的尚需经的对象),emit方法(分发事件的),slots对象(插槽)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 包含没有在props配置中声明的属性的对象, 相当于 this.$attrs</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(context.attrs.msg2)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(&#x27;=============&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;setup执行了&quot;</span>, <span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> showMsg1 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;setup中的showMsg1方法&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 按钮的点击事件的回调函数</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">emitXxx</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// context.emit(&#x27;xxx&#x27;,&#x27;++&#x27;)</span></span></span><br><span class="line"><span class="javascript">        emit(<span class="string">&quot;fn&quot;</span>, <span class="string">&quot;++&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        showMsg1,</span></span><br><span class="line"><span class="javascript">        emitXxx,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// setup中一般都是返回一个对象,对象中的属性和方法都可以在html模版中直接使用</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     count: 10,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// // 界面渲染后的生命周期回调</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// mounted() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(this)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// // 方法的</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// methods: &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   showMsg2() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(&#x27;methods中的showMsg方法&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li>作用: 定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):<ul><li>创建一个包含响应式数据的引用(reference)对象</li><li>js 中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据</li></ul><p>更新页面数量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>setup和ref的基本使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateCount&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">  <span class="comment">// 需求:页面打开后可以直接看到一个数据,点击按钮后,该数据可以发生变化</span></span><br><span class="line">  <span class="comment">// vue2的方式实现</span></span><br><span class="line">  <span class="comment">// data() &#123;</span></span><br><span class="line">  <span class="comment">//   return &#123;</span></span><br><span class="line">  <span class="comment">//     count: 0, // 属性</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// methods: &#123;</span></span><br><span class="line">  <span class="comment">//   updateCount() &#123; // 方法</span></span><br><span class="line">  <span class="comment">//     this.count++</span></span><br><span class="line">  <span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// vue3的方式实现</span></span><br><span class="line">  <span class="comment">// setup是组合API的入口函数</span></span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;第一次&#x27;)</span></span><br><span class="line">    <span class="comment">// 变量</span></span><br><span class="line">    <span class="comment">// let count = 0 // 此时的数据并不是响应式的数据(响应式数据:数据变化,页面跟着渲染变化)</span></span><br><span class="line">    <span class="comment">// ref是一个函数,作用:定义一个响应式的数据,返回的是一个Ref对象,对象中有一个value属性,如果需要对数据进行操作,需要使用该Ref对象调用value属性的方式进行数据的操作</span></span><br><span class="line">    <span class="comment">// html模版中是不需要使用.value属性的写法</span></span><br><span class="line">    <span class="comment">// 一般用来定义一个基本类型的响应式数据</span></span><br><span class="line">    <span class="comment">// count 的类型 Ref类型</span></span><br><span class="line">    <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">      <span class="comment">// 报错的原因:count是一个Ref对象,对象是不能进行++的操作</span></span><br><span class="line">      <span class="comment">// count++</span></span><br><span class="line">      count.value++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回的是一个对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 属性</span></span><br><span class="line">      count,</span><br><span class="line">      <span class="comment">// 方法</span></span><br><span class="line">      updateCount,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>reactive的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>名字:&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄:&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>性别:&#123;&#123; user.gender &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>媳妇:&#123;&#123; user.wife &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求:显示用户的相关信息,点击按钮,可以更新用户的相关信息数据 /* reactive 作用:</span></span><br><span class="line">定义多个数据的响应式 <span class="keyword">const</span> proxy = reactive(obj):</span><br><span class="line">接收一个普通对象然后返回该普通对象的响应式代理器对象</span><br><span class="line">响应式转换是“深层的”：会影响对象内部所有嵌套的属性 内部基于 ES6 的 <span class="built_in">Proxy</span></span><br><span class="line">实现，通过代理对象操作源对象内部数据都是响应式的 */</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> obj = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">age</span>: <span class="number">20</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">wife</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&quot;小甜甜&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">cars</span>: [<span class="string">&quot;奔驰&quot;</span>, <span class="string">&quot;宝马&quot;</span>, <span class="string">&quot;奥迪&quot;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 把数据变成响应式的数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 返回的是一个Proxy的代理对象,被代理的目标对象就是obj对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// user现在是代理对象,obj是目标对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// user对象的类型是Proxy</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> user = reactive&lt;any&gt;(obj); <span class="comment">//Proxy对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">console</span>.log(user);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> updateUser = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//只能使用代理对象的方式来更新数据(响应式数据)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      user.name = <span class="string">&quot;小工&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      user.wife.cars[<span class="number">3</span>] = <span class="string">&quot;奥拓&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      updateUser,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      user,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>响应式的原理</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>reactive的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>名字:&#123;&#123; proxyUser.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄:&#123;&#123; proxyUser.age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>性别:&#123;&#123; proxyUser.gender &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>媳妇:&#123;&#123; proxyUser.wife &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//定义接口</span></span></span><br><span class="line"><span class="javascript">      interface User &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: string;</span></span><br><span class="line"><span class="javascript">        age: number;</span></span><br><span class="line"><span class="javascript">        wife: &#123;</span></span><br><span class="line"><span class="javascript">          name?: string;</span></span><br><span class="line"><span class="javascript">          age: number;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        gender?: string;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//[proppName:string]:any;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 目标对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> user: User = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;佐助&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">wife</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;小樱&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">19</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把目标对象变成代理对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 参数1:user----&gt;target目标对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 参数2:handler----&gt;处理器对象,用来监视数据,及数据的操</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> proxyUser = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取目标对象的某个属性值</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;get方法调用了&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 修改目标对象的属性值/为目标对象添加新的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">target, prop, val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;set方法调用了&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, val);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 删除目标对象上的某个属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, prop</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;delete方法调用了&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//页面不会更新响应式数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> updateUser = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(proxyUser.name);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过代理对象更新目标对象上的某个属性值</span></span></span><br><span class="line"><span class="javascript">        proxyUser.name = <span class="string">&quot;鸣人&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(proxyUser);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过代理对象向目标对象中添加一个新的属性</span></span></span><br><span class="line"><span class="javascript">        proxyUser.gender = <span class="string">&quot;男&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">delete</span> proxyUser.gender;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 更新目标对象中的某个属性对象中的属性值</span></span></span><br><span class="line"><span class="javascript">        proxyUser.wife.name = <span class="string">&quot;雏田&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        proxyUser,</span></span><br><span class="line"><span class="javascript">        updateUser,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="reactive-与-ref-细节"><a href="#reactive-与-ref-细节" class="headerlink" title="reactive 与 ref-细节"></a>reactive 与 ref-细节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>reactive和ref的细节问题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m1:&#123;&#123; m1 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m2:&#123;&#123; m2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m3:&#123;&#123; m3 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 是Vue3的 composition API中2个最重要的响应式API(ref和reactive)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ref用来处理基本类型数据, reactive用来处理对象(递归深度响应式)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果用ref对象/数组, 内部会自动将对象/数组转换为reactive的代理对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ref内部: 通过给value属性添加getter/setter来实现对数据的劫持</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// reactive内部: 通过使用Proxy来实现对对象内部所有数据的劫持, 并通过Reflect操作对象内部数据</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ref的数据操作: 在js中要.value, 在模板中不需要(内部解析模板时会自动添加.value)</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 通过ref的方式设置的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m1 = ref(<span class="string">&quot;abc&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m2 = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">wife</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;小红&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// ref也可以传入对象吗</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m3 = ref(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">wife</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;小红&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更新数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ref中如果放入的是一个对象,那么是经过了reactive的处理,形成了一个Proxy类型的对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(m3);</span></span><br><span class="line"><span class="javascript">        m1.value += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        m2.wife.name += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// m3.value.name += &#x27;===&#x27;</span></span></span><br><span class="line"><span class="javascript">        m3.value.wife.name += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(m3.value.wife);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        m1,</span></span><br><span class="line"><span class="javascript">        m2,</span></span><br><span class="line"><span class="javascript">        m3,</span></span><br><span class="line"><span class="javascript">        update,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="watch-和-watchEffect"><a href="#watch-和-watchEffect" class="headerlink" title="watch 和 watchEffect"></a>watch 和 watchEffect</h2><ul><li><p>computed 函数:</p><ul><li>与 computed 配置功能一致</li><li>只有 getter</li><li>有 getter 和 setter</li></ul></li><li><p>watch 函数</p><ul><li>与 watch 配置功能一致</li><li>监视指定的一个或多个响应式数据, 一旦数据变化, 就自动执行监视回调</li><li>默认初始时不执行回调, 但可以通过配置 immediate 为 true, 来指定初始时立即执行第一次</li><li>通过配置 deep 为 true, 来指定深度监视</li></ul></li><li><p>watchEffect 函数</p><ul><li>不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据</li><li>默认初始时就会执行第一次, 从而可以收集需要监视的数据</li><li>监视数据发生变化时回调</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>计算属性和监视<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>姓名操作<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    姓氏:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓氏&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;user.firstName&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    名字:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;user.lastName&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>计算属性和监视的演示<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    姓名1:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;显示姓名1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;fullName1&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    姓名2:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;显示姓名2&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;fullName2&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    姓名3:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;显示姓名3&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;fullName3&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="javascript">    defineComponent,</span></span><br><span class="line"><span class="javascript">    reactive,</span></span><br><span class="line"><span class="javascript">    computed,</span></span><br><span class="line"><span class="javascript">    watch,</span></span><br><span class="line"><span class="javascript">    ref,</span></span><br><span class="line"><span class="javascript">    watchEffect,</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义一个响应式对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> user = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 姓氏</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">firstName</span>: <span class="string">&quot;东方&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 名字</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">lastName</span>: <span class="string">&quot;不败&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 通过计算属性的方式,实现第一个姓名的显示</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// vue3中的计算属性</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算属性的函数中如果只传入一个回调函数,表示的是get</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第一个姓名:</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 返回的是一个Ref类型的对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fullName1 = computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> user.firstName + <span class="string">&quot;_&quot;</span> + user.lastName;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第二个姓名:</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fullName2 = computed(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> user.firstName + <span class="string">&quot;_&quot;</span> + user.lastName;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">val: string</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(&#x27;=====&#x27;,val)</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> names = val.split(<span class="string">&quot;_&quot;</span>);</span></span><br><span class="line"><span class="javascript">          user.firstName = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">          user.lastName = names[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第三个姓名:</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fullName3 = ref(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视----监视指定的数据</span></span></span><br><span class="line"><span class="javascript">      watch(</span></span><br><span class="line"><span class="javascript">        user,</span></span><br><span class="line"><span class="javascript">        <span class="function">(<span class="params">&#123; firstName, lastName &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          fullName3.value = firstName + <span class="string">&quot;_&quot;</span> + lastName;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript">      <span class="comment">// immediate 默认会执行一次watch,deep 深度监视</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视,不需要配置immediate,本身默认就会进行监视,(默认执行一次)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// watchEffect(() =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   fullName3.value = user.firstName + &#x27;_&#x27; + user.lastName</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视fullName3的数据,改变firstName和lastName</span></span></span><br><span class="line"><span class="javascript">      watchEffect(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> names = fullName3.value.split(<span class="string">&quot;_&quot;</span>);</span></span><br><span class="line"><span class="javascript">        user.firstName = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        user.lastName = names[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// watch---可以监视多个数据的</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// watch([user.firstName,user.lastName,fullName3],()=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   // 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   console.log(&#x27;====&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当我们使用watch监视非响应式的数据的时候,代码需要改一下</span></span></span><br><span class="line"><span class="javascript">      watch([<span class="function">() =&gt;</span> user.firstName, <span class="function">() =&gt;</span> user.lastName, fullName3], <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;====&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        user,</span></span><br><span class="line"><span class="javascript">        fullName1,</span></span><br><span class="line"><span class="javascript">        fullName2,</span></span><br><span class="line"><span class="javascript">        fullName3,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><strong>生命周期 svg</strong></p><svg width="838" height="1388" xmlns="http://www.w3.org/2000/svg" fill="none" font-family="Inter,Roboto,sans-serif" font-size="14" text-anchor="middle">  <g transform="translate(283 63)">    <path d="M131 66v35h6l-7 14-7-14h6v-35h2z" fill="#9AA9B2"/>    <rect stroke="#2F679A" fill="#3E6B94" x="0.5" y="0.5" width="259" height="66" rx="8"/>    <text x="130" y="24.5" fill="#FFF" dominant-baseline="middle">      app = Vue.<tspan fill="#FFB196" dominant-baseline="middle">createApp</tspan>(<tspan fill="#39DD95" dominant-baseline="middle">options</tspan>)    </text>    <text x="130" y="43" fill="#FFF" dominant-baseline="middle">      app.<tspan fill="#FFB196" dominant-baseline="middle">mount</tspan>(<tspan fill="#39DD95" dominant-baseline="middle">el</tspan>)    </text>  </g>  <g transform="translate(316 178)">    <path d="M98 58v46h6l-7 14-7-14h6v-46h2z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="193" height="58" rx="8"/>    <text x="97" y="20.5" fill="#FFF" dominant-baseline="middle">Init</text>    <text x="97" y="39" fill="#FFF" dominant-baseline="middle">events &amp; lifecycle</text>  </g>  <g transform="translate(73 235)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeCreate</text>  </g>  <g transform="translate(316 296)">    <path d="M98 58v46h6l-7 14-7-14h6v-46h2z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="193" height="58" rx="8"/>    <text x="97" y="20.5" fill="#FFF" dominant-baseline="middle">Init</text>    <text x="97" y="39" fill="#FFF" dominant-baseline="middle">injections &amp; reactivity</text>  </g>  <g transform="translate(73 353)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">created</text>  </g>  <g transform="translate(317 414)">    <path d="M-45 53v52h6l-7 14-7-14h6v-54h286v54h6l-7 14-7-14h6v-52z" fill="#9AA9B2"/>    <polygon points="96,0.5 192,52 96,103.5 0,52" stroke="#F2781E" fill="#FF8228"/>    <text fill="#FFF" x="96" y="33.5" dominant-baseline="middle">Has</text>    <text fill="#FFF" x="96" y="52" dominant-baseline="middle">“template”</text>    <text fill="#FFF" x="96" y="70.5" dominant-baseline="middle">option?</text>    <text fill="#8E9EA9" x="-58.5" y="66.5" text-anchor="end" dominant-baseline="middle">YES</text>    <text fill="#8E9EA9" x="250" y="66.5" text-anchor="start" dominant-baseline="middle">NO</text>  </g>  <g transform="translate(167 533)">    <path d="M103 58h2v44h282v-44h2v46h-142v54h6l-7 14l-7-14h6v-54h-142z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="207" height="58" rx="8"/>    <text fill="#FFF" x="104" y="20.5" dominant-baseline="middle">Compile template</text>    <text fill="#FFF" x="104" y="39" dominant-baseline="middle">into render function <tspan fill="#F6DA72" dominant-baseline="middle">*</tspan></text>    <g transform="translate(284 0)">      <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="207" height="58" rx="8"/>      <text fill="#FFF" x="104" y="20.5" dominant-baseline="middle">Compile el’s innerHTML</text>      <text fill="#FFF" x="104" y="39" dominant-baseline="middle">as template <tspan fill="#F6DA72" dominant-baseline="middle">*</tspan></text>    </g>  </g>  <g transform="translate(73 639)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeMount</text>  </g>  <g transform="translate(316 705)">    <path d="M98 58v77h6l-7 14-7-14h6v-77h2z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="193" height="58" rx="8"/>    <text x="97" y="20.5" fill="#FFF" dominant-baseline="middle">Create app.$el and</text>    <text x="97" y="39" fill="#FFF" dominant-baseline="middle">append it to el</text>  </g>  <g transform="translate(73 777)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">mounted</text>  </g>  <g>    <g transform="translate(651.5 802.363) rotate(140 0 0)">      <path d="M14 0v14l-14-7l14-7z" fill="#DB5B62"/>      <line x1="60" y1="7" x2="15" y2="7" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    </g>    <g transform="translate(619 747)">      <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>      <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeUpdate</text>    </g>    <g transform="translate(642.5 1008.363) rotate(220 0 0)">      <path d="M14 0v14l-14-7l14-7z" fill="#DB5B62"/>      <line x1="60" y1="7" x2="15" y2="7" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    </g>    <g transform="translate(619 1003)">      <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>      <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">updated</text>    </g>    <path transform="translate(430 803)" stroke="#8999A4" stroke-width="2" stroke-dasharray="4" stroke-dashoffset="6" d="M147 16a95 95,0,1,1,-102 0"/>    <g transform="translate(539 860)">      <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="141" height="77" rx="8"/>      <text x="71" y="20.5" fill="#FFF" dominant-baseline="middle">Virtual DOM</text>      <text x="71" y="39" fill="#FFF" dominant-baseline="middle">re-rendered</text>      <text x="71" y="57.5" fill="#FFF" dominant-baseline="middle">and patch</text>    </g>    <g transform="translate(526 803)">      <text x="0" y="0" fill="#8E9EA9" dominant-baseline="middle">when data</text>      <text x="0" y="18.5" fill="#8E9EA9" dominant-baseline="middle">changes</text>    </g>  </g>  <g transform="translate(366 854)">    <circle stroke="#DC424C" fill="#DB5860" cx="47" cy="47" r="46.5"/>    <text x="47" y="48" fill="#FFF" dominant-baseline="middle">Mounted</text>    <path stroke="#9AA9B2" stroke-width="2" stroke-dasharray="3" d="M47 96v33"/>  </g>  <g transform="translate(355 947)">    <text x="58" y="55" fill="#8E9EA9" dominant-baseline="middle">when</text>    <text x="58" y="73.5" fill="#8E9EA9" dominant-baseline="middle">app.<tspan fill="#DB5B62" dominant-baseline="middle">unmount</tspan>()</text>    <text x="56" y="92" fill="#8E9EA9" dominant-baseline="middle">is called</text>    <path stroke="#9AA9B2" stroke-width="2" stroke-dasharray="3" d="M58 107v51"/>    <path d="M51 159l7 14 7-14z" fill="#9AA9B2"/>  </g>  <g transform="translate(73 1056)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeUnmount</text>  </g>  <g transform="translate(73 1150)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">unmounted</text>  </g>  <g transform="translate(359 1120)">    <circle stroke="#DC424C" fill="#DB5860" cx="54" cy="54" r="53.5"/>    <text x="54" y="55" fill="#FFF" dominant-baseline="middle">Unmounted</text>  </g>  <g transform="translate(413 1299.5)">    <text x="0" y="0" fill="#848484" dominant-baseline="middle">* Template compilation is performed ahead-of-time if using</text>    <text x="0" y="18.5" fill="#848484" dominant-baseline="middle">a build step, e.g., with single-file components.</text>  </g></svg><p><img src="/image/vue3/lifecycle.png" alt="生命周期"></p><p><a href="https://blog.csdn.net/qq_42445025/article/details/121978510">生命周期</a></p><p><strong>与 2.x 版本生命周期相对应的组合式 API</strong></p><ul><li><code>beforeCreate</code> -&gt; 使用 <code>setup()</code></li><li><code>created</code> -&gt; 使用 <code>setup()</code></li><li><code>beforeMount</code> -&gt; <code>onBeforeMount</code></li><li><code>mounted</code> -&gt; <code>onMounted</code></li><li><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li><li><code>updated</code> -&gt; <code>onUpdated</code></li><li><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code></li><li><code>destroyed</code> -&gt; <code>onUnmounted</code></li><li><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></li></ul><p><strong>新增的钩子函数</strong></p><p>组合式 API 还提供了以下调试钩子函数：</p><ul><li>onRenderTracked</li><li>onRenderTriggered</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child子级组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>msg:&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="javascript">    defineComponent,</span></span><br><span class="line"><span class="javascript">    ref,</span></span><br><span class="line"><span class="javascript">    onBeforeMount,</span></span><br><span class="line"><span class="javascript">    onMounted,</span></span><br><span class="line"><span class="javascript">    onBeforeUpdate,</span></span><br><span class="line"><span class="javascript">    onUpdated,</span></span><br><span class="line"><span class="javascript">    onBeforeUnmount,</span></span><br><span class="line"><span class="javascript">    onUnmounted,</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue2.x中的生命周期钩子</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeCreate...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的created...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeMount...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的mounted...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeUpdate...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的updated...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue2.x中的beforeDestroy和destroyed这两个生命周期回调已经在vue3中改名了,所以,不能再使用了</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUnmount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeUnmount...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">unmounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的unmounted...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的setup&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 响应式的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> msg = ref(<span class="string">&quot;abc&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 按钮点击事件的回调</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg.value += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      onBeforeMount(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onBeforeMount&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onMounted&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onBeforeUpdate(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onBeforeUpdate&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onUpdated(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onUpdated&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onBeforeUnmount&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onUnmounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onUnmounted&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg,</span></span><br><span class="line"><span class="javascript">        update,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><p>自定义 hook 函数</p><ul><li><p>使用 Vue3 的组合 API 封装的可复用的功能函数</p></li><li><p>自定义 hook 的作用类似于 vue2 中的 mixin 技术</p></li><li><p>自定义 Hook 的优势: 很清楚复用功能代码的来源, 更清楚易懂</p></li><li><p>需求 1: 收集用户鼠标点击的页面坐标</p></li></ul><ul><li>收集用户鼠标点击的页面坐标</li></ul><p>useMousePosition.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeUnmount, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> y = ref(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击事件的回调函数</span></span><br><span class="line">  <span class="keyword">const</span> clickHandler = <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    x.value = event.pageX;</span><br><span class="line">    y.value = event.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 页面已经加载完毕了,再进行点击的操作</span></span><br><span class="line">  <span class="comment">// 页面加载完毕的生命周期组合API</span></span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;click&quot;</span>, clickHandler);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 页面卸载之前的生命周期组合API</span></span><br><span class="line">  onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;click&quot;</span>, clickHandler);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x,</span><br><span class="line">    y,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>鼠标点击获取坐标<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x:&#123;&#123; x &#125;&#125;,y:&#123;&#123; y &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>请求接口数据<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>正在加载中....<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-else-if</span>=<span class="string">&quot;errorMsg&quot;</span>&gt;</span>错误信息:&#123;&#123; errorMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;&#123; addressData.id &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>address:&#123;&#123; addressData.address &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>distance:&#123;&#123; addressData.distance &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;item in data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>title:&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>price:&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> useMousePosition <span class="keyword">from</span> <span class="string">&quot;./useMousePosition&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> useRequest <span class="keyword">from</span> <span class="string">&quot;./useRequest&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义接口,约束对象的类型</span></span></span><br><span class="line"><span class="javascript">  interface AddressData &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">id</span>: number;</span></span><br><span class="line"><span class="javascript">    address: string;</span></span><br><span class="line"><span class="javascript">    distance: string;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  interface ProductsData &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">id</span>: string;</span></span><br><span class="line"><span class="javascript">    title: string;</span></span><br><span class="line"><span class="javascript">    price: number;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//1.鼠标坐标</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span></span><br><span class="line"><span class="javascript">      <span class="comment">//2.自定义数据获取</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; <span class="attr">data</span>: addressData &#125; =</span></span><br><span class="line"><span class="javascript">        useRequest&lt;AddressData&gt;(<span class="string">&quot;/data/address.json&quot;</span>); <span class="comment">// 获取对象数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 数组对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; loading, data, errorMsg &#125; = useRequest&lt;ProductsData[]&gt;(</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;/data/products.json&quot;</span></span></span><br><span class="line"><span class="javascript">      ); <span class="comment">// 获取数组数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视</span></span></span><br><span class="line"><span class="javascript">      watch(data, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (data.value) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data.value.length);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        x,</span></span><br><span class="line"><span class="javascript">        y,</span></span><br><span class="line"><span class="javascript">        loading,</span></span><br><span class="line"><span class="javascript">        data,</span></span><br><span class="line"><span class="javascript">        addressData,</span></span><br><span class="line"><span class="javascript">        errorMsg,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>利用 TS 泛型强化类型检查</p></li><li><p>需求 2: 封装发 ajax 请求的 hook 函数</p><p>useRequest.ts</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">// 发送ajax的请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">url: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 加载的状态</span></span><br><span class="line">  <span class="keyword">const</span> loading = ref(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 请求成功的数据</span></span><br><span class="line">  <span class="keyword">const</span> data = (ref &lt; T) | (<span class="literal">null</span> &gt; <span class="literal">null</span>); <span class="comment">// 坑</span></span><br><span class="line">  <span class="comment">// 错误信息</span></span><br><span class="line">  <span class="keyword">const</span> errorMsg = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="comment">// 发送请求</span></span><br><span class="line">  axios</span><br><span class="line">    .get(url)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 改变加载状态</span></span><br><span class="line">      loading.value = <span class="literal">false</span>;</span><br><span class="line">      data.value = response.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 改变加载状态</span></span><br><span class="line">      loading.value = <span class="literal">false</span>;</span><br><span class="line">      errorMsg.value = error.message || <span class="string">&quot;未知错误&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading,</span><br><span class="line">    data,</span><br><span class="line">    errorMsg,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><ul><li>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</li><li>应用: 当从合成函数返回响应式对象时，toRefs 非常有用，这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</li><li>问题: reactive 对象取出的所有属性值都是非响应式的</li><li>解决: 利用 toRefs 可以将一个响应式 reactive 对象的所有原始属性转换为响应式的 ref 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>toRefs的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h3&gt;name:&#123;&#123; state.name &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">  &lt;h3&gt;age:&#123;&#123; state.age &#125;&#125;&lt;/h3&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>name:&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>name2:&#123;&#123; name2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age2:&#123;&#123; age2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name2</span>: <span class="string">&quot;自来也&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">age2</span>: <span class="number">47</span>,</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      ...toRefs(state),</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;自来也&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">47</span>,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// toRefs可以把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// const state2 = toRefs(state)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; name, age &#125; = toRefs(state);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(state2)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定时器,更新数据,(如果数据变化了,界面也会随之变化,肯定是响应式的数据)</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state.name += &#x27;==&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.name.value+=&#x27;===&#x27;</span></span></span><br><span class="line"><span class="javascript">        name.value += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;======&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; name2, age2 &#125; = useFeatureX();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 下面的方式不行啊</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...state // 不是响应式的数据了----&gt;&#123;name:&#x27;自来也&#x27;,age:47&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...state2  toRefs返回来的对象</span></span></span><br><span class="line"><span class="javascript">        name,</span></span><br><span class="line"><span class="javascript">        age,</span></span><br><span class="line"><span class="javascript">        name2,</span></span><br><span class="line"><span class="javascript">        age2,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref-获取元素"><a href="#ref-获取元素" class="headerlink" title="ref 获取元素"></a>ref 获取元素</h2><p>利用 ref 函数获取组件中的标签元素</p><p>功能需求: 让输入框自动获取焦点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ref的另一个作用:可以获取页面中的元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputRef&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 需求:当页面加载完毕后,页面中的文本框可以直接获取焦点(自动获取焦点)</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 默认是空的,页面加载完毕,说明组件已经存在了,获取文本框元素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> inputRef = ref&lt;HTMLElement | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面加载后的生命周期组合API</span></span></span><br><span class="line"><span class="javascript">      onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        inputRef.value &amp;&amp; inputRef.value.focus(); <span class="comment">// 自动获取焦点</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        inputRef,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive : 只处理了对象内最外层属性的响应式(也就是浅响应式)</p></li><li><p>shallowRef: 只处理了 value 的响应式, 不进行对象的 reactive 处理</p></li><li><p>什么时候用浅响应式呢?</p><ul><li>一般情况下使用 ref 和 reactive 即可</li><li>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive</li><li>如果有一个对象数据, 后面会产生新的对象来替换 ===&gt; shallowRef</li></ul></li></ul><p>shallowReactive 与 shallowRef<br>shallowReactive: 只处理了对象内最外层属性的响应式(也就是浅响应式)<br>shallowRef: 只处理了 value 的响应式, 不进行对象的 reactive 处理<br>总结:<br>reactive 与 ref 实现的是深度响应式, 而 shallowReactive 与 shallowRef 是浅响应式<br>什么时候用浅响应式呢?<br>一般情况下使用 ref 和 reactive 即可,<br>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive<br>如果有一个对象数据, 后面会产生新的对象来替换 ===&gt; shallowRef</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m1: &#123;&#123;m1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m2: &#123;&#123;m2&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m3: &#123;&#123;m3&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m4: &#123;&#123;m4&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; reactive, ref, shallowReactive, shallowRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m1 = reactive(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m2 = shallowReactive(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m3 = ref(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m4 = shallowRef(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// m1.b.c += 1</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// m2.b.c += 1</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// m3.value.a += 1</span></span></span><br><span class="line"><span class="javascript">        m4.value.a += <span class="number">1</span>; <span class="comment">//不会更新视图</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        m1,</span></span><br><span class="line"><span class="javascript">        m2,</span></span><br><span class="line"><span class="javascript">        m3,</span></span><br><span class="line"><span class="javascript">        m4,</span></span><br><span class="line"><span class="javascript">        update,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul><li>readonly:<ul><li>深度只读数据</li><li>获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。</li><li>只读代理是深层的：访问的任何嵌套 property 也是只读的。</li></ul></li><li>shallowReadonly<ul><li>浅只读数据</li><li>创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换</li></ul></li><li>应用场景:<ul><li>在某些特定情况下, 我们可能不希望对数据进行更新的操作, 那就可以包装生成一个只读代理对象来读取数据, 而不能修改或删除</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>readonly和shallowReadonly<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>state:&#123;&#123; state2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, readonly, shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;佐助&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;奔驰&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">color</span>: <span class="string">&quot;yellow&quot;</span>,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 只读的数据---深度的只读</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// const state2 = readonly(state)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 只读的数据---浅只读的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state2 = shallowReadonly(state);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.name += &#x27;===&#x27;//不能操作</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.car.name += &#x27;==&#x27; //不能操作</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.name+=&#x27;===&#x27; // 不能操作</span></span></span><br><span class="line"><span class="javascript">        state2.car.name += <span class="string">&quot;===&quot;</span>; <span class="comment">//可以更新视图</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        state2,</span></span><br><span class="line"><span class="javascript">        update,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul><li>toRaw<ul><li>返回由 <code>reactive</code> 或 <code>readonly</code> 方法转换成响应式代理的普通对象。</li><li>这是一个还原方法，可用于临时读取，访问不会被代理/跟踪，写入时也不会触发界面更新。</li></ul></li><li>markRaw<ul><li>标记一个对象，使其永远不会转换为代理。返回对象本身</li><li>应用场景:<ul><li>有些值不应被设置为响应式的，例如复杂的第三方类实例或 Vue 组件对象。</li><li>当渲染具有不可变数据源的大列表时，跳过代理转换可以提高性能。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>toRaw和markRaw<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>state:&#123;&#123; state &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;testToRaw&quot;</span>&gt;</span>测试toRaw<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;testMarkRaw&quot;</span>&gt;</span>测试markRaw<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, markRaw, reactive, toRaw &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  interface UserInfo &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: string;</span></span><br><span class="line"><span class="javascript">    age: number;</span></span><br><span class="line"><span class="javascript">    likes?: string[];</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive&lt;UserInfo&gt;(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> testToRaw = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把代理对象变成了普通对象了,数据变化,界面不变化</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> user = toRaw(state);</span></span><br><span class="line"><span class="javascript">        user.name += <span class="string">&quot;==&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;哈哈,我好帅哦&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> testMarkRaw = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state.likes = [&#x27;吃&#x27;, &#x27;喝&#x27;]</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state.likes[0] += &#x27;==&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(state)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> likes = [<span class="string">&quot;吃&quot;</span>, <span class="string">&quot;喝&quot;</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// markRaw标记的对象数据,从此以后都不能再成为代理对象了</span></span></span><br><span class="line"><span class="javascript">        state.likes = markRaw(likes);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//不会更新视图</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (state.likes) &#123;</span></span><br><span class="line"><span class="javascript">            state.likes[<span class="number">0</span>] += <span class="string">&quot;=&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;定时器走起来&quot;</span>);</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        state,</span></span><br><span class="line"><span class="javascript">        testToRaw,</span></span><br><span class="line"><span class="javascript">        testMarkRaw,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><ul><li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li><li>需求: 使用 customRef 实现 debounce 的示例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CustomRef的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; keyword &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; customRef, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 自定义hook防抖的函数</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// value传入的数据,将来数据的类型不确定,所以,用泛型,delay防抖的间隔时间.默认是200毫秒</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, delay = <span class="number">200</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 准备一个存储定时器的id的变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timeOutId: number | any;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 返回数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 告诉Vue追踪数据</span></span></span><br><span class="line"><span class="javascript">          track();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">newValue: T</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 清理定时器</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearTimeout</span>(timeOutId);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="javascript">          timeOutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            value = newValue;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 告诉Vue更新界面</span></span></span><br><span class="line"><span class="javascript">            trigger();</span></span><br><span class="line"><span class="javascript">          &#125;, delay);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// const keyword = ref(&#x27;abc&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> keyword = useDebouncedRef(<span class="string">&quot;abc&quot;</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        keyword,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="toRef-子父组件通讯"><a href="#toRef-子父组件通讯" class="headerlink" title="toRef(子父组件通讯)"></a>toRef(子父组件通讯)</h2><ul><li>为源响应式对象上的某个属性创建一个 ref 对象, 二者内部操作的是同一个数据值, 更新时二者是同步的</li><li>区别 ref: 拷贝了一份新的数据值单独操作, 更新时相互不影响</li><li>应用: 当要将 某个 prop 的 ref 传递给复合函数时，toRef 很有用</li></ul><blockquote><p>Child 子级组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child子级组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>length:&#123;&#123; length &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, computed, Ref, toRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useGetLength</span>(<span class="params">age: Ref</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> age.value.toString().length;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">age</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">required</span>: <span class="literal">true</span>, <span class="comment">// 必须的</span></span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> length = useGetLength(toRef(props, <span class="string">&quot;age&quot;</span>));</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        length,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>父组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>toRef的使用及特点:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>state:&#123;&#123; state &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>money:&#123;&#123; money &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, toRef, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      Child,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">money</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把响应式数据state对象中的某个属性age变成了ref对象了</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> age = toRef(state, <span class="string">&quot;age&quot;</span>); <span class="comment">//子父组件公用数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把响应式对象中的某个属性使用ref进行包装,变成了一个ref对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> money = ref(state.money);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(age)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(money)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 更新数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&#x27;测试&#x27;)</span></span></span><br><span class="line"><span class="javascript">        state.age += <span class="number">2</span>; <span class="comment">//子父视图更新</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//age.value += 3 //子父视图更新</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//money.value += 10 //父视图更新</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        state,</span></span><br><span class="line"><span class="javascript">        age,</span></span><br><span class="line"><span class="javascript">        money,</span></span><br><span class="line"><span class="javascript">        update,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="customRef-1"><a href="#customRef-1" class="headerlink" title="customRef"></a>customRef</h2><ul><li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li><li>需求: 使用 customRef 实现 debounce 的示例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CustomRef的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; keyword &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; customRef, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 自定义hook防抖的函数</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// value传入的数据,将来数据的类型不确定,所以,用泛型,delay防抖的间隔时间.默认是200毫秒</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, delay = <span class="number">200</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 准备一个存储定时器的id的变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timeOutId: number | any;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 返回数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 告诉Vue追踪数据</span></span></span><br><span class="line"><span class="javascript">          track();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">newValue: T</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 清理定时器</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearTimeout</span>(timeOutId);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="javascript">          timeOutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            value = newValue;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 告诉Vue更新界面</span></span></span><br><span class="line"><span class="javascript">            trigger();</span></span><br><span class="line"><span class="javascript">          &#125;, delay);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// const keyword = ref(&#x27;abc&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> keyword = useDebouncedRef(<span class="string">&quot;abc&quot;</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        keyword,</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><ul><li><p><code>provide</code>和<code>inject</code>提供依赖注入，功能类似 2.x 的<code>provide/inject</code></p></li><li><p>实现跨层级组件(祖孙)间通信</p></li></ul><ul><li>代码糖</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive, provide &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;parent&quot;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    childTest,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> person = reactive(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 给自己的后代组件传递数据</span></span><br><span class="line">    provide(<span class="string">&quot;person&quot;</span>, person);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 函数的返回值就是我们所接收的值</span></span><br><span class="line">    <span class="keyword">let</span> person = inject(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Fragment-片断"><a href="#Fragment-片断" class="headerlink" title="Fragment(片断)"></a>Fragment(片断)</h2><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Teleport-瞬移"><a href="#Teleport-瞬移" class="headerlink" title="Teleport(瞬移)"></a>Teleport(瞬移)</h2><ul><li>Teleport 提供了一种干净的方法, 让组件的 html 在父组件界面外的特定标签(很可能是 body)下插入显示</li></ul><p>ModalButton.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modalOpen = true&quot;</span>&gt;</span></span><br><span class="line">    Open full screen modal! (With teleport!)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;modalOpen&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        I&#x27;m a teleported modal! (My parent is &quot;body&quot;)</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modalOpen = false&quot;</span>&gt;</span></span><br><span class="line">          Close</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;modal-button&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> modalOpen = ref(<span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      modalOpen</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.modal</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.modal</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">  <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">  <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modal-button</span>&gt;</span><span class="tag">&lt;/<span class="name">modal-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ModalButton <span class="keyword">from</span> <span class="string">&#x27;./ModalButton.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    ModalButton</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Suspense-不确定的"><a href="#Suspense-不确定的" class="headerlink" title="Suspense(不确定的)"></a>Suspense(不确定的)</h2><ul><li>它们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AsyncComp</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;AsyncAddress/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LOADING...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">异步组件 + Suspense组件</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// import AsyncComp from &#x27;./AsyncComp.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> AsyncAddress <span class="keyword">from</span> <span class="string">&#x27;./AsyncAddress.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> AsyncComp = defineAsyncComponent(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./AsyncComp.vue&#x27;</span>))</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    AsyncComp,</span></span><br><span class="line"><span class="javascript">    AsyncAddress</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>AsyncComp.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>AsyncComp22<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;AsyncComp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// return new Promise((resolve, reject) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   setTimeout(() =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     resolve(&#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//       msg: &#x27;abc&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   &#125;, 2000)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&#x27;abc&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>AsyncAddress.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">async</span> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="keyword">await</span> axios.get(<span class="string">&#x27;/data/address.json&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">data</span>: result.data</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><blockquote><p>步骤</p></blockquote><ul><li><p>1.安装<br><code>npm install vue-router@next --save</code></p></li><li><p>2.新建组件<br>在 components 文件下新建 vue 页面文件</p></li><li><p>3.在 src 目录下新建 router.ts 文件</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> Reactive <span class="keyword">from</span> <span class="string">&quot;./components/reactive.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/reactive&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: Reactive,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 导出router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p><code>注意</code><br>找不到模块“xxx.vue”或其相应的类型声明问题解决<br>在项目根目录或 src 文件夹下创建一个后缀为 .d.ts 的文件，并写入以下内容：<br>在 src 新建 vue.d.ts 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; App, defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> component: ReturnType&lt;<span class="keyword">typeof</span> defineComponent&gt; &amp; &#123;</span><br><span class="line">    install(app: App): <span class="keyword">void</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4.在入口文件 main.ts 中挂载使用 router</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>; <span class="comment">// 引入router</span></span><br><span class="line"><span class="comment">// createApp(App).mount(&#x27;#app&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(router); <span class="comment">//挂载使用router</span></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>5.在跟组件 App.vue 中使用路由</li></ul><ul><li>视图</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>跳转</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/reative&quot;</span>&gt;</span>reative<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="导入-axios-时，报错"><a href="#导入-axios-时，报错" class="headerlink" title="导入 axios 时，报错"></a>导入 axios 时，报错</h2><p><span style="color:#fe2c24;">Uncaught SyntaxError: The requested module ‘/@modules/axios/index.js’ does not provide an export named ‘default’</span></p><p>方法一<br>处理:下载 axios 的位置必须在”dependencies”中而不能是 “devDependencies”</p><p>方法二</p><ol><li>将 vite 升级到了 vite2.x 版本</li><li>对应插件@vitejs/plugin-vue</li></ol><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;@vue/compiler-sfc&quot;</span>: <span class="string">&quot;^3.0.4&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;@vitejs/plugin-vue&quot;</span>: <span class="string">&quot;^2.3.3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vite&quot;</span>: <span class="string">&quot;^1.0.0-rc.13&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件配置<br>根目录新建 vite.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vue = <span class="built_in">require</span>(<span class="string">&quot;@vitejs/plugin-vue&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [vue()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue3.0学习</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="https://wecy-chen.github.io/2022/05/13/ts/"/>
    <id>https://wecy-chen.github.io/2022/05/13/ts/</id>
    <published>2022-05-13T02:46:31.422Z</published>
    <updated>2022-06-17T07:14:28.519Z</updated>
    
    <content type="html"><![CDATA[<!-- 图片路径/image/ts/ --><p><strong>TypeScript学习</strong></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>文档说明</p><ol><li> <a href="https://jkchao.github.io/typescript-book-chinese/typings/literals.html">学习地址</a>  </li><li><a href="https://24kcs.github.io/vue3_study/">快速上手</a></li><li><a href="https://www.typescriptlang.org/zh/play?ts=4.1.0-pr-40336-8#code/C4TwDgpgBAggJnAThAziqBeKBtFxECWAdgOYA0URArgLYBGEiAugNwBQAZlUQMbAEB7IlBQRg8JKhQAKAHTyAhohIoAXLATI0ASigBvNlCgB6YyIE1oPAXGgALRhENRrRFAIA2EWR4ElpSira7AC+bKLimlLSAEQAjDEUAEzBQA">代码测试</a></li><li>安装</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install -g typescript   安装</span><br><span class="line">&gt;tsc -v     查看版本Version <span class="number">4.6</span><span class="number">.4</span></span><br><span class="line">&gt;tsc --init  生成tsconfig.json配置文件</span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><blockquote><p>新建ts文件</p></blockquote><p>src/helloworld.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&#x27;Yee&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user))</span><br></pre></td></tr></table></figure><p><code>&gt;tsc helloworld.ts</code>  编译<br><code>&gt;node helloworld.js</code> 运行<br><code> hello,Yee</code> 打印</p><blockquote><p>vscode自动编译</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 生成配置文件tsconfig.json</span><br><span class="line">    tsc --init</span><br><span class="line"><span class="number">2</span>). 修改tsconfig.json配置</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">false</span>,    </span><br><span class="line"><span class="number">3</span>). 启动监视任务: </span><br><span class="line">    终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</span><br></pre></td></tr></table></figure><p>终端任务重用<br><img src="/image/ts/639_1.png" alt="e273c55cd0693cc35d379d5a6791b045.png"></p><p>如果还是失败,vscode编辑器要选择默认终端</p><p>配置中文提示<br>配送搜索 typescript local 设置成zh-CN</p><p><a href="https://jkchao.github.io/typescript-book-chinese/project/compilationContext.html#%E5%9F%BA%E7%A1%80">编译选项</a></p><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><p> &gt; 基本语法<br> <br> <code> let 变量名: 数据类型 = 值</code></p><p> <br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> a2: number = <span class="number">0b1010</span>  <span class="comment">// 二进制</span></span><br><span class="line"><span class="comment">// 类型包括 :</span></span><br><span class="line"> <span class="comment">// number string undefined boolean object </span></span><br><span class="line"> <span class="comment">// any  任何变量</span></span><br></pre></td></tr></table></figure></p><h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p>语法:<br> <code>let 变量名: 数据类型[] = [值1,值2,值3]</code><br>语法:<br> <code>let 变量名: Array&lt;数据类型&gt; = [值1,值2,值3]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr1: number[] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br></pre></td></tr></table></figure><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>枚举里面的每个数据值都可以叫元素,每个元素都有自己的编号,编号是从0开始的,依次的递增加1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  enum Color &#123;</span><br><span class="line">    red = <span class="number">1</span>,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个Color的枚举类型的变量来接收枚举的值</span></span><br><span class="line">  <span class="keyword">let</span> color: Color = Color.red</span><br><span class="line">  <span class="built_in">console</span>.log(color)  <span class="comment">//1 </span></span><br><span class="line">  <span class="built_in">console</span>.log(Color.red, Color.green, Color.blue) <span class="comment">// 1,2,3</span></span><br><span class="line">  <span class="built_in">console</span>.log(Color[<span class="number">3</span>]) <span class="comment">// &quot;blue&quot; </span></span><br></pre></td></tr></table></figure><blockquote><p>void 类型</p></blockquote><p>在函数声明的时候,小括号的后面使用:void,代表的是该函数没有任何的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">    <span class="comment">// return</span></span><br><span class="line">    <span class="comment">// return undefined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span> <span class="comment">//报错</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(showMsg())</span><br></pre></td></tr></table></figure><blockquote><p>object 类型</p></blockquote><p>定义一个函数,参数是object类型,返回值也是object类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params">obj: object</span>): <span class="title">object</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;卡卡西&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(getObj(<span class="built_in">String</span>))</span><br><span class="line">  <span class="comment">//function String() &#123; [native code] &#125; </span></span><br><span class="line">  <span class="comment">// &#123;&quot;name&quot;: &quot;卡卡西&quot;,&quot;age&quot;: 27 &#125; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>联合类型，类型断言，类型推断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类型断言(Type Assertion): 可以用来手动指定一个值的类型</span></span><br><span class="line"><span class="comment">语法:</span></span><br><span class="line"><span class="comment">    方式一: &lt;类型&gt;值</span></span><br><span class="line"><span class="comment">    方式二: 值 as 类型  tsx中只能用这种方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 需求: 定义一个函数得到一个字符串或者数值数据的长度 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">x: number | string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((x <span class="keyword">as</span> string).length) &#123;</span><br><span class="line">    <span class="keyword">return</span> (x <span class="keyword">as</span> string).length</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getLength(<span class="string">&#x27;abcd&#x27;</span>), getLength(<span class="number">1234</span>))</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是对象的状态(属性)和行为(方法)的抽象(描述)<br>接口:是一种类型,是一种规范,是一种规则,是一个能力,是一种约束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 需求: 创建人的对象, 需要对人的属性进行一定的约束</span></span><br><span class="line">  <span class="comment">// id是number类型, 必须有, 只读的</span></span><br><span class="line">  <span class="comment">// name是string类型, 必须有</span></span><br><span class="line">  <span class="comment">// age是number类型, 必须有</span></span><br><span class="line">  <span class="comment">// sex是string类型, 可以没有</span></span><br><span class="line">  <span class="comment">// 定义一个接口,该接口作为person对象的类型使用,限定或者是约束该对象中的属性数据</span></span><br><span class="line">  interface IPerson &#123;</span><br><span class="line">    <span class="comment">// readonly id是只读的,是number类型,const修饰属性,想要设置该属性是只读的,是不能使用的</span></span><br><span class="line">    readonly id:  number</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">    <span class="comment">// ? 可有可无的</span></span><br><span class="line">    sex?: string</span><br><span class="line"><span class="comment">//定义了任意属性取 string 类型的值</span></span><br><span class="line">[proppName:string]:any;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个对象,该对象的类型就是我定义的接口IPerson</span></span><br><span class="line">  <span class="keyword">const</span> person: IPerson = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小甜甜&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="comment">// sex这个属性没有也是可以的</span></span><br><span class="line">    <span class="comment">// sex: &#x27;女&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  <span class="comment">// id属性此时是可读可写</span></span><br><span class="line">  <span class="comment">// person.id = 100</span></span><br><span class="line">  person.sex=<span class="string">&#x27;女&#x27;</span></span><br><span class="line">  <span class="comment">// person.money = &#x27;123131&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br></pre></td></tr></table></figure><blockquote><p>函数类型</p></blockquote><p> 为了使用接口表示函数类型，我们需要给接口定义一个调用签名。</p><p>它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 函数类型:通过接口的方式作为函数的类型来使用</span></span><br><span class="line">  <span class="comment">// 定义一个接口,用来作为某个函数的类型使用</span></span><br><span class="line">  interface ISearchFunc &#123;</span><br><span class="line">    <span class="comment">// 定义一个调用签名</span></span><br><span class="line">    (source: string, <span class="attr">subString</span>: string): boolean</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个函数,该类型就是上面定义的接口</span></span><br><span class="line">  <span class="keyword">const</span> searchString: ISearchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">source: string, subString: string</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在source字符串中查找subString这个字符串</span></span><br><span class="line">    <span class="keyword">return</span> source.search(subString) &gt; -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(searchString(<span class="string">&#x27;哈哈,我又变帅了&#x27;</span>, <span class="string">&#x27;帅&#x27;</span>))</span><br><span class="line"><span class="comment">//&quot;Hello, Yee Huang&quot;</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>类类型(约束) </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个接口</span></span><br><span class="line">  interface IFly &#123;</span><br><span class="line">    <span class="comment">// 该方法没有任何的实现(方法中什么都没有)</span></span><br><span class="line">    <span class="comment">// fly()</span></span><br><span class="line">    <span class="attr">fly</span>:<span class="built_in">Function</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,这个类的类型就是上面定义的接口(实际上也可以理解为,IFly接口约束了当前的这个Person类)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">IFly</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现接口中的方法</span></span><br><span class="line">    <span class="function"><span class="title">fly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我会飞了,我是超人&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">  person.fly()   <span class="comment">//&quot;我会飞了,我是超人&quot;</span></span><br><span class="line">  <span class="comment">// 定义一个接口</span></span><br><span class="line">  interface ISwim &#123;</span><br><span class="line">    <span class="attr">swim</span>:<span class="built_in">Function</span></span><br><span class="line">    <span class="comment">// swim()</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,这个类的类型就是IFly和ISwim(当前这个类可以实现多个接口,一个类同时也可以被多个接口进行约束)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person2</span> <span class="title">implements</span> <span class="title">IFly</span>, <span class="title">ISwim</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">fly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我飞了2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">swim</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我会游泳啦2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person2 = <span class="keyword">new</span> Person2()</span><br><span class="line">  person2.fly()  <span class="comment">//&quot;我飞了2&quot;</span></span><br><span class="line">  person2.swim()   <span class="comment">//&quot;我会游泳啦2&quot;</span></span><br><span class="line">  <span class="comment">// 总结: 类可以通过接口的方式,来定义当前这个类的类型</span></span><br><span class="line">  <span class="comment">// 类可以实现一个接口,类也可以实现多个接口,要注意,接口中的内容都要真正的实现</span></span><br><span class="line">  <span class="comment">// 定义了一个接口,继承其他的多个接口</span></span><br><span class="line">  interface IMyFlyAndSwim <span class="keyword">extends</span> IFly, ISwim &#123; &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,直接实现IMyFlyAndSwim这个接口</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person3</span> <span class="title">implements</span> <span class="title">IMyFlyAndSwim</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">fly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我飞了3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">swim</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我会游泳啦3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> person3 = <span class="keyword">new</span> Person3()</span><br><span class="line">  person3.fly()   <span class="comment">//&quot;我飞了3&quot;</span></span><br><span class="line">  person3.swim()   <span class="comment">//我会游泳啦3</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 总结:接口和接口之间叫继承(使用的是extends关键字),类和接口之间叫实现(使用的是implements)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>建一个 User 类，它带有一个构造函数和一些公共字段。因为类的字段包含了接口所需要的字段，所以他们能很好的兼容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 类:可以理解为模版,通过模版可以实例化对象</span></span><br><span class="line"><span class="comment">// 面向对象的编程思想</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="attr">fullName</span>: string</span><br><span class="line">  <span class="attr">firstName</span>: string</span><br><span class="line">  <span class="attr">lastName</span>: string</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span> (<span class="params">firstName: string, lastName: string</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName = firstName</span><br><span class="line">    <span class="built_in">this</span>.lastName = lastName</span><br><span class="line">    <span class="built_in">this</span>.fullName = firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">  &#125;&#125;</span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">  <span class="attr">firstName</span>: string</span><br><span class="line">  <span class="attr">lastName</span>: string&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span> (<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + person.firstName + <span class="string">&#x27; &#x27;</span> + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;Yee&#x27;</span>, <span class="string">&#x27;Huang&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user)) <span class="comment">//&quot;Hello, Yee Huang&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>继承</p></blockquote><p> 继承:类与类之间的关系<br> 继承后类与类之间的叫法:<br>A类继承了B这个类,那么此时A类叫子类,B类叫基类<br> 子类—-&gt;派生类<br>基类—-&gt;超类(父类)<br>一旦发生了继承的关系,就出现了父子类的关系(叫法)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 定义一个类,作为基类(超类/父类)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="attr">name</span>: string <span class="comment">// 名字</span></span><br><span class="line">    <span class="attr">age</span>: number <span class="comment">// 年龄</span></span><br><span class="line">    <span class="attr">gender</span>: string <span class="comment">// 性别</span></span><br><span class="line">    <span class="comment">// 定义构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string=<span class="string">&#x27;小明&#x27;</span>, age: number=<span class="number">18</span>, gender: string=<span class="string">&#x27;男&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 更新属性数据</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">      <span class="built_in">this</span>.age = age</span><br><span class="line">      <span class="built_in">this</span>.gender = gender</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义实例方法</span></span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params">str: string</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`我是:<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,<span class="subst">$&#123;str&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,继承自Person</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string, age: number, gender: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 调用的是父类中的构造函数,使用的是super</span></span><br><span class="line">      <span class="built_in">super</span>(name, age, gender)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 可以调用父类中的方法</span></span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我是学生类中的sayHi方法&#x27;</span>)</span><br><span class="line">      <span class="comment">// 调用父类中的sayHi方法</span></span><br><span class="line">      <span class="built_in">super</span>.sayHi(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化Person</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;大明明&#x27;</span>,<span class="number">89</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">  person.sayHi(<span class="string">&#x27;嘎嘎&#x27;</span>)</span><br><span class="line">  <span class="comment">//打印: &quot;我是:大明明,嘎嘎&quot;</span></span><br><span class="line">  <span class="comment">// 实例化Student</span></span><br><span class="line">  <span class="keyword">const</span> stu = <span class="keyword">new</span> Student(<span class="string">&#x27;小甜甜&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">  stu.sayHi()</span><br><span class="line">  <span class="comment">//打印: &quot;我是学生类中的sayHi方法&quot;</span></span><br><span class="line">  <span class="comment">//打印: &quot;我是:小甜甜,哈哈&quot;</span></span><br><span class="line">  <span class="comment">// 总结:类和类之间如果要有继承关系,需要使用extends关键字</span></span><br><span class="line">  <span class="comment">// 子类中可以调用父类中的构造函数,使用的是super关键字(包括调用父类中的实例方法,也可以使用super)</span></span><br><span class="line">  <span class="comment">// 子类中可以重写父类的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>多态</p></blockquote><p>多态:父类型的引用指向了子类型的对象,不同类型的对象针对相同的方法,产生了不同的行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 定义一个父类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个属性</span></span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="comment">// 定义一个构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 更新属性值</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params">distance: number = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`跑了<span class="subst">$&#123;distance&#125;</span> 米这么远的距离`</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 调用父类的构造函数,实现子类中属性的初始化操作</span></span><br><span class="line">      <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法,重写父类中的实例方法</span></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params">distance: number = <span class="number">5</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`跑了<span class="subst">$&#123;distance&#125;</span> 米这么远的距离`</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 调用父类的构造函数,实现子类中属性的初始化操作</span></span><br><span class="line">      <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法,重写父类中的实例方法</span></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params">distance: number = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`跑了<span class="subst">$&#123;distance&#125;</span> 米这么远的距离`</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化父类对象</span></span><br><span class="line">  <span class="keyword">const</span> ani: Animal = <span class="keyword">new</span> Animal(<span class="string">&#x27;动物&#x27;</span>)</span><br><span class="line">  ani.run() <span class="comment">//&quot;跑了0 米这么远的距离&quot;,  &quot;动物&quot;</span></span><br><span class="line">  <span class="comment">// 实例化子类对象</span></span><br><span class="line">  <span class="keyword">const</span> dog: Dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;大黄&#x27;</span>)</span><br><span class="line">  dog.run() <span class="comment">//&quot;跑了5 米这么远的距离&quot;,  &quot;大黄&quot;</span></span><br><span class="line">  <span class="comment">// 实例化子类对象</span></span><br><span class="line">  <span class="keyword">const</span> pig: Pig = <span class="keyword">new</span> Pig(<span class="string">&#x27;八戒&#x27;</span>)</span><br><span class="line">  pig.run() <span class="comment">//&quot;跑了10 米这么远的距离&quot;,  &quot;八戒&quot;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;===========&#x27;</span>)</span><br><span class="line">  <span class="comment">// 父类和子类的关系:父子关系,此时,父类类型创建子类的对象</span></span><br><span class="line">  <span class="keyword">const</span> dog1: Animal = <span class="keyword">new</span> Dog(<span class="string">&#x27;小黄&#x27;</span>)</span><br><span class="line">  dog1.run() <span class="comment">// &quot;跑了5 米这么远的距离&quot;,  &quot;小黄&quot;  </span></span><br><span class="line">  <span class="keyword">const</span> pig1: Animal = <span class="keyword">new</span> Pig(<span class="string">&#x27;小猪&#x27;</span>)</span><br><span class="line">  pig1.run() <span class="comment">//  &quot;跑了10 米这么远的距离&quot;,  &quot;小猪&quot;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;=============&#x27;</span>)</span><br><span class="line">  <span class="comment">// 该函数需要的参数是Animal类型的</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showRun</span>(<span class="params">ani: Animal</span>) </span>&#123;</span><br><span class="line">    ani.run()</span><br><span class="line">  &#125;</span><br><span class="line">  showRun(dog1) <span class="comment">//&quot;跑了5 米这么远的距离&quot;,  &quot;小黄&quot;</span></span><br><span class="line">  showRun(pig1) <span class="comment">//&quot;跑了10 米这么远的距离&quot;,  &quot;小猪&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>修饰符</p></blockquote><p>修饰符(类中的成员的修饰符):主要是描述类中的成员(属性,构造函数,方法)的可访问性<br>类中的成员都有自己的默认的访问修饰符,public<br>public修饰符—公共的,类中成员默认的修饰符,代表的是公共的,任何位置都可以访问类中的成员<br>private修饰符—私有的,类中的成员如果使用private来修饰,那么外部是无法访问这个成员数据的,当然,子类中也是无法访问该成员数据的<br>protected修饰符—-受保护的,类中的成员如果使用protected来修饰,那么外部是无法访问这个成员数据的,当然,子类中是可以访问该成员数据的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性 public 修饰了属性成员</span></span><br><span class="line">    <span class="comment">// public name: string</span></span><br><span class="line">    <span class="comment">// 属性 private 修饰了属性成员</span></span><br><span class="line">    <span class="comment">// private name: string</span></span><br><span class="line">    <span class="comment">// 属性protected 修饰了属性成员</span></span><br><span class="line">    protected name:string</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    public <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 更新属性</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    public <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;嗯,这个骨头真好吃&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">play</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我就喜欢玩布娃娃&#x27;</span>,<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;大蛇丸&#x27;</span>)</span><br><span class="line">  <span class="comment">// 类的外部可以访问类中的属性成员</span></span><br><span class="line">  <span class="comment">// console.log(per.name)</span></span><br><span class="line">  per.eat()  <span class="comment">//&quot;嗯,这个骨头真好吃&quot;,  &quot;大蛇丸&quot;</span></span><br><span class="line">  <span class="keyword">const</span> stu = <span class="keyword">new</span> Student(<span class="string">&#x27;红豆&#x27;</span>)</span><br><span class="line">  stu.play() <span class="comment">//&quot;我就喜欢玩布娃娃&quot;,  &quot;红豆&quot;</span></span><br><span class="line">  <span class="comment">// console.log(stu.name)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>readonly修饰符</p></blockquote><p>readonly修饰符:首先是一个关键字,对类中的属性成员进行修饰,修饰后,该属性成员,就不能在外部被随意的修改了<br>构造函数中,可以对只读的属性成员的数据进行修改<br>如果构造函数中没有任何的参数,类中的属性成员此时已经使用readonly进行修饰了,那么外部也是不能对这个属性值进行更改的<br>构造函数中的参数可以使用readonly进行修饰,一旦修饰了,那么该类中就有了这个只读的成员属性了,外部可以访问,但是不能修改<br>构造函数中的参数可以使用public及privte和protected进行修饰,无论是哪个进行修饰,该类中都会自动的添加这么一个属性成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// readonly修饰类中的成员属性操作</span></span><br><span class="line">  <span class="comment">// 定义一个类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="comment">// readonly name: string=&#x27;大甜甜&#x27; // 初始值</span></span><br><span class="line">    readonly name: string</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string = <span class="string">&#x27;大甜甜&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;考尼奇瓦&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">      <span class="comment">// 类中的普通方法中,也是不能修改readonly修饰的成员属性值</span></span><br><span class="line">      <span class="comment">// this.name = &#x27;大甜甜&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;小甜甜&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  <span class="built_in">console</span>.log(person.name) <span class="comment">//小甜甜</span></span><br><span class="line"> <span class="comment">// 此时无法修改,因为name属性是只读的</span></span><br><span class="line">  person.name = <span class="string">&#x27;大甜甜&#x27;</span> <span class="comment">//报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 定义一个类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用readonly进行修饰后,那么该name参数可以叫参数属性</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用readonly进行修饰后,那么Person中就有了一个name的属性成员</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用readonly进行修饰后,外部也是无法修改类中的name属性成员值的</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">readonly name: string = <span class="string">&#x27;大甜甜&#x27;</span></span>)</span> &#123; <span class="comment">//public private protected</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用public进行修饰后,那么Person类中就有了一个公共的name属性成员了</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用private进行修饰后,那么Person类中就有了一个私有的name属性成员了</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用protected进行修饰后,那么Person类中就有了一个受保护的name属性成员了(只能在本类和派生类中访问及使用)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;小甜甜&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  person.name = <span class="string">&#x27;佐助&#x27;</span> <span class="comment">//报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>存储器</p></blockquote><p>存取器:让我们可以有效的控制对 对象中的成员的访问,通过getters和setters来进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部可以传入姓氏和名字数据,同时使用set和get控制姓名的数据,外部也可以进行修改操作</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="attr">firstName</span>: string <span class="comment">// 姓氏</span></span><br><span class="line">    <span class="attr">lastName</span>: string <span class="comment">// 名字</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">firstName: string, lastName: string</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.firstName = firstName</span><br><span class="line">      <span class="built_in">this</span>.lastName = lastName</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 姓名的成员属性(外部可以访问,也可以修改)</span></span><br><span class="line">    <span class="comment">// 读取器----负责读取数据的</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;get中...&#x27;</span>)</span><br><span class="line">      <span class="comment">// 姓名====&gt;姓氏和名字的拼接</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置器----负责设置数据的(修改)</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;set中...&#x27;</span>)</span><br><span class="line">      <span class="comment">// 姓名----&gt;把姓氏和名字获取到重新的赋值给firstName和lastName</span></span><br><span class="line">      <span class="keyword">let</span> names = val.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;东方&#x27;</span>, <span class="string">&#x27;不败&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  <span class="comment">// 获取该属性成员属性</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.fullName)</span><br><span class="line">  <span class="comment">// 设置该属性的数据</span></span><br><span class="line">  person.fullName = <span class="string">&#x27;诸葛_孔明&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.fullName)</span><br></pre></td></tr></table></figure><blockquote><p>静态成员</p></blockquote><p>静态成员:在类中通过static修饰的属性或者方法,那么就是静态的属性及静态的方法,也称之为:静态成员<br>静态成员在使用的时候是通过类名.的这种语法来调用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类中默认有一个内置的name属性,所以呢,此时会出现错误的提示信息</span></span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name1: string = <span class="string">&#x27;小甜甜&#x27;</span></span><br><span class="line">    <span class="comment">// 构造函数是不能通过static来进行修饰的</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 此时this是实例对象,name1是静态属性,不能通过实例对象直接调用静态属性来使用</span></span><br><span class="line">      <span class="comment">// this.name1 = name</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;萨瓦迪卡&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="comment">// const person: Person = new Person()</span></span><br><span class="line">  <span class="comment">// 通过实例对象调用的属性(实例属性)</span></span><br><span class="line">  <span class="comment">// console.log(person.name1)</span></span><br><span class="line">  <span class="comment">// 通过实例对象调用的方法(实例方法)</span></span><br><span class="line">  <span class="comment">// person.sayHi()</span></span><br><span class="line">  <span class="comment">// 通过类名.静态属性的方式来访问该成员数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(Person.name1) <span class="comment">// &quot;小甜甜&quot;</span></span><br><span class="line">  <span class="comment">// 通过类名.静态属性的方式来设置该成员数据</span></span><br><span class="line">  Person.name1 = <span class="string">&#x27;佐助&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(Person.name1) <span class="comment">//&quot;佐助&quot;</span></span><br><span class="line">  <span class="comment">// 通过类名.静态方法的方式来调用内部的静态的方法</span></span><br><span class="line">  Person.sayHi() <span class="comment">// &quot;萨瓦迪卡&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>抽象类</p></blockquote><p>抽象类:包含抽象方法(抽象方法一般没有任何的具体内容的实现),也可以包含实例方法,抽象类是不能被实例化,为了让子类进行实例化及实现内部的抽象方法<br>抽象类的目的或者是作用最终都是为子类服务的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 定义一个抽象类</span></span><br><span class="line">  abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 抽象属性</span></span><br><span class="line">    <span class="comment">// abstract name:string</span></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    abstract eat()</span><br><span class="line">    <span class="comment">// 报错的,抽象方法不能有具体的实现</span></span><br><span class="line">    <span class="comment">// abstract eat()&#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;趴着吃,跳着吃&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;您好啊&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类(派生类)Dog</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// name:string=&#x27;小黄&#x27;</span></span><br><span class="line">    <span class="comment">// 重新的实现抽象类中的方法,此时这个方法就是当前Dog类的实例方法了</span></span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;舔着吃,真好吃&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化Dog的对象</span></span><br><span class="line">  <span class="keyword">const</span> dog:Dog = <span class="keyword">new</span> Dog()</span><br><span class="line">  dog.eat()</span><br><span class="line">  <span class="comment">// 调用的是抽象类中的实例方法</span></span><br><span class="line">  dog.sayHi()</span><br><span class="line">  <span class="comment">// console.log(dog.name)</span></span><br><span class="line">  <span class="comment">// 不能实例化抽象类的对象</span></span><br><span class="line">  <span class="comment">// const ani:Animal = new Animal()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数:封装了一些重复使用的代码,在需要的时候直接调用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// js中的书写方式-----&gt;在ts中同样的可以这么写</span></span><br><span class="line">  <span class="comment">// 函数声明,命名函数</span></span><br><span class="line">  <span class="comment">// function add(x, y) &#123; // 求和的函数</span></span><br><span class="line">  <span class="comment">//   return x + y</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 函数表达式,匿名函数</span></span><br><span class="line">  <span class="comment">// const add2 = function (x, y) &#123;</span></span><br><span class="line">  <span class="comment">//   return x + y</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// ts中的书写方式</span></span><br><span class="line">  <span class="comment">// 函数声明,命名函数</span></span><br><span class="line">  <span class="comment">// 函数中的x和y参数的类型都是string类型的,小括号后面的:string,代表的是该函数的返回值也是string类型的</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: string, y: string</span>): <span class="title">string</span> </span>&#123; <span class="comment">// 求和的函数</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result1: string = add(<span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(result1)</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="comment">// 函数表达式,匿名函数</span></span><br><span class="line">  <span class="comment">// 函数中的x和y参数的类型都是number类型的,小括号后面的:number,代表的是该函数的返回值也是number类型的</span></span><br><span class="line">  <span class="keyword">const</span> add2 = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(add2(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">  <span class="comment">// 函数的完整的写法</span></span><br><span class="line">  <span class="comment">// add3----&gt;变量名---&gt;函数add3</span></span><br><span class="line">  <span class="comment">// (x: number, y: number) =&gt; number 当前的这个函数的类型</span></span><br><span class="line">  <span class="comment">// function (x: number, y: number): number &#123; return x+y &#125;  就相当于符合上面的这个函数类型的值</span></span><br><span class="line">  <span class="keyword">const</span> add3: <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> number = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(add3(<span class="number">10</span>,<span class="number">100</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><p>可选参数:函数在声明的时候,内部的参数使用了?进行修饰,那么就表示该参数可以传入也可以不用传入,叫可选参数<br>默认参数:函数在声明的时候,内部的参数有自己的默认值,此时的这个参数就可以叫默认参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数:传入姓氏和名字,可以得到姓名(姓氏+名字=姓名)</span></span><br><span class="line">  <span class="comment">// 需求:如果不传入任何内容,那么就返回默认的姓氏</span></span><br><span class="line">  <span class="comment">// 需求:如果只传入姓氏,那么就返回姓氏</span></span><br><span class="line">  <span class="comment">// 需求:如果传入姓氏和名字,那么返回来的就是姓名</span></span><br><span class="line">  <span class="keyword">const</span> getFullName = <span class="function"><span class="keyword">function</span> (<span class="params">firstName: string=<span class="string">&#x27;东方&#x27;</span>, lastName?: string</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断名字是否传入了</span></span><br><span class="line">    <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">      <span class="keyword">return</span> firstName + <span class="string">&#x27;_&#x27;</span> + lastName</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> firstName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 函数调用</span></span><br><span class="line">  <span class="comment">// 什么也不传入</span></span><br><span class="line">  <span class="built_in">console</span>.log(getFullName())  <span class="comment">//&quot;东方&quot;</span></span><br><span class="line">  <span class="comment">// 只传入姓氏</span></span><br><span class="line">  <span class="built_in">console</span>.log(getFullName(<span class="string">&#x27;诸葛&#x27;</span>)) <span class="comment">//&quot;诸葛&quot;</span></span><br><span class="line">  <span class="comment">// 传入姓氏和名字</span></span><br><span class="line">  <span class="built_in">console</span>.log(getFullName(<span class="string">&#x27;诸葛&#x27;</span>,<span class="string">&#x27;孔明&#x27;</span>)) <span class="comment">// &quot;诸葛_孔明&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剩余参数(rest参数)</span></span><br><span class="line"><span class="comment">// 剩余参数是放在函数声明的时候所有的参数的最后</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...args:string[] ----&gt;剩余的参数,放在了一个字符串的数组中,args里面</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">str: string,str2:string, ...args: string[]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str) <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// console.log(str2) // b</span></span><br><span class="line">    <span class="built_in">console</span>.log(args) <span class="comment">// b ,c ,d ,e</span></span><br><span class="line">  &#125;</span><br><span class="line">  showMsg(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>函数重载</p></blockquote><p> 函数重载:函数名字相同,函数的参数及个数不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 定义一个函数</span></span><br><span class="line">  <span class="comment">// 需求: 我们有一个add函数，它可以接收2个string类型的参数进行拼接，也可以接收2个number类型的参数进行相加</span></span><br><span class="line">  <span class="comment">// 函数重载声明</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: string, y: string</span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span></span></span></span><br><span class="line"><span class="function"><span class="function">  // 函数声明</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: string | number, y: string | number</span>): <span class="title">string</span> | <span class="title">number</span> | <span class="title">undefined</span> </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">    <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;string&#x27;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">      <span class="title">return</span> <span class="title">x</span> + <span class="title">y</span> // 字符串拼接</span></span><br><span class="line"><span class="function">    &#125; <span class="title">else</span> <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;number&#x27;</span></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x + y <span class="comment">// 数字相加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 函数调用</span></span><br><span class="line">  <span class="comment">// 两个参数都是字符串</span></span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="string">&#x27;诸葛&#x27;</span>, <span class="string">&#x27;孔明&#x27;</span>))</span><br><span class="line">  <span class="comment">// 两个参数都是数字</span></span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">  <span class="comment">// 此时如果传入的是非法的数据，ts应该给我提示出错误的信息内容,报红色错误的信息</span></span><br><span class="line">  <span class="comment">// console.log(add(&#x27;真香&#x27;, 10))</span></span><br><span class="line">  <span class="comment">// console.log(add(100, &#x27;真好&#x27;))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>在定义函数、接口、类的时候不能预先确定要使用的数据的类型,而是在使用函数、接口、类的时候才能确定数据的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 需求:定义一个函数,传入两个参数,第一参数是数据,第二个参数是数量</span></span><br><span class="line">  <span class="comment">// 函数的作用:根据数量产生对应个数的数据,存放在一个数组中</span></span><br><span class="line">  <span class="comment">// 定义一个函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr1</span>(<span class="params">value: number, count: number</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="keyword">const</span> arr: number[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getArr1(<span class="number">100.123</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1) <span class="comment">// [100.123, 100.123, 100.123] </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 定义一个函数,同上,只不过传入的是字符串类型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr2</span>(<span class="params">value: string, count: number</span>): <span class="title">string</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="keyword">const</span> arr: string[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr2 = getArr2(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr2) <span class="comment">//[&quot;abc&quot;, &quot;abc&quot;, &quot;abc&quot;] </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 需求:可以传入任意类型的数据,返回来的是存储这个任意类型数据的数组</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr3</span>(<span class="params">value: any, count: number</span>): <span class="title">any</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="keyword">const</span> arr: any[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getArr3(<span class="number">100.123</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">const</span> arr2 = getArr3(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1) <span class="comment">//[100.123, 100.123, 100.123] </span></span><br><span class="line">  <span class="built_in">console</span>.log(arr2) <span class="comment">//[&quot;abc&quot;, &quot;abc&quot;, &quot;abc&quot;]</span></span><br><span class="line">  <span class="comment">// arr1中存储的是数字类型的数据</span></span><br><span class="line">  <span class="comment">// arr2中存储的是字符串类型的数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">0</span>].toFixed(<span class="number">2</span>)) <span class="comment">// 没有任何的智能提示的信息(要么有方法名字的提示信息,要么有错误的提示信息)</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr2[<span class="number">0</span>].split(<span class="string">&#x27;&#x27;</span>)) <span class="comment">// 没有任何的智能提示的信息(要么有方法名字的提示信息,要么有错误的提示信息)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr4</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, count: number</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="comment">// const arr: T[] = []</span></span><br><span class="line">    <span class="keyword">const</span> arr: <span class="built_in">Array</span>&lt;T&gt; = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getArr4&lt;number&gt;(<span class="number">200.12345</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="keyword">const</span> arr2 = getArr4&lt;string&gt;(<span class="string">&#x27;abcdefg&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1)</span><br><span class="line">  <span class="built_in">console</span>.log(arr2)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">0</span>].toFixed(<span class="number">3</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(arr2[<span class="number">0</span>].split(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">  <span class="comment">// // arr1中存储的是数字类型的数据</span></span><br><span class="line">  <span class="comment">// // arr2中存储的是字符串类型的数据</span></span><br><span class="line">  <span class="comment">// console.log(arr1[0].toFixed(2)) // 没有任何的智能提示的信息(要么有方法名字的提示信息,要么有错误的提示信息)</span></span><br><span class="line">  <span class="comment">// console.log(arr2[0].split(&#x27;&#x27;)) // 没有</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>多个参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 多个泛型参数的函数:函数中有多个泛型的参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;(<span class="params">value1: K, value2: V</span>): [<span class="title">K</span>, <span class="title">V</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [value1, value2]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getMsg&lt;string,number&gt;(<span class="string">&#x27;jack&#x27;</span>,<span class="number">100.2345</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">0</span>].split(<span class="string">&#x27;&#x27;</span>)) <span class="comment">// [&quot;j&quot;, &quot;a&quot;, &quot;c&quot;, &quot;k&quot;] </span></span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">1</span>].toFixed(<span class="number">1</span>)) <span class="comment">//&quot;100.2&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型接口</p></blockquote><p>在定义接口时, 为接口中的属性或方法定义泛型类型,在使用接口时, 再指定具体的泛型类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 需求:定义一个类,用来存储用户的相关信息(id,名字,年龄)</span></span><br><span class="line">  <span class="comment">// 通过一个类的实例对象调用add方法可以添加多个用户信息对象,调用getUserId方法可以根据id获取某个指定的用户信息对象</span></span><br><span class="line">  <span class="comment">// 定义一个泛型接口</span></span><br><span class="line">  interface IBaseCRUD&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line">    add: <span class="function">(<span class="params">t: T</span>) =&gt;</span> T</span><br><span class="line">    <span class="attr">getUserId</span>: <span class="function">(<span class="params">id: number</span>) =&gt;</span> T | <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个用户信息的类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    id?: number <span class="comment">// 用户的id  ? 代表该属性可有可无</span></span><br><span class="line">    <span class="attr">name</span>: string <span class="comment">// 用户的姓名</span></span><br><span class="line">    <span class="attr">age</span>: number <span class="comment">// 用户的年龄</span></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string, age: number</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">      <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,可以针对用户的信息对象进行增加及查询的操作</span></span><br><span class="line">  <span class="comment">// CRUD----&gt;create,Read,Update,Delete</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">UserCRUD</span> <span class="title">implements</span> <span class="title">IBaseCRUD</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 用来保存多个User类型的用户信息对象</span></span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">Array</span>&lt;User&gt; = []</span><br><span class="line">    <span class="comment">//方法用来存储用户信息对象的</span></span><br><span class="line">    add(user: User): User &#123;</span><br><span class="line">      <span class="comment">// 产生id</span></span><br><span class="line">      user.id = <span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random()</span><br><span class="line">      <span class="comment">// 把用户信息对象添加到data数组中</span></span><br><span class="line">      <span class="built_in">this</span>.data.push(user)</span><br><span class="line">      <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法根据id查询指定的用户信息对象</span></span><br><span class="line">    getUserId(id:number = <span class="number">0</span>): User | <span class="literal">undefined</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.data.find(<span class="function"><span class="params">user</span> =&gt;</span> user.id === id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化添加用户信息对象的类UserCRUD</span></span><br><span class="line">  <span class="keyword">const</span> userCRUD: UserCRUD = <span class="keyword">new</span> UserCRUD()</span><br><span class="line">  <span class="comment">// 调用添加数据的方法</span></span><br><span class="line">  userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;jack&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">  userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;tom&#x27;</span>, <span class="number">25</span>))</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">23</span>))</span><br><span class="line">  userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;rousi&#x27;</span>, <span class="number">21</span>))</span><br><span class="line"><span class="comment">//   [User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;jack&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 20,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.5513</span></span><br><span class="line"><span class="comment">// &#125;, User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;tom&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 25,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.9338</span></span><br><span class="line"><span class="comment">// &#125;, User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;lucy&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 23,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.7893</span></span><br><span class="line"><span class="comment">// &#125;, User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;rousi&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 21,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.6506</span></span><br><span class="line"><span class="comment">// &#125;] </span></span><br><span class="line">  <span class="built_in">console</span>.log(userCRUD.data)</span><br><span class="line">  <span class="comment">// 根据id查询用户信息对象数据</span></span><br><span class="line">  <span class="keyword">const</span> user = userCRUD.getUserId(id)</span><br><span class="line">  <span class="built_in">console</span>.log(user)</span><br><span class="line"><span class="comment">//   User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;lucy&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 23,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.7893</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型类</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类,类中的属性值的类型是不确定,方法中的参数及返回值的类型也是不确定</span></span><br><span class="line"><span class="comment">// 定义一个泛型类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 默认的属性的值的类型是泛型类型</span></span><br><span class="line">    <span class="attr">defaultValue</span>: T| <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">add</span>: (<span class="function">(<span class="params">x: T,y: T</span>) =&gt;</span> T)| <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在实例化类的对象的时候,再确定泛型的类型</span></span><br><span class="line">  <span class="keyword">const</span> g1: GenericNumber&lt;number&gt; = <span class="keyword">new</span> GenericNumber&lt;number&gt;()</span><br><span class="line">  <span class="comment">// 设置属性值</span></span><br><span class="line">  g1.defaultValue = <span class="number">100</span></span><br><span class="line">  <span class="comment">// 相加的方法</span></span><br><span class="line">  g1.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(g1.add(g1.defaultValue,<span class="number">20</span>)) <span class="comment">//120 </span></span><br><span class="line">  <span class="comment">// 在实例化类的对象的时候,再确定泛型的类型</span></span><br><span class="line">  <span class="keyword">const</span> g2: GenericNumber&lt;string&gt; = <span class="keyword">new</span> GenericNumber&lt;string&gt;()</span><br><span class="line">  <span class="comment">// 设置属性值</span></span><br><span class="line">  g2.defaultValue = <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line">  <span class="comment">// 相加的方法</span></span><br><span class="line">  g2.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(g2.add(<span class="string">&#x27;帅杨&#x27;</span>,g2.defaultValue))  <span class="comment">//&quot;帅杨哈哈&quot; </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型约束</p></blockquote><p>如果我们直接对一个泛型参数取 length 属性, 会报错, 因为这个泛型根本就不知道它有这个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个接口,用来约束将来的某个类型中必须要有length这个属性</span></span><br><span class="line">  interface ILength&#123;</span><br><span class="line">    <span class="comment">// 接口中有一个属性length</span></span><br><span class="line">    <span class="attr">length</span>:number</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ILength</span>&gt;(<span class="params">x: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(getLength&lt;string&gt;(<span class="string">&#x27;what are you no sha lei&#x27;</span>))</span><br><span class="line">  <span class="comment">// console.log(getLength&lt;number&gt;(123))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">TypeScript学习</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>文章标题教程</title>
    <link href="https://wecy-chen.github.io/2022/03/19/article/"/>
    <id>https://wecy-chen.github.io/2022/03/19/article/</id>
    <published>2022-03-19T01:56:17.922Z</published>
    <updated>2021-11-16T23:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:【必需】页面标题</span><br><span class="line">date:【必需】页面创建日期</span><br><span class="line">type: 【必需】标籤、分类和友情链接三个页面需要配置</span><br><span class="line">updated:【可选】页面更新日期</span><br><span class="line">description:【可选】页面描述</span><br><span class="line">keywords: 【可选】页面关键字</span><br><span class="line">comments: 【可选】显示页面评论模块 (默认 true)</span><br><span class="line">top_img: 【可选】页面顶部图片</span><br><span class="line">mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</span><br><span class="line">katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</span><br><span class="line">aside: 【可选】显示侧边栏 (默认 true)</span><br><span class="line">aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</span><br><span class="line">highlight_shrink: 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</span><br><span class="line">cover: 文章顶部图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">页面描述</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wecy-chen.github.io/2022/03/19/hello-world/"/>
    <id>https://wecy-chen.github.io/2022/03/19/hello-world/</id>
    <published>2022-03-19T01:54:42.201Z</published>
    <updated>2022-03-19T01:56:17.923Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>欢迎来到<a href="https://hexo.io/">Hexo</a>! 这是你的第一篇文章。检查<a href="https://hexo.io/docs/">文件</a>更多信息。如果您在使用Hexo时遇到任何问题，可以在[故障排除]中找到答案(<a href="https://hexo.io/docs/troubleshooting.html)%E6%88%96%E8%80%85%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8[GitHub]%E4%B8%8A%E9%97%AE%E6%88%91(https://github.com/hexojs/hexo/issues)">https://hexo.io/docs/troubleshooting.html)或者你可以在[GitHub]上问我(https://github.com/hexojs/hexo/issues)</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对接支付宝支付接口</title>
    <link href="https://wecy-chen.github.io/2021/12/08/zhifubao/"/>
    <id>https://wecy-chen.github.io/2021/12/08/zhifubao/</id>
    <published>2021-12-08T01:26:42.000Z</published>
    <updated>2022-06-17T06:35:54.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-申请开发"><a href="#一-申请开发" class="headerlink" title="*一. 申请开发??"></a>*<em>一. 申请开发?</em>?</h2><p>访问开发者中心<a href="https://links.jianshu.com/go?to=https://openhome.alipay.com/platform/appDaily.htm?tab=info">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>进行认证后(真实姓名,绑定手机号和邮箱), 即可进入沙箱配置页</p><p><img src="/image/zhifubao/a43f57e84f55a6f0a29727736934b9a6.png" alt="a43f57e84f55a6f0a29727736934b9a6.png"></p><h2 id="二-配置密钥"><a href="#二-配置密钥" class="headerlink" title="二. 配置密钥"></a><strong>二. 配置密钥</strong></h2><h3 id="1-下载密钥生成工具"><a href="#1-下载密钥生成工具" class="headerlink" title="1. 下载密钥生成工具"></a><strong>1. 下载密钥生成工具</strong></h3><p>访问 <a href="https://links.jianshu.com/go?to=https://docs.open.alipay.com/291/105971">https://docs.open.alipay.com/291/105971</a></p><p><img src="/image/zhifubao/1f8481f58db077b46c576d3f9e2f332c.png" alt="1f8481f58db077b46c576d3f9e2f332c.png"></p><p>下载AlipayDevelopmentAssistant-1.0.7.exe (支付宝开发平台开发助手)密钥工具 大约100多M 正常安装</p><h3 id="2-使用工具生成公钥私钥"><a href="#2-使用工具生成公钥私钥" class="headerlink" title="2.使用工具生成公钥私钥"></a><strong>2.使用工具生成公钥私钥</strong></h3><p><strong><img src="/image/zhifubao/c6f845df84f5cbcac6dce6cb485cb38b.png" alt="c6f845df84f5cbcac6dce6cb485cb38b.png"></strong></p><h3 id="3-设置公钥"><a href="#3-设置公钥" class="headerlink" title="3.设置公钥"></a><strong>3.设置公钥</strong></h3><p>加签方式选择<strong>公钥</strong></p><p><strong><img src="/image/zhifubao/51e1ae5878ebc514b824d38f660fa219.png" alt="51e1ae5878ebc514b824d38f660fa219.png"></strong></p><p>保存公钥,退款需要用到</p><h2 id="三-NodeJS请求支付接口-koa"><a href="#三-NodeJS请求支付接口-koa" class="headerlink" title="三. NodeJS请求支付接口(koa)"></a><strong>三. NodeJS请求支付接口(koa)</strong></h2><p>1.保存私钥</p><p>新建app_private_key.pem文件</p><p><img src="/image/zhifubao/84b01a06d3bab3d55e11b7776901ce77.png" alt="84b01a06d3bab3d55e11b7776901ce77.png"></p><p>2.实现代码</p><p>支付参数</p><p><a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay">https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; nginx &#125; = MAPP.proConfig</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; app_private_key &#125; = MAPP.keys<span class="comment">// 支付宝私钥</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">get</span>: &#123;</span><br><span class="line">    <span class="comment">// 创建支付宝支付连接</span></span><br><span class="line">    <span class="string">&#x27;/test/alipay&#x27;</span>: [</span><br><span class="line">      <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">        <span class="comment">// 支付参数</span></span><br><span class="line">        <span class="comment">// 注意:本地测试回调需要配置ngrok</span></span><br><span class="line">        <span class="keyword">const</span> paramsMap = &#123;</span><br><span class="line">          <span class="attr">app_id</span>: <span class="string">&#x27;2021xxxxxxxx&#x27;</span>, <span class="comment">// 应用id</span></span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;alipay.trade.page.pay&#x27;</span>, <span class="comment">// 调起类型(app,page,wap)(包括app,h5,PC页面支付)</span></span><br><span class="line">          <span class="attr">format</span>: <span class="string">&#x27;JSON&#x27;</span>,</span><br><span class="line">          <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">          <span class="attr">sign_type</span>: <span class="string">&#x27;RSA2&#x27;</span>,</span><br><span class="line">          <span class="attr">timestamp</span>: moment().format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),</span><br><span class="line">          <span class="attr">version</span>: <span class="string">&#x27;1.0&#x27;</span>,</span><br><span class="line">          <span class="attr">notify_url</span>: <span class="string">`https://<span class="subst">$&#123;nginx.server_name&#125;</span>/api-universal/test/aliay/callback`</span>, <span class="comment">// 接口回调(配置ngrok映射https地址)</span></span><br><span class="line">          <span class="comment">// return_url: &#x27;https://b2c-app-dev.fenxiangqu.cn/pages/my/index&#x27;,// 前台跳转页面</span></span><br><span class="line">          <span class="attr">biz_content</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            <span class="attr">product_code</span>: <span class="string">&#x27;FAST_INSTANT_TRADE_PAY&#x27;</span>, <span class="comment">// 商品码</span></span><br><span class="line">            <span class="attr">body</span>: <span class="string">&#x27;订单回调内容&#x27;</span>, <span class="comment">// 订单附加信息。</span></span><br><span class="line">            <span class="attr">subject</span>: <span class="string">&#x27;测试支付宝PC支付&#x27;</span>, <span class="comment">// 交易标题</span></span><br><span class="line">            <span class="attr">out_trade_no</span>: <span class="string">&#x27;xxxxxxxxx&#x27;</span>, <span class="comment">// 订单编号</span></span><br><span class="line">            <span class="attr">total_amount</span>: <span class="number">0.01</span> <span class="comment">// 支付金额</span></span><br><span class="line">          &#125;) <span class="comment">// 订单支付参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拼接参数</span></span><br><span class="line">        <span class="keyword">let</span> objParams = <span class="built_in">Object</span>.keys(paramsMap)</span><br><span class="line">          .sort()</span><br><span class="line">          .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">&#x27;=&#x27;</span> + paramsMap[key]</span><br><span class="line">          &#125;)</span><br><span class="line">          .join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> encodeParams = <span class="built_in">Object</span>.keys(paramsMap)</span><br><span class="line">          .sort()</span><br><span class="line">          .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(paramsMap[key])</span><br><span class="line">          &#125;)</span><br><span class="line">          .join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        <span class="comment">// RSA2加密签名</span></span><br><span class="line">        <span class="keyword">let</span> sign</span><br><span class="line">        <span class="keyword">let</span> signInit = crypto.createSign(<span class="string">&#x27;RSA-SHA256&#x27;</span>)</span><br><span class="line">        signInit.update(objParams, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="comment">// 支付宝私钥签名</span></span><br><span class="line">        <span class="comment">// console.log(app_private_key)</span></span><br><span class="line">        sign = signInit.sign(app_private_key, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> params = encodeParams + <span class="string">&#x27;&amp;sign=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(sign)</span><br><span class="line">        <span class="comment">// https://openapi.alipaydev.com/gateway.do 沙漏环境</span></span><br><span class="line">        <span class="comment">// https://openapi.alipay.com/gateway.do 正式环境</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`https://openapi.alipaydev.com/gateway.do?<span class="subst">$&#123;params&#125;</span>`</span></span><br><span class="line">        ctx.info(&#123; <span class="attr">message</span>: <span class="string">&#x27;创建支付参数成功&#x27;</span>, <span class="attr">data</span>: &#123; url &#125; &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">userAuth</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">post</span>: &#123;</span><br><span class="line">    <span class="comment">// 支付宝回调</span></span><br><span class="line">    <span class="string">&#x27;/test/alipay/callback&#x27;</span>: [<span class="keyword">async</span> ctx =&gt; &#123; &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">userAuth</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.支付信息链接</p><p><img src="/image/zhifubao/409fe8b92de6a90b63cef300de9b23c3.png" alt="409fe8b92de6a90b63cef300de9b23c3.png"></p><p>4.支付界面</p><p> 前台支付界面 <a href="https://opendocs.alipay.com/open/270/01arn8">https://opendocs.alipay.com/open/270/01arn8</a></p><p><img src="/image/zhifubao/0d1453f969811cbc5c3e46dcd98e642d.png" alt="0d1453f969811cbc5c3e46dcd98e642d.png"></p><p>5.生成二维码</p><p><a href="https://opendocs.alipay.com/open/02ekfg?scene=19">api说明</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 创建当面二维码支付</span></span><br><span class="line">  <span class="string">&#x27;/test/alipay/qr&#x27;</span>: [</span><br><span class="line">    <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> paramsMap = &#123;</span><br><span class="line">        <span class="attr">app_id</span>: <span class="string">&#x27;xxxxxx信&#x27;</span>, <span class="comment">// 应用id</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;alipay.trade.precreate&#x27;</span>, <span class="comment">//请求方式名称</span></span><br><span class="line">        <span class="comment">// method: &#x27;alipay.trade.create&#x27;,</span></span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;JSON&#x27;</span>,</span><br><span class="line">        <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        <span class="attr">sign_type</span>: <span class="string">&#x27;RSA2&#x27;</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: moment().format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&#x27;1.0&#x27;</span>,</span><br><span class="line">        <span class="attr">notify_url</span>: <span class="string">`https://<span class="subst">$&#123;nginx.server_name&#125;</span>/api-universal/test/aliay/callback`</span>, <span class="comment">// 接口回调(配置ngrok映射https地址)</span></span><br><span class="line">        <span class="comment">// app_cert_sn: app_private_key, // 秘钥</span></span><br><span class="line">        <span class="comment">// alipay_root_cert_sn: app_public_key, // 公钥</span></span><br><span class="line">        <span class="attr">biz_content</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          <span class="attr">subject</span>: <span class="string">&#x27;支付宝二维码支付&#x27;</span>, <span class="comment">// 交易标题</span></span><br><span class="line">          <span class="attr">out_trade_no</span>: <span class="string">&#x27;1624678209672759&#x27;</span>, <span class="comment">// 订单编号</span></span><br><span class="line">          <span class="attr">total_amount</span>: <span class="number">0.01</span> <span class="comment">// 支付金额</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 拼接参数</span></span><br><span class="line">      <span class="keyword">let</span> objParams = <span class="built_in">Object</span>.keys(paramsMap)</span><br><span class="line">        .sort()</span><br><span class="line">        .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> key + <span class="string">&#x27;=&#x27;</span> + paramsMap[key]</span><br><span class="line">        &#125;)</span><br><span class="line">        .join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">      <span class="comment">// RSA2加密签名</span></span><br><span class="line">      <span class="keyword">let</span> sign</span><br><span class="line">      <span class="keyword">let</span> signInit = crypto.createSign(<span class="string">&#x27;RSA-SHA256&#x27;</span>)</span><br><span class="line">      signInit.update(objParams, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">      <span class="comment">// 支付宝私钥签名</span></span><br><span class="line">      <span class="comment">// console.log(app_private_key)</span></span><br><span class="line">      sign = signInit.sign(app_private_key, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> gateway = <span class="string">&#x27;https://openapi.alipaydev.com&#x27;</span></span><br><span class="line">      <span class="comment">// const url = `$&#123;gateway&#125;/gateway.do?$&#123;params&#125;`</span></span><br><span class="line">      paramsMap.sign = sign</span><br><span class="line">      <span class="comment">// 对接支付宝接口,生成地址</span></span><br><span class="line">      <span class="keyword">const</span> server = MAPP.creatServer(gateway)</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> server.get(<span class="string">&#x27;/gateway.do&#x27;</span>, &#123; <span class="attr">params</span>: paramsMap &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(response.data) <span class="comment">//返回信息</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   alipay_trade_precreate_response: &#123;</span></span><br><span class="line">      <span class="comment">//     code: &#x27;10000&#x27;,</span></span><br><span class="line">      <span class="comment">//     msg: &#x27;Success&#x27;,</span></span><br><span class="line">      <span class="comment">//     out_trade_no: &#x27;xxxxxx&#x27;,</span></span><br><span class="line">      <span class="comment">//     qr_code: &#x27;https://qr.alipay.com/bax05172lthykirrqxus00f5&#x27; // 地址要用工具生成二维码扫描</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">//   sign: &#x27;&#x27;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">userAuth</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意:</p><h1 id="显示-码已失效，请刷新二维码后重试"><a href="#显示-码已失效，请刷新二维码后重试" class="headerlink" title="显示:码已失效，请刷新二维码后重试"></a><strong>显示:码已失效，请刷新二维码后重试</strong></h1><p>解决办法: 就是使用沙箱版本的支付宝APP扫描或者使用沙箱版本的支付宝账号密码登录付款即可。</p><p>打开开放平台, 沙箱工具中下载沙漏版钱包</p><p><a href="https://open.alipay.com/platform/appDaily.htm?tab=tool">https://open.alipay.com/platform/appDaily.htm?tab=tool</a></p>]]></content>
    
    
    <summary type="html">支付宝接口开发</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="https://wecy-chen.github.io/2021/11/17/hexo/"/>
    <id>https://wecy-chen.github.io/2021/11/17/hexo/</id>
    <published>2021-11-17T07:03:57.000Z</published>
    <updated>2022-03-19T01:56:17.923Z</updated>
    
    <content type="html"><![CDATA[<p>hexo教程</p><p>官网 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p><strong>1. 安装node</strong><br><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>$ node -v<br>v14.17.0</p><p>$ npm -v<br>6.14.13</p><p><strong>2. 全局安装脚手架</strong><br>npm install -g hexo-cli</p><p><strong>3. 安装依赖包</strong><br>npm install hexo</p><p><strong>4. 主题</strong><br>下载主题 到themes文件内<br>npm i hexo-theme-butterfly<br>或者<br>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/butterfly</p><p>修改_config.yml 布局配置主题文件<br>主题配置教程<br><a href="https://www.jianshu.com/p/50a565adaf15?ivk_sa=1024320u">https://www.jianshu.com/p/50a565adaf15?ivk_sa=1024320u</a></p><p>换主题,调整清除缓存<br>hexo clean</p><p>主题报错处理</p><p><a href="https://zhuanlan.zhihu.com/p/137946156">https://zhuanlan.zhihu.com/p/137946156</a></p><p><strong>5. 部署</strong><br>配置预览部署路径<br>npm install hexo-deployer-git –save<br>_config.yml<br>deploy:<br>  type: git<br>  repository: <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#x6d;</a>:wecy-chen/wecy-chen.github.io.git<br>  branch: master</p><blockquote><p>hexo d</p><ol><li>hexo g 编译文件</li><li>hexo server  创建本地服务器 <a href="http://localhost:4000/">http://localhost:4000/</a></li><li>hexo d 发布线上预览地址</li></ol></blockquote>]]></content>
    
    
    <summary type="html">这是一个hexo博客的</summary>
    
    
    
    
    <category term="教程" scheme="https://wecy-chen.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>印象笔记导出md文件</title>
    <link href="https://wecy-chen.github.io/2021/11/01/yinxiangbiji/"/>
    <id>https://wecy-chen.github.io/2021/11/01/yinxiangbiji/</id>
    <published>2021-11-01T01:26:42.000Z</published>
    <updated>2022-03-19T01:56:17.923Z</updated>
    
    <content type="html"><![CDATA[<!-- # 印象笔记导出md文件 --><p>印象笔记导出md文件</p><p>地址:<br><a href="https://github.com/wormi4ok/evernote2md">https://github.com/wormi4ok/evernote2md</a></p><p>插件地址 </p><p>印象笔记导出md文件方法</p><ul><li><strong>1.先导出格式</strong></li></ul><p>            enex格式</p><p><img src="/image/yinxiang/download.png" alt="downlaod.png"></p><ul><li><strong>2.使用导出工具(按平台使用环境)</strong></li></ul><p>github <a href="https://github.com/wormi4ok/evernote2md">https://github.com/wormi4ok/evernote2md</a></p><p>下载地址: <a href="https://github.com/wormi4ok/evernote2md/releases/tag/v0.17.1">https://github.com/wormi4ok/evernote2md/releases/tag/v0.17.1</a></p><p><img src="/image/yinxiang/save.png" alt="save.png"></p><ul><li><strong>3.windows环境下的使用方法</strong></li></ul><p>把evernote2md.exe拖拽到终端控制台,然后空格,拖拽要目标enex文件,转化成功导出md文件</p><p>命令: 自动导出目标文件</p><p>$ /d/Desktop/印象笔记导出/evernote2md.exe /d/Desktop/印象笔记导出/YinXiangBiJi.enex</p>]]></content>
    
    
    <summary type="html">印象笔记导出md文件</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>代码片段</title>
    <link href="https://wecy-chen.github.io/2018/07/31/core/"/>
    <id>https://wecy-chen.github.io/2018/07/31/core/</id>
    <published>2018-07-30T23:04:35.000Z</published>
    <updated>2022-03-19T01:56:17.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方法  </span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//在原型上加方法</span></span><br><span class="line"> <span class="keyword">var</span> res = [];</span><br><span class="line"> <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!json[<span class="built_in">this</span>[i]])&#123; <span class="comment">//是否存在</span></span><br><span class="line">   res.push(<span class="built_in">this</span>[i]);</span><br><span class="line">   json[<span class="built_in">this</span>[i]] = <span class="number">1</span>; <span class="comment">//保存了</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">112</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="string">&#x27;你好&#x27;</span>,<span class="number">112</span>,<span class="number">112</span>,<span class="number">34</span>,<span class="string">&#x27;你好&#x27;</span>,<span class="string">&#x27;str&#x27;</span>,<span class="string">&#x27;str1&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.unique())  <span class="comment">//[112, 34, &quot;你好&quot;, &quot;str&quot;, &quot;str1&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="comment">//判断是否第一个index,返回第一出现的值</span></span><br><span class="line"><span class="keyword">let</span> uniqueArr=arr.filter(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>arr.indexOf(item)==index)</span><br><span class="line"><span class="built_in">console</span>.log(uniqueArr) <span class="comment">//[112, 34, &quot;你好&quot;, &quot;str&quot;, &quot;str1&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.es6 Set方法</span></span><br><span class="line"><span class="keyword">let</span> a =[...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//[112, 34, &quot;你好&quot;, &quot;str&quot;, &quot;str1&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h1><p><a href="https://mp.weixin.qq.com/s/Vkshf-nEDwo2ODUJhxgzVA">JS的防抖与节流</a></p><p><strong>防抖</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeout !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        &#125;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(fn, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, debounce(handle, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><p><strong>节流</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节流</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">var</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">var</span> curTime = <span class="built_in">Date</span>.now();</span><br><span class="line">             <span class="keyword">var</span> remaining = delay - (curTime - startTime);</span><br><span class="line">             <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">             <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">             <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">              <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    func.apply(context, args);</span><br><span class="line">                    startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123; <span class="comment">// 超1s多出时间执行</span></span><br><span class="line">                    timer = <span class="built_in">setTimeout</span>(func, remaining);</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当第一次触发事件时马上执行事件处理函数，最后一次触发事件后也还会执行一次事件处理函数</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, throttle(handle, <span class="number">3000</span>));</span><br></pre></td></tr></table></figure><h1 id="多级数组变一级-扁平"><a href="#多级数组变一级-扁平" class="headerlink" title="多级数组变一级(扁平)"></a>多级数组变一级(扁平)</h1> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="number">55</span>,[<span class="number">111</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&#x27;bbb&#x27;</span>&#125;]]]</span><br><span class="line">    <span class="keyword">var</span> empty=[]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">      arr.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item===<span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> item===<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">          empty.push(item)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item))&#123;  </span><br><span class="line">        <span class="comment">//判断数组 1.typeof item ===&#x27;object&#x27; &amp;&amp;item instanceof Array</span></span><br><span class="line">        <span class="comment">// 2. Object.prototype.toString.call(item)===&#x27;[object Array]&#x27;</span></span><br><span class="line">          flat(item) </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          empty.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> empty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flat(arr)) <span class="comment">// [1, 2, 3, 4, &quot;a&quot;, 55, 111, &#123;&quot;name&quot;:&#x27;bbb&#x27;&#125;]</span></span><br></pre></td></tr></table></figure><h1 id="千分符"><a href="#千分符" class="headerlink" title="千分符"></a>千分符</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;3562123761&quot;</span>;<span class="comment">//[3,562,123,761]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iNum=str.length%<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> prev=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    <span class="keyword">var</span> iNow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> tmp=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(iNum !=<span class="number">0</span>)&#123; <span class="comment">//不是三的整除,先放在数组</span></span><br><span class="line">        prev =str.substring(<span class="number">0</span>,iNum);</span><br><span class="line">        arr.push(prev)</span><br><span class="line">    &#125;</span><br><span class="line">    str =str.substring(iNum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">        iNow++;</span><br><span class="line">        tmp+=str[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(iNow==<span class="number">3</span>&amp;&amp;tmp)&#123;</span><br><span class="line">            arr.push(tmp) <span class="comment">//三个数字一组</span></span><br><span class="line">            tmp=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            iNow=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(arr)</span></span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则</span></span><br><span class="line"><span class="comment">//(?=)前项声明</span></span><br><span class="line"><span class="comment">//(?!)反前向声明</span></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">var</span> str1=<span class="string">&#x27;abacad&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/a(?=b)/g</span></span><br><span class="line">str1=str1.replace(re,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">//*bacad</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re2=<span class="regexp">/a(?!b)/g</span></span><br><span class="line"><span class="keyword">var</span> str2=str1.replace(re2,<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//*b*c*d</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> re=<span class="regexp">/(?=(?!\b)(\d&#123;3&#125;)+$)/g</span>; <span class="comment">//边界不能替换</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(re,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test2(str));<span class="comment">//3,562,123,761</span></span><br></pre></td></tr></table></figure><h1 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;border-bottom-color&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=str.split(<span class="string">&quot;-&quot;</span>);<span class="comment">//[border,bottom,color]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        arr[i]=arr[i].charAt(<span class="number">0</span>).toUpperCase()+arr[i].substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test(str));<span class="comment">//borderBottomColor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.正则</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> re=<span class="regexp">/-(\w)/g</span>;</span><br><span class="line">    <span class="keyword">return</span> str.replace(re,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span></span>)</span>&#123; <span class="comment">//-b b</span></span><br><span class="line">        <span class="keyword">return</span> $<span class="number">1.</span>toUpperCase()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test2(str));<span class="comment">//borderBottomColor</span></span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p><a href="https://segmentfault.com/a/1190000015347051#articleHeader0">Javascript常见排序算法的笔记</a></p><p><strong>从小到大排序</strong></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">15</span>, <span class="number">55</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">let</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            time++</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>]</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">//21</span></span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr)) <span class="comment">//[0, 2, 8, 15, 55, 77, 99]</span></span><br></pre></td></tr></table></figure><h2 id="二分法排序"><a href="#二分法排序" class="headerlink" title="二分法排序"></a>二分法排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Arr = [<span class="number">85</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">96</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> left = [];</span><br><span class="line">    <span class="keyword">let</span> right = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(Arr));<span class="comment">//[17, 24, 31, 45, 50, 63, 85, 96]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="添加class"><a href="#添加class" class="headerlink" title="添加class"></a>添加class</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">el, className</span>) </span>&#123; <span class="comment">//加class</span></span><br><span class="line">   <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(^|\\s)&#x27;</span> + className + <span class="string">&#x27;(\\s|$)&#x27;</span>) <span class="comment">//&quot;className&quot; 或者 “   className     ”</span></span><br><span class="line">   <span class="keyword">if</span> (reg.test(el.className)) &#123; <span class="comment">//判断是否有class</span></span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//加上class名</span></span><br><span class="line">   <span class="keyword">let</span> newClass = el.className.split(<span class="string">&#x27; &#x27;</span>)  <span class="comment">//拆分</span></span><br><span class="line">   newClass.push(className) <span class="comment">//添加</span></span><br><span class="line">   el.className = newClass.join(<span class="string">&#x27; &#x27;</span>) <span class="comment">//字符串</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="设置data节点属性"><a href="#设置data节点属性" class="headerlink" title="设置data节点属性"></a>设置data节点属性</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">el, name, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = <span class="string">&#x27;data-&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (val) &#123;  </span><br><span class="line">    <span class="keyword">return</span> el.setAttribute(prefix + name, val)  <span class="comment">//设置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> el.getAttribute(prefix + name)  <span class="comment">//获取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浏览器css前缀的兼容"><a href="#浏览器css前缀的兼容" class="headerlink" title="浏览器css前缀的兼容"></a>浏览器css前缀的兼容</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置浏览器的兼容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prefixStyle</span>(<span class="params">style</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> elementStyle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>).style</span><br><span class="line">    <span class="comment">//供应商</span></span><br><span class="line">    <span class="keyword">let</span> vendor = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> transformNames = &#123;</span><br><span class="line">            <span class="attr">webkit</span>: <span class="string">&#x27;webkitTransform&#x27;</span>,</span><br><span class="line">            <span class="attr">Moz</span>: <span class="string">&#x27;MozTransform&#x27;</span>,</span><br><span class="line">            <span class="attr">O</span>: <span class="string">&#x27;OTransform&#x27;</span>,</span><br><span class="line">            <span class="attr">ms</span>: <span class="string">&#x27;msTransform&#x27;</span>,</span><br><span class="line">            <span class="attr">standard</span>: <span class="string">&#x27;transform&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> transformNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (elementStyle[transformNames[key]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> key <span class="comment">//返回前缀</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vendor === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (vendor === <span class="string">&#x27;standard&#x27;</span>) &#123; <span class="comment">//标准,没有前缀</span></span><br><span class="line">        <span class="keyword">return</span> style</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> vendor + style.charAt(<span class="number">0</span>).toUpperCase() + style.substr(<span class="number">1</span>) <span class="comment">//驼峰命名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">alert(prefixStyle(<span class="string">&#x27;transform&#x27;</span>))<span class="comment">// webkitTransform  (谷歌浏览器 webkit内核)</span></span><br></pre></td></tr></table></figure><h1 id="获取DOM大小和位置"><a href="#获取DOM大小和位置" class="headerlink" title="获取DOM大小和位置"></a>获取DOM大小和位置</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRect</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (el <span class="keyword">instanceof</span> <span class="built_in">window</span>.SVGElement) &#123;</span><br><span class="line">    <span class="keyword">let</span> rect = el.getBoundingClientRect()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">top</span>: rect.top,</span><br><span class="line">      <span class="attr">left</span>: rect.left,</span><br><span class="line">      <span class="attr">width</span>: rect.width,</span><br><span class="line">      <span class="attr">height</span>: rect.height</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">top</span>: el.offsetTop,</span><br><span class="line">      <span class="attr">left</span>: el.offsetLeft,</span><br><span class="line">      <span class="attr">width</span>: el.offsetWidth,</span><br><span class="line">      <span class="attr">height</span>: el.offsetHeight</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><p>  对象本身的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=name</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.alertName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建示例</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line">f.printName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)   <span class="comment">//小明</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">f.printName() </span><br><span class="line">f.alertName()</span><br><span class="line">f.toString() <span class="comment">//要去f.__proto__.__proto__中查找</span></span><br><span class="line"><span class="keyword">var</span> item </span><br><span class="line"><span class="keyword">for</span>(item <span class="keyword">in</span> f)&#123;</span><br><span class="line">  <span class="comment">//高级浏览器已经在 for in 中 屏蔽了来自原型的属性</span></span><br><span class="line">  <span class="comment">//但是这里还是建议大家还是加上这个判断,保证程序的健壮性</span></span><br><span class="line">  <span class="keyword">if</span>(f.hasOwnProperty(item))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)  <span class="comment">// name printName</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><img src="%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg" alt="原型链"></p><p> <strong>instanceof</strong><br>用于判断<code>引用类型</code>属于哪个<code>构造函数</code>的方法</p><ul><li>f instanceof 的判断逻辑是:</li></ul><ol><li>f的__proto__一层一层往上,能否找打对应到Foo.prototype</li><li>再试判断f instanceof Object</li></ol><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>变量 属于 数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[]</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> arr <span class="comment">//object, typeof 是无法判断是否是数组的</span></span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>DOM操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Elem</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.elem = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123; <span class="comment">//设置/获取innerHTML</span></span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">this</span>.elem</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        elem.innerHTML = val</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span> <span class="comment">//链式操作</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> elem.innerHTML</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Elem.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params">type,fn</span>) </span>&#123; <span class="comment">//绑定事件</span></span><br><span class="line">  <span class="keyword">var</span> elem=<span class="built_in">this</span>.elem</span><br><span class="line">  elem.addEventListener(type,fn)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> div1 = <span class="keyword">new</span> Elem(<span class="string">&#x27;div1&#x27;</span>) <span class="comment">//获取设置id类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(div1.html()) //innerHTML</span></span><br><span class="line">div1.html(<span class="string">&quot;&lt;p&gt;hello world&lt;/p&gt;&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="深层拷贝"><a href="#深层拷贝" class="headerlink" title="深层拷贝"></a>深层拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newObj=obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? []:&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    newObj[key]= <span class="keyword">typeof</span> obj[key]===<span class="string">&#x27;object&#x27;</span>? deepClone(obj[key]):obj[key]</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><p>  <code>Date.now()</code> //获取当前毫秒数1531824326654<br>    <code>new Date().getTime()</code>//获取毫秒数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">//中国标准时间</span></span><br><span class="line">  <span class="keyword">var</span> year=dt.getFullYear() <span class="comment">//年</span></span><br><span class="line">  <span class="keyword">var</span> month=dt.getMonth()+<span class="number">1</span> <span class="comment">//月(0-11)</span></span><br><span class="line">  <span class="keyword">var</span> date=dt.getDate() <span class="comment">//日(0-31)</span></span><br><span class="line">  <span class="keyword">var</span> hour=dt.getHours() <span class="comment">//时(0-23)</span></span><br><span class="line">  <span class="keyword">var</span> minute=dt.getMinutes() <span class="comment">//分 (0-59)</span></span><br><span class="line">  <span class="keyword">var</span> second=dt.getSeconds() <span class="comment">//秒 (0-59)</span></span><br><span class="line">  <span class="keyword">return</span> year+<span class="string">&#x27;-&#x27;</span>+month+<span class="string">&#x27;-&#x27;</span>+date+<span class="string">&#x27; &#x27;</span>+hour+<span class="string">&#x27;:&#x27;</span>+minute+<span class="string">&#x27;:&#x27;</span>+second</span><br><span class="line">&#125;</span><br><span class="line">getTime() <span class="comment">//2018-6-17 18:58:22</span></span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//书P70 可以被es6引擎优化</span></span><br><span class="line"><span class="comment">//阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n,p=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>*p</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result =n*p</span><br><span class="line"></span><br><span class="line">    <span class="comment">//优化后</span></span><br><span class="line">    <span class="keyword">return</span> factorial(n-<span class="number">1</span>,result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">factorial(<span class="number">3</span>)<span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>##菲波那契</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菲波那契 </span></span><br><span class="line"><span class="comment">//1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibo</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fibo(<span class="number">3</span>) <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//最优解</span></span><br><span class="line"><span class="comment">// 菲波那契可能是最普通的解法</span></span><br><span class="line"><span class="keyword">var</span> series = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span>(n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum[n];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> firstNum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> secondNum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i&lt;= n; i++) &#123;</span><br><span class="line">    total = firstNum + secondNum;</span><br><span class="line">    firstNum = secondNum;</span><br><span class="line">    secondNum = total;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浏览器内置对象"><a href="#浏览器内置对象" class="headerlink" title="浏览器内置对象"></a>浏览器内置对象</h1><h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>navigator.userAgent  浏览器代理器名称</p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>例子<br>location.href=’跳转的地址’<br><code>https://www.baidu.com/index.html?id=99&amp;a=b#mid=100</code></p><table>  <tr><td>location</td><td>值</td></tr>  <tr><td>location.protocol</td><td>https:</td></tr>  <tr><td>location.pathname</td><td>/index.html</td></tr>  <tr><td>location.search</td><td>?id=99&a=b</td></tr>  <tr><td>location.hash</td><td>#mid=100</td></tr></table><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>event. stopPropagatio()是阻止冒泡事件的方法，<br>在ie浏览器上没有stopPropagatio()这个方法，<br>在ie上要用e.cancelBubble=true阻止冒泡事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopPropagation</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e=<span class="built_in">window</span>.event||event;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.all)&#123;</span><br><span class="line">        e.cancelBubble=<span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        e.stopPropagation();<span class="comment">//阻止冒泡</span></span><br><span class="line">        e.preventDefault()<span class="comment">// 取消默认行为</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件委托代理"><a href="#事件委托代理" class="headerlink" title="事件委托代理"></a>事件委托代理</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>这是a标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;div1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">div1.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> target=e.target</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(target.nodeName===<span class="string">&#x27;A&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">    alert(target.innerHTML)</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>完善封装代理</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">elem,type,selector,fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(fn==<span class="literal">null</span>)&#123; <span class="comment">//3个参数</span></span><br><span class="line">    fn=selector</span><br><span class="line">    selector=<span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  elem.addEventListener(type,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tar<span class="keyword">get</span></span><br><span class="line">    <span class="title">if</span>(<span class="params">selector</span>)&#123; <span class="comment">//四个参数(代理)</span></span><br><span class="line">      target=e.target</span><br><span class="line">      <span class="built_in">console</span>.log(target)</span><br><span class="line">      <span class="keyword">if</span> (target.matches(selector))&#123;</span><br><span class="line">        fn.call(target,e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//没有代理</span></span><br><span class="line">      fn(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用代理</span></span><br><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;div1&#x27;</span>)</span><br><span class="line">bindEvent(div1,<span class="string">&#x27;click&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.innerHTML)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//不使用代理</span></span><br><span class="line"><span class="comment">// var a=document.getElementById(&#x27;a1&#x27;)</span></span><br><span class="line"><span class="comment">// bindEvent(div1,&#x27;click&#x27;,function(e)&#123;</span></span><br><span class="line"><span class="comment">//   console.log(a.innerHTML)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr =<span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;/api&#x27;</span>,<span class="literal">false</span>)</span><br><span class="line">xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//这里的函数异步执行</span></span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState=<span class="number">4</span>)&#123; <span class="comment">//ajax状态码</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.status==<span class="number">200</span>)&#123; <span class="comment">//http请求状态码</span></span><br><span class="line">      alert(xhr.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>异步模块定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.util.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> util=&#123;</span><br><span class="line">    <span class="attr">getFormatData</span>:<span class="function"><span class="keyword">function</span>(<span class="params">date,type</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(type===<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;2018-06-20&#x27;</span></span><br><span class="line">      &#125;<span class="keyword">if</span>(type===<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;2018年6月20日&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> util</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2.a-util.js</span></span><br><span class="line">define([<span class="string">&#x27;./util.js&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">util</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> aUtil=&#123;</span><br><span class="line">    <span class="attr">aGetFormatDate</span>:<span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> util.getFormatData(date,<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> aUtil</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.a.js</span></span><br><span class="line">define([<span class="string">&#x27;./a-util.js&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">util</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> a=&#123;</span><br><span class="line">    <span class="attr">printDate</span>:<span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(util.aGetFormatDate(date))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;./a.js&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  a.printDate(date) <span class="comment">//2018年6月20日</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用 <code>data-main</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/require.js/2.3.4/require.min.js&quot;</span> <span class="attr">data-main</span>=<span class="string">&#x27;./main.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><p>运动的tool</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">ele, attr</span>) //获取样式</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(ele.currentStyle)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> ele.currentStyle[attr];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> getComputedStyle(ele, <span class="literal">false</span>)[attr];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">ele, obj, fn</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">clearInterval</span>(ele.timer);</span><br><span class="line">  ele.timer=<span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bStop=<span class="literal">true</span>;   <span class="comment">//这一次运动就结束了――所有的值都到达了</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//1.取当前的值</span></span><br><span class="line">      <span class="keyword">var</span> iCur=<span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(attr==<span class="string">&#x27;opacity&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        iCur=<span class="built_in">parseInt</span>(<span class="built_in">parseFloat</span>(getStyle(ele, attr))*<span class="number">100</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        iCur=<span class="built_in">parseInt</span>(getStyle(ele, attr));</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//2.算速度</span></span><br><span class="line">      <span class="keyword">var</span> iSpeed=(obj[attr]-iCur)/<span class="number">8</span>;</span><br><span class="line">      iSpeed=iSpeed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(iSpeed):<span class="built_in">Math</span>.floor(iSpeed);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//3.检测停止</span></span><br><span class="line">      <span class="keyword">if</span>(iCur!=obj[attr])</span><br><span class="line">      &#123;</span><br><span class="line">        bStop=<span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(attr==<span class="string">&#x27;opacity&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        ele.style.filter=<span class="string">&#x27;alpha(opacity:&#x27;</span>+(iCur+iSpeed)+<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">        ele.style.opacity=(iCur+iSpeed)/<span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        ele.style[attr]=iCur+iSpeed+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(bStop)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(ele.timer);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(fn)</span><br><span class="line">      &#123;</span><br><span class="line">        fn();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"> <span class="comment">// let div1=document.getElementById(&#x27;div1&#x27;) </span></span><br><span class="line">  <span class="comment">//   startMove(div1,&#123;height:300&#125;,function()&#123; //高度变化300px</span></span><br><span class="line">  <span class="comment">//     cosnole.log(&#x27;运动完成&#x27;)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br></pre></td></tr></table></figure><h1 id="vue-中ajax"><a href="#vue-中ajax" class="headerlink" title="vue 中ajax"></a>vue 中ajax</h1><p>直接返回data数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url = <span class="string">&#x27;&#x27;</span>, data = &#123;&#125;, type = <span class="string">&#x27;GET&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> promise</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 准备url query参数数据</span></span><br><span class="line">      <span class="keyword">let</span> dataStr = <span class="string">&#x27;&#x27;</span> <span class="comment">//数据拼接字符串</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        dataStr += key + <span class="string">&#x27;=&#x27;</span> + data[key] + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (dataStr !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        dataStr = dataStr.substr(<span class="number">0</span>, dataStr.lastIndexOf(<span class="string">&#x27;&amp;&#x27;</span>))</span><br><span class="line">        url = url + <span class="string">&#x27;?&#x27;</span> + dataStr</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 发送get请求</span></span><br><span class="line">      promise = axios.get(url)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 发送post请求</span></span><br><span class="line">      promise = axios.post(url, data)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    promise.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(response.data)</span><br><span class="line">    &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;去重&quot;&gt;&lt;a href=&quot;#去重&quot; class=&quot;headerlink&quot; title=&quot;去重&quot;&gt;&lt;/a&gt;去重&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="js" scheme="https://wecy-chen.github.io/categories/js/"/>
    
    
    <category term="js" scheme="https://wecy-chen.github.io/tags/js/"/>
    
  </entry>
  
</feed>
