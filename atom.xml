<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎,欢迎━(*｀∀´*)ノ亻!</title>
  
  
  <link href="https://wecy-chen.github.io/atom.xml" rel="self"/>
  
  <link href="https://wecy-chen.github.io/"/>
  <updated>2024-10-30T02:37:19.097Z</updated>
  <id>https://wecy-chen.github.io/</id>
  
  <author>
    <name>wecyChen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb</title>
    <link href="https://wecy-chen.github.io/2024/10/08/mongodb/"/>
    <id>https://wecy-chen.github.io/2024/10/08/mongodb/</id>
    <published>2024-10-07T23:04:35.000Z</published>
    <updated>2024-10-30T02:37:19.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mongodb-安装教程"><a href="#mongodb-安装教程" class="headerlink" title="mongodb 安装教程"></a>mongodb 安装教程</h1><h2 id="新版本"><a href="#新版本" class="headerlink" title="新版本"></a>新版本</h2><p>下载地址 社区版本<br><a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p><img src="/image/mongodb/mongod7.png" alt="mongodb7"></p><p>下载zip文件包</p><p>系统环境变量增加mongodb路径<code>F:\mongodb7.0.15\bin</code></p><p>1.启动<br>mongod –dbpath=F:/mongodb7.0.15/data –logpath=F:/mongodb7.0.15/logs/mongodb.log</p><p>2.配置启动<br>mongod –config F:/mongodb7.0.15/mongodb.conf</p><p>mongodb.conf 配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 和日志相关的配置</span><br><span class="line">systemLog:</span><br><span class="line">  # MongoDB 所有日志输出的目标指定为文件</span><br><span class="line">  destination: file</span><br><span class="line">  # 指定日志文件的存放路径</span><br><span class="line">  path: &quot;F:/mongodb7.0.15/logs/mongodb.log&quot;</span><br><span class="line">  # true 日志的写入方式为在指定的日志文件中追加写入</span><br><span class="line">  #（false 则会在指定的日志文件存放路径的同一个目录下新建日志文件记录日志）</span><br><span class="line">  logAppend: true</span><br><span class="line"></span><br><span class="line"># 数据库相关配置</span><br><span class="line">storage:</span><br><span class="line">  # 指定 MongoDB 数据库的存放位置</span><br><span class="line">  dbPath: &quot;F:/mongodb7.0.15/data&quot;</span><br><span class="line"></span><br><span class="line"># 网络相关配置</span><br><span class="line">net:</span><br><span class="line">  # 服务实例绑定的 IP，默认是 localhost</span><br><span class="line">  # 即有哪些 IP 能够访问 MongoDB 服务</span><br><span class="line">  # 0.0.0.0 所有 IP 可以访问，一般如果要远程访问则设置为该值</span><br><span class="line">  bindIp: localhost</span><br><span class="line">  # 绑定的端口，默认是 27017</span><br><span class="line">  # MongoDB 运行监听的端口号</span><br><span class="line">  port: 27017</span><br></pre></td></tr></table></figure><blockquote><p>services.msc 打开服务<br>regedit 注册表</p></blockquote><ol><li><p>启动</p><p> mongod –dbpath=F:/mongodb7.0.15/data –logpath=F:/mongodb7.0.15/logs/mongodb.log</p></li></ol><ol start="2"><li>配置启动</li></ol><p>  mongod –config F:/mongodb7.0.15/mongodb.conf</p><ol start="3"><li>服务启动</li></ol><p>  mongod –install -f “F:/mongodb7.0.15/mongodb.conf”</p><p>  <code>F:/mongodb7.0.15/bin/mongod.exe -f F:/mongodb7.0.15/mongodb.conf --serviceName mongodb7 --serviceDisplayName mongodb7 --install</code></p><p>  启动 net start mongodb7</p><p>  停止 net stop mongodb7</p><p>  重新安装服务 mongod –remove –serviceName 服务名</p><p>  注册表修改位置<br>  计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MongoDB<br>  拒绝访问  用管理员身份运行,再启动</p><ol start="4"><li>删除服务<br>sc delete MongoDB</li></ol><h2 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h2><p>下载解压bin下文件放在mongodb的bin目录<br><a href="https://www.mongodb.com/try/download/database-tools">https://www.mongodb.com/try/download/database-tools</a></p><blockquote><p>导出<br>mongodump –db &lt;数据库名称&gt; –out &lt;导出文件夹路径&gt;   </p></blockquote><p><code>mongodump --db medicalCenter --out F:\export</code></p><blockquote><p>导入<br>mongorestore</p></blockquote><p><code>mongorestore --db medicalCenter --host localhost --port 27018 F:\export\medicalCenter</code></p><blockquote><p>导入集合<br> mongorestore  –db 数据库名 –collection 集合名 –file 数据文件路径</p></blockquote><p><code>mongoimport --db medicalCenter --port 27018 --collection commodity --file F:\export\medicalCenter\commodity.json</code></p><p>mongodb历史 教程</p><h2 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h2><p><a href="http://dl.mongodb.org/dl/win32/x86_64">下载地址</a></p><p>下载版本 <code>win32/mongodb-win32-x86_64-2008plus-ssl-4.0.27-signed.msi</code> 215.20MB</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>选择 custom 自定义安装 安装路径<code>D:\MongoDB\</code>,然后一路 next, 默认服务名为<code>MongoDB</code></p><p>安装后添加<code>环境变量</code></p><p>右击此电脑==&gt;&gt;点击属性==&gt;&gt;高级系统设置==&gt;&gt;环境变量==&gt;&gt;path 中添加</p><p>路径 <code>D:\MongoDB\bin</code></p><p>安装完成 &gt; mongod –version</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>服务名称<code>MongoDB</code></p><p>启动 mongodb 服务 &gt; <code>net start MongoDB</code><br>关闭 mongodb 服务 &gt; <code>net stop MongoDB</code></p><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><p><strong>robomongo</strong></p><p>天翼云盘</p><p>全部软件–&gt;软件–&gt;开发</p><p><code>robomongo-0.9.0-windows-x86_64-0786489</code></p><p><strong>studio3t</strong></p><p><a href="https://studio3t.com/download-thank-you/?OS=win64">https://studio3t.com/download-thank-you/?OS=win64</a></p><p><a href="https://blog.csdn.net/wangmx1993328/article/details/82628805">介绍</a></p><p>安装前,注意卸载老版本 安装完成后 需要账号 30 日有效期</p><p><strong>compass</strong></p><p><a href="https://www.mongodb.com/products/tools/compass">官网版本(推荐)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mongodb-安装教程&quot;&gt;&lt;a href=&quot;#mongodb-安装教程&quot; class=&quot;headerlink&quot; title=&quot;mongodb 安装教程&quot;&gt;&lt;/a&gt;mongodb 安装教程&lt;/h1&gt;&lt;h2 id=&quot;新版本&quot;&gt;&lt;a href=&quot;#新版本&quot; class</summary>
      
    
    
    
    <category term="mongodb" scheme="https://wecy-chen.github.io/categories/mongodb/"/>
    
    
    <category term="mongodb" scheme="https://wecy-chen.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>电脑杂记</title>
    <link href="https://wecy-chen.github.io/2023/12/25/diannan/"/>
    <id>https://wecy-chen.github.io/2023/12/25/diannan/</id>
    <published>2023-12-25T05:59:23.740Z</published>
    <updated>2024-01-30T02:03:22.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><h2 id="UEFI-GPT"><a href="#UEFI-GPT" class="headerlink" title="UEFI+GPT"></a>UEFI+GPT</h2><p>重装系统</p><ol><li><p>进 PE 系统，用 DG 分区软件将硬盘分区表格式转换为 GUID 格式（这个转换是无损的，不会对数据造成影响），然后删除 C 盘</p></li><li><p>新建 ESP 和 MSR 分区</p></li></ol><p>注:先预留空白分区空间(磁盘管理—&gt;删除券)<br>cmd 命令:</p><blockquote><p>diskpart<br>list disk<br>select disk 0<br>create partition efi size=n<br>create partition msr size=n</p></blockquote><p>挂载 ESP,选择磁盘后</p><blockquote><p>list partition<br>select partition 1<br>assign letter = z<br>remove letter = z</p></blockquote><p>说明: <code>partition</code>可简写<code>part</code> <code>0</code>为磁盘序号 0-n, <code>n</code>为创建分区空间大小,<code>1</code>为分区序号, <code>z</code>为挂载点</p><p>文件拒绝方法,用 DG 打开</p><ol start="3"><li><p>用 DG 把剩下的空间创建为 NTFS 格式的 C 盘</p></li><li><p>FAT 格式化 ESP 分区，指定盘符为 Z 盘</p></li><li><p>BIOS 设置以 UEFI 方式启动电脑</p></li><li><p>使用 dism++ 安装系统</p></li></ol><p>解决Boot Camp磁盘隐藏<br>1、Win-R，运行DISKPART程序<br>2、list volume，会看到D分区已被隐藏<br>3、select volume x(x为你的D盘卷号)<br>4、attributes volume clear hidden，清除隐藏属性<br>5、搞定，D盘又乖乖的躺那了</p><h2 id="xorboot"><a href="#xorboot" class="headerlink" title="xorboot"></a>xorboot</h2><p>开机设置启动项</p><ol><li>新建 xorboot.xor 文件和启动项</li></ol><p><img src="/image/diannao/xorboot1.png" alt="xorboot1.png"></p><ol start="2"><li>配置启动菜单</li></ol><p><img src="/image/diannao/xorboot2.png" alt="xorboot2.png"></p><p><img src="/image/diannao/xorboot3.png" alt="xorboot3.png"></p><h2 id="安装win11"><a href="#安装win11" class="headerlink" title="安装win11"></a>安装win11</h2><!-- https://pan.xunlei.com/s/VNp93Jz6wIoiFanXoFjhyDGmA1?pwd=iusx --><!-- https://pan.xunlei.com/s/VNWFdpqXN_R3rL85Us0UYDnfA1?pwd=vsyi#  --><p>一. 跳过TPM检测</p><ol><li>Shift+F10   打开命令行</li><li>regedit  打开注册表</li><li>HKEY_LOCAL_MACHINE\SYSTEM\Setup 定位位置</li><li>新建一个名为“LabConfig”的项，接着在“LabConfig”下创建两个 DWORD 值：<br>输入名字改成为“BypassTPMCheck”，值为“00000001”32位<br>输入名字改成为“BypassSecure BootCheck”，值为“00000001”32位</li></ol><p>保存退出后，上图的提示就消失了，就可以正常安装 Win11</p><p>二. WiFi连接</p><ol><li>Shift+F10</li><li>输入taskmgr</li><li>安装bootcamp驱动,连接WiFi</li></ol><h2 id="Boot-Camp-eGPU-设置过程"><a href="#Boot-Camp-eGPU-设置过程" class="headerlink" title="Boot Camp eGPU 设置过程"></a>Boot Camp eGPU 设置过程</h2><ol><li>安装win10和DUU</li></ol><p>① 选择所需的 Windows 10 版本以下载 ISO，然后打开 Boot Camp 助理以开始安装 Windows<br>② 右键单击 Display Driver Uninstaller 以管理员身份运行。然后继续卸载所有显卡驱动程序。在“DDU 选项”下禁用 Windows 10 自动 GPU 驱动程序安装。<br>③ 创建还原点 (电脑属性–&gt;系统保护–&gt;系统还原) 重启时摁住F8  </p><p>使用.bat 切换到 iGPU</p><p>使用 automate-eGPU</p><p>将驱动器格式化为 FAT，并确保将其命名为其他 EFI。将 automate-eGPU EFI 中的 EFI 文件夹复制并粘贴到此驱动器中。</p><p>新建分区 名称eGPU.io 格式MS-DOT(FAT) 重启按options进入</p><p>④ 如果您在设备管理器中的显示适配器下看到 Microsoft 基本显示适配器设备，请继续安装英特尔图形驱动程序  禁用X16 X8</p><p>重启 插入EGPU 启动EFI</p>]]></content>
    
    
    <summary type="html">电脑操作</summary>
    
    
    
    <category term="电脑" scheme="https://wecy-chen.github.io/categories/%E7%94%B5%E8%84%91/"/>
    
    
  </entry>
  
  <entry>
    <title>运通项目</title>
    <link href="https://wecy-chen.github.io/2023/06/17/yuntong/"/>
    <id>https://wecy-chen.github.io/2023/06/17/yuntong/</id>
    <published>2023-06-17T08:00:00.000Z</published>
    <updated>2023-06-21T02:52:23.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="积分赠送"><a href="#积分赠送" class="headerlink" title="积分赠送"></a>积分赠送</h1><h2 id="订单赠送"><a href="#订单赠送" class="headerlink" title="订单赠送"></a>订单赠送</h2><h2 id="商品增送"><a href="#商品增送" class="headerlink" title="商品增送"></a>商品增送</h2>]]></content>
    
    
    <summary type="html">运通项目说明</summary>
    
    
    
    <category term="项目" scheme="https://wecy-chen.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>随记</title>
    <link href="https://wecy-chen.github.io/2023/02/11/essay/"/>
    <id>https://wecy-chen.github.io/2023/02/11/essay/</id>
    <published>2023-02-11T05:51:16.465Z</published>
    <updated>2023-02-11T05:52:41.195Z</updated>
    
    <content type="html"><![CDATA[<p>珍惜 铭记 忽视 遗忘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;珍惜 铭记 忽视 遗忘&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新零售版本</title>
    <link href="https://wecy-chen.github.io/2023/02/08/medicalCenter/"/>
    <id>https://wecy-chen.github.io/2023/02/08/medicalCenter/</id>
    <published>2023-02-08T05:50:41.756Z</published>
    <updated>2024-11-14T07:51:19.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-8-6-3"><a href="#2-8-6-3" class="headerlink" title="2.8.6.3"></a>2.8.6.3</h1><h2 id="赠品管理"><a href="#赠品管理" class="headerlink" title="赠品管理"></a>赠品管理</h2><blockquote><p>商品 ===&gt; 商品管理 ===&gt; 赠品管理</p></blockquote><p><img src="/image/medicalCenter/product_gift.png" alt="中台促销"></p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>增加 <code>product_gift</code> 数据表</p><p>商品表 </p><p>original_order,goods_record,refunds_order,order_library表商品增加<code>gift_product</code>字段</p><p>商品销售库存增加 <code>minusGiftStock</code> 方法</p><p>路径<code>/libs/utils/goods</code></p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法"></a>统计方法</h2><p>@common/statistics.js</p><p>统计门店每天数据销售 <code>dayStat</code>  数据表 <code>day_stat</code><br>统计门店每月的数据 <code>monthStat</code>  数据表 <code>month_stat</code></p><p>@common/goods_stat.js<br>统计销售明细 goods_stat</p>]]></content>
    
    
    <summary type="html">新零售版本</summary>
    
    
    
    <category term="新零售" scheme="https://wecy-chen.github.io/categories/%E6%96%B0%E9%9B%B6%E5%94%AE/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wecy-chen.github.io/2022/10/18/wx/"/>
    <id>https://wecy-chen.github.io/2022/10/18/wx/</id>
    <published>2022-10-18T07:20:48.094Z</published>
    <updated>2022-10-18T07:20:48.094Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>mac操作技巧</title>
    <link href="https://wecy-chen.github.io/2022/09/26/macOS/"/>
    <id>https://wecy-chen.github.io/2022/09/26/macOS/</id>
    <published>2022-09-26T00:55:46.932Z</published>
    <updated>2023-05-11T01:39:09.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-开发配置"><a href="#mac-开发配置" class="headerlink" title="mac 开发配置"></a>mac 开发配置</h1><h2 id="下载-vscode-编辑器"><a href="#下载-vscode-编辑器" class="headerlink" title="下载 vscode 编辑器"></a>下载 vscode 编辑器</h2><p>地址：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a><br>￼<br><img src="/image/macOS/Mac.png" alt="Mac.png"><br>universa(普遍) Intel Chip (intel 芯片) Apple Silicon (M1 芯片)</p><h2 id="下载-git"><a href="#下载-git" class="headerlink" title="下载 git"></a>下载 git</h2><p><img src="/image/macOS/git.png" alt="git.png"></p><p><a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a><br>Tim Harper  为 Git 提供了一个安装程序。最新版本是 2.33.0，发布于 4 个月前，于 2021-08-30。</p><h2 id="安装-homebrew"><a href="#安装-homebrew" class="headerlink" title="安装 homebrew"></a>安装 homebrew</h2><p>使用命令行安装 git</p><p>网上都是报错<br>/bin/bash -c “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh)%E2%80%9D">https://raw.githubusercontent.com/Homebrew/install/master/install.sh)”</a></p><p><a href="https://raw.githubusercontent.com/Homebrew/install/master/install.sh">https://raw.githubusercontent.com/Homebrew/install/master/install.sh</a></p><p><img src="/image/macOS/git1.png" alt="git1.png"></p><p>Failed to connect to raw.githubusercontent.com port 443: Connection refused</p><p>使用下面这个源下载<br>/bin/zsh -c “$(curl -fsSL <a href="https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;">https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</a></p><p><img src="/image/macOS/git2.png" alt="git2.png"></p><p>选择 1 中科大下载源 按 y 确认脚本下载 git</p><p><img src="/image/macOS/git3.png" alt="git3.png"></p><p>安装好 git 之后，运行 git 命令 提示需要安装 xcode<br>这个 xcode 内容有很多，将近 10 个 g，实际上只需要装 command Line Tools for Xcode 13.2 就可以了去苹果的开发者官网就可以下载了，地址 <a href="https://developer.apple.com/download/more/">https://developer.apple.com/download/more/</a></p><h2 id="配置-git-密钥"><a href="#配置-git-密钥" class="headerlink" title="配置 git 密钥"></a>配置 git 密钥</h2><ul><li>配置 git 用户名和邮箱信息</li></ul><p>$ git config –global user.name “用户名称”<br>$ git config –global user.emal “邮箱地址”</p><ul><li>生成密钥对</li></ul><p>$ ssh-keygen -t rsa -C “用户名”</p><p><img src="/image/macOS/git4.png" alt="git4.png"></p><p>密码设置为空</p><ul><li>添加公钥到你的远程仓库</li></ul><p>查看密钥添加到用户 SSH key 配置</p><pre><code>$ cat ~/.ssh/id_rsa.pub</code></pre><ul><li>克隆仓库</li></ul><p>$ git clone git@xxxxx/xxxx.git</p><p>4.安装 nvm（node 包管理器工具）<br>macOS10.15 以上版本需要创建.zshrc 文件</p><p>输入命令<br>$ touch ~/.zshrc<br>$ curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh</a> | bash</p><p>如果提示 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused（无法连接到 raw.githubusercontent.com 端口 443:连接被拒绝）, 需要在访达下，command+shift+G, /etc/host 文件下添加 199.232.28.133 raw.githubusercontent.com，host 文件如下：<br>————————————————<br>先拷贝一份 host 文件，修改后再重新覆盖原文件</p><p><img src="/image/macOS/git5.png" alt="git5.png"></p><p>添加后在重新输入命令，下载 nvm</p><h2 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><p>$ touch ~/.zshrc<br>$ curl -o- <a href="https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh">https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh</a> | bash</p><p><img src="/image/macOS/git6.png" alt="git6.png"></p><p><img src="/image/macOS/git7.png" alt="git7.png"></p><p>安装后判断是否成功</p><p>$ nvm -v</p><p>不成功，运行三行命令<br>$ export NVM_DIR=”$HOME/.nvm”<br>$ [ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh”  # This loads nvm<br>$ [ -s “$NVM_DIR/bash_completion” ] &amp;&amp; . “$NVM_DIR/bash_completion” # This loads nvm bash_completion</p><p>注：不成功，需要在.zshrc 文件上加上三行语句命令<br>$ ls -A<br>$ open .zshrc</p><p>nvm install stable ## 安装最新稳定版 node，当前是 node v9.5.0 (npm v5.6.0)<br>nvm install <version> ## 安装指定版本，可模糊安装，如：安装 v4.4.0，既可 nvm install v4.4.0，又可 nvm install 4.4<br>nvm uninstall <version> ## 删除已安装的指定版本，语法与 install 类似<br>nvm use <version> ## 切换使用指定的版本 node<br>nvm ls ## 列出所有安装的版本<br>nvm ls-remote ## 列出所有远程服务器的版本（官方 node version list）<br>nvm current ## 显示当前的版本<br>nvm alias <name> <version> ## 给不同的版本号添加别名<br>nvm unalias <name> ## 删除已定义的别名<br>nvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包<br>————————————————</p><p>nvm 如何根据项目自动切换 node 版本</p><p>v 版本号</p><p>在项目跟目录新建<code>.nvmrc</code>文件,写入<code>v16</code></p><ol><li><code>vi ~/.zshrc</code></li></ol><p>写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">load-nvmrc() &#123;</span><br><span class="line">   local nvmrc_path=&quot;$(nvm_find_nvmrc)&quot;</span><br><span class="line">   if [ -n &quot;$nvmrc_path&quot; ]; then</span><br><span class="line">     echo &#x27;🤓找到.nvmrc配置，并自动切换node版本&#x27;</span><br><span class="line">     nvm use #</span><br><span class="line">   fi</span><br><span class="line">&#125;</span><br><span class="line">load-nvmrc</span><br></pre></td></tr></table></figure><ol start="2"><li><code>source ~/.zshrc</code> 生效</li></ol><h2 id="文件名路经显示设置"><a href="#文件名路经显示设置" class="headerlink" title="文件名路经显示设置"></a>文件名路经显示设置</h2><p><a href="https://www.bilibili.com/read/cv12745312">https://www.bilibili.com/read/cv12745312</a></p><ul><li>开启</li></ul><p><code>defaults write com.apple.finder _FXShowPosixPathInTitle -bool TRUE;killall Finder</code></p><ul><li>关闭</li></ul><p><code>defaults delete com.apple.finder _FXShowPosixPathInTitle;killall Finder</code></p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>参考地址: <a href="https://zhuanlan.zhihu.com/p/191495100">https://zhuanlan.zhihu.com/p/191495100</a></p><ol><li><code>vi ~/.bash_profile</code></li><li>配置全局路径</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATH_PYTHON=&quot;/Library/Frameworks/Python.framework/Versions/3.8/bin&quot;</span><br><span class="line"># Setting PATH for Phantomjs 2.1.1-maxcosx</span><br><span class="line">PATH_PHANTOM=&quot;/Users/wecychen/PhantomJs/phantomjs-2.1.1-macosx/bin&quot;</span><br><span class="line">PATH=&quot;$&#123;PATH_PYTHON&#125;:$&#123;PATH_PHANTOM&#125;:$&#123;PATH&#125;&quot;</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>source ~/.bash_profile</code></p></li><li><p><code>phantomjs --version</code></p></li></ol><h1 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h1><p><a href="https://blog.csdn.net/qq_45088552/article/details/126799921">安装 brew</a></p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><a href="https://blog.csdn.net/qq_42222342/article/details/124414747">redis 安装教程</a></p><p>开启 : <code>brew services start redis</code><br>关闭: <code>brew services stop redis</code><br>验证: <code>redis-cli ping</code></p><h2 id="mongod"><a href="#mongod" class="headerlink" title="mongod"></a>mongod</h2><p>[查看 mongod 版本]<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>这里推荐用 brew 安装 4.4 版本</p><blockquote><ol><li> <code>brew tap mongodb/brew</code></li></ol></blockquote><blockquote><ol start="2"><li> <code>brew install mongodb-community@4.4</code></li></ol></blockquote><p>设置环境变量</p><ol><li><p><code>vim ~/.zshrc</code> 编辑</p><p><code>cat ~/.zshrc</code> 查看</p></li></ol><p>按 i 调到输入模式，意思是 insert<br>添加<br><code>export PATH=&quot;/usr/local/opt/mongodb-community@4.4/bin:$PATH&quot;</code></p><p>按 esc，再按:wq，保存退出</p><ol start="2"><li><code>source  ~/.zshrc</code> 生效</li></ol><p>查看版本</p><blockquote><p><code>mongod --version</code></p></blockquote><p>db version v4.4.19<br>Build Info: {<br>“version”: “4.4.19”,<br>“gitVersion”: “9a996e0ad993148b9650dc402e6d3b1804ad3b8a”,<br>“modules”: [],<br>“allocator”: “system”,<br>“environment”: {<br>“distarch”: “x86_64”,<br>“target_arch”: “x86_64”<br>}<br>}</p><p>@ 符号后面的 4.4 是最新版本号。<br>安装信息：</p><p>配置文件：<code>/usr/local/etc/mongod.conf</code><br>日志文件路径：<code>/usr/local/var/log/mongodb</code><br>数据存放路径：<code>/usr/local/var/mongodb</code><br>运行 MongoDB<br>我们可以使用 brew 命令或 mongod 命令来启动服务。</p><p>brew 启动：<br><code>brew services start mongodb-community@4.4</code><br>brew 停止：<br><code>brew services stop mongodb-community@4.4</code></p><p>设置密码</p><p><a href="https://www.90175.com/wenku/txtlist_i40v.html">https://www.90175.com/wenku/txtlist_i40v.html</a></p><p>运行命名</p><blockquote><ol><li><code>mongo</code></li><li><code>show dbs</code></li><li><code>exit</code></li></ol></blockquote>]]></content>
    
    
    <summary type="html">mac系统操作</summary>
    
    
    
    <category term="mac" scheme="https://wecy-chen.github.io/categories/mac/"/>
    
    
    <category term="mac操作" scheme="https://wecy-chen.github.io/tags/mac%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>js/html/css方法</title>
    <link href="https://wecy-chen.github.io/2022/09/12/fn/"/>
    <id>https://wecy-chen.github.io/2022/09/12/fn/</id>
    <published>2022-09-11T23:04:35.000Z</published>
    <updated>2023-07-11T08:23:21.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h1><p>在 JavaScript 中，深拷贝是指创建一个新的对象，并将原始对象的所有属性和嵌套对象的属性都复制到新对象中，确保原始对象和新对象之间没有引用关系。这样做可以避免在修改新对象时影响到原始对象。</p><p>以下是几种常见的 JavaScript 深拷贝方法：</p><p>手动递归复制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> copy = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">      copy[key] = deepCopy(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 JSON 序列化和反序列化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> copy = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</span><br></pre></td></tr></table></figure><p>这种方法可以将对象转换为字符串，然后再将字符串转换回对象，从而实现深拷贝。但是需要注意的是，它无法复制函数和特殊对象（如正则表达式、Date 对象等），并且会忽略对象的原型链。</p><p>使用第三方库（如 Lodash）：<br>第三方库 Lodash 提供了 cloneDeep 方法，可以方便地进行深拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> copy = _.cloneDeep(obj);</span><br></pre></td></tr></table></figure><p>这种方法可以处理各种类型的对象，并且具有良好的性能和兼容性。</p><p>需要注意的是，深拷贝可能会导致循环引用的问题，即某个对象的属性引用了自身或者形成了循环引用链。在进行深拷贝时，需要确保处理循环引用的情况，否则可能会导致无限递归的问题。</p><p>选择合适的深拷贝方法取决于你的具体需求和使用场景。如果你只需要简单的数据结构拷贝，手动递归复制或使用 JSON 序列化和反序列化可能已经足够。如果需要处理复杂的对象和循环引用，可以考虑使用第三方库来进行深拷贝。</p><h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><p>防抖（debouncing）是一种常用的前端技术，用于限制某个函数在短时间内被频繁触发的情况。当一个事件被触发时，防抖会延迟执行该事件的处理函数，如果在延迟期间内该事件再次被触发，那么延迟时间会被重新计算。这样可以有效地减少函数的执行次数，提升性能。</p><p>下面是一个简单的 JavaScript 示例代码，演示了如何实现防抖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timerId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timerId);</span><br><span class="line">    timerId = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleInput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;处理输入...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debouncedHandleInput = debounce(handleInput, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听输入事件</span></span><br><span class="line"><span class="built_in">document</span></span><br><span class="line">  .getElementById(<span class="string">&quot;input&quot;</span>)</span><br><span class="line">  .addEventListener(<span class="string">&quot;input&quot;</span>, debouncedHandleInput);</span><br></pre></td></tr></table></figure><p>在上面的示例中，debounce 函数接受两个参数：func 是要执行的函数，delay 是延迟的时间间隔（以毫秒为单位）。它返回一个新的函数，这个函数会在延迟期间内被多次调用时，只执行最后一次调用。</p><p>你可以根据自己的需求调整延迟时间，以及要执行的函数。在示例中，我们将 handleInput 函数包装在 debounce 中，并将返回的函数 debouncedHandleInput 用作输入事件的处理函数。这样，当用户输入时，handleInput 函数不会立即执行，而是在用户停止输入一段时间后才会执行。</p><h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><p>节流（throttling）是另一种常用的前端技术，用于限制某个函数在一定时间间隔内被触发的频率。与防抖不同，节流会在固定的时间间隔内执行函数，而不管该函数是否被频繁触发。</p><p>下面是一个简单的 JavaScript 示例代码，演示了如何实现节流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timerId;</span><br><span class="line">  <span class="keyword">let</span> lastExecutedTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">const</span> currentTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentTime - lastExecutedTime &gt;= delay) &#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      lastExecutedTime = currentTime;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timerId);</span><br><span class="line">      timerId = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">        lastExecutedTime = <span class="built_in">Date</span>.now();</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;处理滚动...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> throttledHandleScroll = throttle(handleScroll, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听滚动事件</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, throttledHandleScroll);</span><br></pre></td></tr></table></figure><p>在上面的示例中，throttle 函数接受两个参数：func 是要执行的函数，delay 是时间间隔（以毫秒为单位）。它返回一个新的函数，这个函数会在固定的时间间隔内被调用，无论被调用的次数。</p><p>在示例中，我们将 handleScroll 函数包装在 throttle 中，并将返回的函数 throttledHandleScroll 用作滚动事件的处理函数。这样，无论用户多快地滚动页面，handleScroll 函数都会以固定的时间间隔被执行。</p><p>你可以根据自己的需求调整时间间隔，以及要执行的函数。请注意，节流会在固定的时间间隔内执行函数，而不会像防抖那样等待用户停止触发事件。</p><h1 id="转置矩阵"><a href="#转置矩阵" class="headerlink" title="转置矩阵"></a>转置矩阵</h1><p>要转置一个矩阵，可以将矩阵的行变为列，列变为行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transposeMatrix</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取矩阵的行数和列数</span></span><br><span class="line">  <span class="keyword">const</span> rows = matrix.length;</span><br><span class="line">  <span class="keyword">const</span> cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">  <span class="comment">// 创建一个新的矩阵来存储转置后的结果</span></span><br><span class="line">  <span class="keyword">const</span> transposedMatrix = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cols; i++) &#123;</span><br><span class="line">    transposedMatrix[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; rows; j++) &#123;</span><br><span class="line">      <span class="comment">// 将原矩阵的行变为列</span></span><br><span class="line">      transposedMatrix[i][j] = matrix[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> transposedMatrix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例矩阵</span></span><br><span class="line"><span class="keyword">const</span> matrix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 转置矩阵</span></span><br><span class="line"><span class="keyword">const</span> transposed = transposeMatrix(matrix);</span><br><span class="line"><span class="built_in">console</span>.log(transposed);</span><br><span class="line">[</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h1 id="矩阵列匹配"><a href="#矩阵列匹配" class="headerlink" title="矩阵列匹配"></a>矩阵列匹配</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>], <span class="comment">// 匹配选择1</span></span><br><span class="line">  [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="comment">// 匹配选择2</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> list = [];</span><br><span class="line"><span class="keyword">let</span> r_list = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params">$arr, $i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; $arr[$i].length; i++) &#123;</span><br><span class="line">    r_list[$i] = $arr[$i][i];</span><br><span class="line">    <span class="keyword">if</span> ($i !== $arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">      fn($arr, $i + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list.push(r_list.slice());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn(arr, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   [1, &quot;a&quot;],</span></span><br><span class="line"><span class="comment">//   [1, &quot;b&quot;],</span></span><br><span class="line"><span class="comment">//   [2, &quot;a&quot;],</span></span><br><span class="line"><span class="comment">//   [2, &quot;b&quot;]</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是前端一些方法</summary>
    
    
    
    <category term="工具" scheme="https://wecy-chen.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="js" scheme="https://wecy-chen.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>工具/插件</title>
    <link href="https://wecy-chen.github.io/2022/09/12/tool/"/>
    <id>https://wecy-chen.github.io/2022/09/12/tool/</id>
    <published>2022-09-11T23:04:35.000Z</published>
    <updated>2022-09-12T08:50:07.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="同步书签"><a href="#同步书签" class="headerlink" title="同步书签"></a>同步书签</h2><p><a href="https://zhuanlan.zhihu.com/p/503592340">同步书签</a></p><p><strong>一. 配置 github token</strong></p><ol><li><a href="https://github.com/settings/tokens/new">进入 github token</a></li><li>填写 Note <code>BookmarkHub</code></li><li>失效日期设置为<code>No expiration</code></li><li>勾选<code>gist</code>选项</li><li>点击<code>Generate token</code>生成并复制 token</li></ol><p><strong>二. 获取 gist id</strong></p><ol><li><p><a href="https://gist.github.com/">进入 gist</a></p><p>注：如果进入不了，需配置一下 hosts 文件<br>C:\Windows\System32\drivers\etc\hosts<br>在末尾添加如下内容：<br>140.82.114.3 <a href="http://gist.github.com/">http://gist.github.com</a><br>140.82.114.4 <a href="http://gist.github.com/">http://gist.github.com</a><br><a href="https://ping.chinaz.com/gist.github.com">失败重新获取并修改 ip</a><br>刷新&gt; <code>ipconfig /flushdns</code> 刷新 dns</p></li><li><p>描述填写<code>bookmarkHub</code></p></li><li><p>内容填写<code>书签同步</code></p></li><li><p>gist 创建完成，得到 gist id</p></li></ol><p><strong>三.设置 bookmarkHub</strong></p><ol><li>把设置好的 github token 和 gist id 填写到 BookmarkHub 插件中</li></ol><p><img src="https://pic2.zhimg.com/80/v2-d0b54ab370627a66deb6634c7cc92e05_1440w.jpg" alt="BookmarkHub"></p><ol start="2"><li>配置好上传书签</li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>谷歌插件地址</p><p>C:\Users\wecy\AppData\Local\Google\Chrome\User Data\Default\Extensions</p><table><thead><tr><th align="center">插件名</th><th align="center">插件 id</th></tr></thead><tbody><tr><td align="center">BookmarkHub - 书签同步</td><td align="center">fohimdklhhcpcnpmmichieidclgfdmol</td></tr></tbody></table><p><a href="http://crx.zhuzhu.org/">插件下载 ctx</a></p><p>下载插件 <code>https://chrome.google.com/webstore/detail/fohimdklhhcpcnpmmichieidclgfdmol</code></p>]]></content>
    
    
    <summary type="html">这是一些工具/插件使用方法</summary>
    
    
    
    <category term="工具" scheme="https://wecy-chen.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具 插件 浏览器 谷歌" scheme="https://wecy-chen.github.io/tags/%E5%B7%A5%E5%85%B7-%E6%8F%92%E4%BB%B6-%E6%B5%8F%E8%A7%88%E5%99%A8-%E8%B0%B7%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0</title>
    <link href="https://wecy-chen.github.io/2022/08/22/vue3/"/>
    <id>https://wecy-chen.github.io/2022/08/22/vue3/</id>
    <published>2022-08-22T01:42:38.316Z</published>
    <updated>2023-04-21T07:49:11.080Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Vue3 学习</strong></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>文档说明</p><ol><li> <a href="https://vue3js.cn/">学习地址</a></li><li> <a href="https://24kcs.github.io/vue3_study/">快速上手</a></li><li> <a href="https://v3.cn.vuejs.org/">vue 中文官网</a></li><li> <a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHRlbXBsYXRlPlxuICA8aDE+e3sgbXNnIH19PC9oMT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5jb25zdCBtc2cgPSAnSGVsbG8gV29ybGQhJ1xuPC9zY3JpcHQ+IiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCJcbiAgfVxufSJ9">代码测试</a></li><li> <a href="https://juejin.cn/post/6955129410705948702">Vue3 掘金</a></li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">文档</a></p><h3 id="使用-vue-cli-创建"><a href="#使用-vue-cli-创建" class="headerlink" title="使用 vue-cli 创建"></a>使用 vue-cli 创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install - g @vue / cli # # 安装或者升级</span><br><span class="line">$ vue--version # # 保证 vue cli 版本在 <span class="number">4.5</span> <span class="number">.0</span> 以上 当前安装版本<span class="number">5</span> <span class="number">.0</span> <span class="number">.4</span></span><br><span class="line">$ vue create my - project # # 创建项目</span><br></pre></td></tr></table></figure><blockquote><p>安装步骤<br>注意: 选项无法按箭头键选择时, 可以用数字键选择</p></blockquote><ul><li>Use <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a> for faster installation? Yes 使用更快的 npm 镜像</li><li>Target directory D:\桌面\github\vue-3.0 already exists. Pick an action: (Use<br>arrow keys) ** merge 文件已存在, 合并本地文件</li><li>? Please pick a preset: Default ([Vue 3] babel, eslint)**1 使用 vue3 配置项(一般选择自定义配置)</li><li>? Pick the package manager to use when installing dependencies: Yarn 安装</li></ul><p>创建成功之后一般会自动安装依赖包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd vue - <span class="number">3.0</span></span><br><span class="line">$ yarn serve</span><br></pre></td></tr></table></figure><h3 id="使用-vite-创建"><a href="#使用-vite-创建" class="headerlink" title="使用 vite 创建"></a>使用 vite 创建</h3><p><a href="https://v3.cn.vuejs.org/guide/installation.html">文档</a></p><ul><li><p>vite 是一个由原生 ESM 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES imports 开发</p></li><li><p>它做到了**<em>本地快速开发启动</em>**, 在生产环境下基于 Rollup 打包</p></li><li><ol><li>快速的冷启动，不需要等待打包操作；</li></ol></li><li><ol start="2"><li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起</li></ol></li><li><ol start="3"><li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm init vite - app &lt; project - name &gt;</span><br><span class="line">    $ cd &lt; project - name &gt;</span><br><span class="line">    $ npm install 或者 yarn</span><br><span class="line">$ npm run dev 或者 yarn dev</span><br></pre></td></tr></table></figure><h1 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><ul><li>新的 option, 所有的组合 API 函数都在此使用, 只在初始化时执行一次</li><li>函数如果返回对象, 对象中的属性或方法, 模板中可以直接使用</li></ul><p><code>注意:</code> setup 细节问题</p><ul><li><p>setup 是在 beforeCreate 生命周期回调之前就执行了, 而且就执行一次</p></li><li><ol><li>由此可以推断出:setup 在执行的时候, 当前的组件还没有创建出来, 也就意味着: 组件实例对象 this 根本就不能用</li></ol></li><li><p>2.this 是 undefined, 说明, 就不能通过 this 再去调用 data/computed/methods/props 中的相关内容了</p></li><li><ol start="3"><li>其实所有的 composition API 相关回调函数中也都不可以</li></ol></li><li><p>setup 中的返回值是一个对象, 内部的属性和方法是给 html 模版使用的</p></li><li><p>setup 中的对象内部的属性和 data 函数中的 return 对象的属性都可以在 html 模版中使用</p></li><li><p>setup 中的对象中的属性和 data 函数中的对象中的属性会合并为组件对象的属性</p></li><li><p>setup 中的对象中的方法和 methods 对象中的方法会合并为组件对象的方法</p></li><li><p>在 Vue3 中尽量不要混合的使用 data 和 setup 及 methods 和 setup</p></li><li><p>一般不要混合使用: methods 中可以访问 setup 提供的属性和方法, 但在 setup 方法中不能访问 data 和 methods</p></li><li><p>setup 不能是一个 async 函数: 因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性数据</p></li><li><p>setup 的参数</p><ul><li>setup(props, context) / setup(props, {attrs, slots, emit})</li><li>props: 包含 props 配置声明且传入了的所有属性的对象</li><li>attrs: 包含没有在 props 配置中声明的属性的对象, 相当于 this.$attrs</li><li>slots: 包含所有传入的插槽内容的对象, 相当于 this.$slots</li><li>emit: 用来分发自定义事件的函数, 相当于 this.$emit</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child子级组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>msg:&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h3&gt;count:&#123;&#123; count &#125;&#125;&lt;/h3&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;emitXxx&quot;</span>&gt;</span>分发事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: [<span class="string">&quot;msg&quot;</span>],</span></span><br><span class="line"><span class="javascript">    <span class="attr">emits</span>: [<span class="string">&quot;fn&quot;</span>], <span class="comment">// 可选的, 声明了更利于程序员阅读, 且可以对分发的事件数据进行校验</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// beforeCreate() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(&#x27;beforeCreate执行了&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 界面渲染完毕</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// mounted() &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// setup(props,context) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// props参数,是一个对象,里面有父级组件向子级组件传递的数据,并且是在子级组件中使用props接收到的所有的属性</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 包含props配置声明且传入了的所有属性的对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(props.msg)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(context.attrs)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(context.emit)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// context参数,是一个对象,里面有attrs对象(获取当前组件标签上的所有的属性的对象,但是该属性是在props中没有声明接收的所有的尚需经的对象),emit方法(分发事件的),slots对象(插槽)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 包含没有在props配置中声明的属性的对象, 相当于 this.$attrs</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(context.attrs.msg2)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(&#x27;=============&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;setup执行了&quot;</span>, <span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> showMsg1 = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;setup中的showMsg1方法&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 按钮的点击事件的回调函数</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">emitXxx</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// context.emit(&#x27;xxx&#x27;,&#x27;++&#x27;)</span></span></span><br><span class="line"><span class="javascript">        emit(<span class="string">&quot;fn&quot;</span>, <span class="string">&quot;++&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        showMsg1,</span></span><br><span class="line"><span class="javascript">        emitXxx</span></span><br><span class="line"><span class="javascript">        <span class="comment">// setup中一般都是返回一个对象,对象中的属性和方法都可以在html模版中直接使用</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     count: 10,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// // 界面渲染后的生命周期回调</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// mounted() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   console.log(this)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// // 方法的</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// methods: &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   showMsg2() &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(&#x27;methods中的showMsg方法&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li>作用: 定义一个数据的响应式</li><li>语法: const xxx = ref(initValue):<ul><li>创建一个包含响应式数据的引用(reference)对象</li><li>js 中操作数据: xxx.value</li><li>模板中操作数据: 不需要.value</li></ul></li><li>一般用来定义一个基本类型的响应式数据</li></ul><p>更新页面数量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>setup和ref的基本使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateCount&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt; script lang = <span class="string">&quot;ts&quot;</span> &gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        defineComponent,</span><br><span class="line">        ref</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">    <span class="comment">// 需求:页面打开后可以直接看到一个数据,点击按钮后,该数据可以发生变化</span></span><br><span class="line">    <span class="comment">// vue2的方式实现</span></span><br><span class="line">    <span class="comment">// data() &#123;</span></span><br><span class="line">    <span class="comment">//   return &#123;</span></span><br><span class="line">    <span class="comment">//     count: 0, // 属性</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// methods: &#123;</span></span><br><span class="line">    <span class="comment">//   updateCount() &#123; // 方法</span></span><br><span class="line">    <span class="comment">//     this.count++</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// vue3的方式实现</span></span><br><span class="line">    <span class="comment">// setup是组合API的入口函数</span></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;第一次&#x27;)</span></span><br><span class="line">        <span class="comment">// 变量</span></span><br><span class="line">        <span class="comment">// let count = 0 // 此时的数据并不是响应式的数据(响应式数据:数据变化,页面跟着渲染变化)</span></span><br><span class="line">        <span class="comment">// ref是一个函数,作用:定义一个响应式的数据,返回的是一个Ref对象,对象中有一个value属性,如果需要对数据进行操作,需要使用该Ref对象调用value属性的方式进行数据的操作</span></span><br><span class="line">        <span class="comment">// html模版中是不需要使用.value属性的写法</span></span><br><span class="line">        <span class="comment">// 一般用来定义一个基本类型的响应式数据</span></span><br><span class="line">        <span class="comment">// count 的类型 Ref类型</span></span><br><span class="line">        <span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(count);</span><br><span class="line">        <span class="comment">// 方法</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">updateCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;=====&quot;</span>);</span><br><span class="line">            <span class="comment">// 报错的原因:count是一个Ref对象,对象是不能进行++的操作</span></span><br><span class="line">            <span class="comment">// count++</span></span><br><span class="line">            count.value++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回的是一个对象</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 属性</span></span><br><span class="line">            count,</span><br><span class="line">            <span class="comment">// 方法</span></span><br><span class="line">            updateCount,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;); &lt;</span><br><span class="line">/script&gt;</span><br></pre></td></tr></table></figure><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li>作用: 定义多个数据的响应式</li><li>const proxy = reactive(obj): 接收一个普通对象然后返回该普通对象的响应式代理器对象</li><li>响应式转换是“深层的”：会影响对象内部所有嵌套的属性</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据都是响应式的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>reactive的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>名字:&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄:&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>性别:&#123;&#123; user.gender &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>媳妇:&#123;&#123; user.wife &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求:显示用户的相关信息,点击按钮,可以更新用户的相关信息数据 /* reactive 作用:</span></span><br><span class="line">定义多个数据的响应式</span><br><span class="line"><span class="keyword">const</span> proxy = reactive(obj):</span><br><span class="line">    接收一个普通对象然后返回该普通对象的响应式代理器对象</span><br><span class="line">响应式转换是“ 深层的”： 会影响对象内部所有嵌套的属性 内部基于 ES6 的 <span class="built_in">Proxy</span></span><br><span class="line">实现， 通过代理对象操作源对象内部数据都是响应式的 * / &lt;</span><br><span class="line">script lang = <span class="string">&quot;ts&quot;</span> &gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        defineComponent,</span><br><span class="line">        reactive</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">            <span class="attr">wife</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;小甜甜&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">                <span class="attr">cars</span>: [<span class="string">&quot;奔驰&quot;</span>, <span class="string">&quot;宝马&quot;</span>, <span class="string">&quot;奥迪&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 把数据变成响应式的数据</span></span><br><span class="line">        <span class="comment">// 返回的是一个Proxy的代理对象,被代理的目标对象就是obj对象</span></span><br><span class="line">        <span class="comment">// user现在是代理对象,obj是目标对象</span></span><br><span class="line">        <span class="comment">// user对象的类型是Proxy</span></span><br><span class="line">        <span class="keyword">const</span> user = reactive &lt; any &gt; (obj); <span class="comment">//Proxy对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(user);</span><br><span class="line">        <span class="keyword">const</span> updateUser = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//只能使用代理对象的方式来更新数据(响应式数据)</span></span><br><span class="line">            user.name = <span class="string">&quot;小工&quot;</span>;</span><br><span class="line">            user.wife.cars[<span class="number">3</span>] = <span class="string">&quot;奥拓&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            updateUser,</span><br><span class="line">            user,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;); &lt;</span><br><span class="line">/script&gt;</span><br></pre></td></tr></table></figure><p><code>响应式的原理</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>reactive的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>名字:&#123;&#123; proxyUser.name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄:&#123;&#123; proxyUser.age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>性别:&#123;&#123; proxyUser.gender &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>媳妇:&#123;&#123; proxyUser.wife &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//定义接口</span></span></span><br><span class="line"><span class="javascript">      interface User &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: string;</span></span><br><span class="line"><span class="javascript">        age: number;</span></span><br><span class="line"><span class="javascript">        wife: &#123;</span></span><br><span class="line"><span class="javascript">          name?: string;</span></span><br><span class="line"><span class="javascript">          age: number;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        gender?: string;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//[proppName:string]:any;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 目标对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> user: User = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;佐助&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">wife</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;小樱&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">age</span>: <span class="number">19</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把目标对象变成代理对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 参数1:user----&gt;target目标对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 参数2:handler----&gt;处理器对象,用来监视数据,及数据的操</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> proxyUser = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取目标对象的某个属性值</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;get方法调用了&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 修改目标对象的属性值/为目标对象添加新的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">target, prop, val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;set方法调用了&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, val);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 删除目标对象上的某个属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, prop</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&quot;delete方法调用了&quot;</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">//页面不会更新响应式数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> updateUser = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(proxyUser.name);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过代理对象更新目标对象上的某个属性值</span></span></span><br><span class="line"><span class="javascript">        proxyUser.name = <span class="string">&quot;鸣人&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(proxyUser);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过代理对象向目标对象中添加一个新的属性</span></span></span><br><span class="line"><span class="javascript">        proxyUser.gender = <span class="string">&quot;男&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">delete</span> proxyUser.gender;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 更新目标对象中的某个属性对象中的属性值</span></span></span><br><span class="line"><span class="javascript">        proxyUser.wife.name = <span class="string">&quot;雏田&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        proxyUser,</span></span><br><span class="line"><span class="javascript">        updateUser</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="reactive-与-ref-细节"><a href="#reactive-与-ref-细节" class="headerlink" title="reactive 与 ref-细节"></a>reactive 与 ref-细节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>reactive和ref的细节问题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m1:&#123;&#123; m1 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m2:&#123;&#123; m2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m3:&#123;&#123; m3 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 是Vue3的 composition API中2个最重要的响应式API(ref和reactive)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ref用来处理基本类型数据, reactive用来处理对象(递归深度响应式)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果用ref对象/数组, 内部会自动将对象/数组转换为reactive的代理对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ref内部: 通过给value属性添加getter/setter来实现对数据的劫持</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// reactive内部: 通过使用Proxy来实现对对象内部所有数据的劫持, 并通过Reflect操作对象内部数据</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ref的数据操作: 在js中要.value, 在模板中不需要(内部解析模板时会自动添加.value)</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 通过ref的方式设置的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m1 = ref(<span class="string">&quot;abc&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m2 = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">wife</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;小红&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// ref也可以传入对象吗</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m3 = ref(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">wife</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;小红&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更新数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// ref中如果放入的是一个对象,那么是经过了reactive的处理,形成了一个Proxy类型的对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(m3);</span></span><br><span class="line"><span class="javascript">        m1.value += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        m2.wife.name += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// m3.value.name += &#x27;===&#x27;</span></span></span><br><span class="line"><span class="javascript">        m3.value.wife.name += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(m3.value.wife);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        m1,</span></span><br><span class="line"><span class="javascript">        m2,</span></span><br><span class="line"><span class="javascript">        m3,</span></span><br><span class="line"><span class="javascript">        update</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="watch-和-watchEffect"><a href="#watch-和-watchEffect" class="headerlink" title="watch 和 watchEffect"></a>watch 和 watchEffect</h2><ul><li><p>computed 函数:</p><ul><li>与 computed 配置功能一致</li><li>只有 getter</li><li>有 getter 和 setter</li></ul></li><li><p>watch 函数</p><ul><li>与 watch 配置功能一致</li><li>监视指定的一个或多个响应式数据, 一旦数据变化, 就自动执行监视回调</li><li>默认初始时不执行回调, 但可以通过配置 immediate 为 true, 来指定初始时立即执行第一次</li><li>通过配置 deep 为 true, 来指定深度监视</li></ul></li><li><p>watchEffect 函数</p><ul><li>不用直接指定要监视的数据, 回调函数中使用的哪些响应式数据就监视哪些响应式数据</li><li>默认初始时就会执行第一次, 从而可以收集需要监视的数据</li><li>监视数据发生变化时回调</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>计算属性和监视<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>姓名操作<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    姓氏:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓氏&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;user.firstName&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    名字:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;user.lastName&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>计算属性和监视的演示<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    姓名1:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;显示姓名1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;fullName1&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    姓名2:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;显示姓名2&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;fullName2&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    姓名3:<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;显示姓名3&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">&quot;fullName3&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="javascript">    defineComponent,</span></span><br><span class="line"><span class="javascript">    reactive,</span></span><br><span class="line"><span class="javascript">    computed,</span></span><br><span class="line"><span class="javascript">    watch,</span></span><br><span class="line"><span class="javascript">    ref,</span></span><br><span class="line"><span class="javascript">    watchEffect</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义一个响应式对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> user = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 姓氏</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">firstName</span>: <span class="string">&quot;东方&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 名字</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">lastName</span>: <span class="string">&quot;不败&quot;</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 通过计算属性的方式,实现第一个姓名的显示</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// vue3中的计算属性</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算属性的函数中如果只传入一个回调函数,表示的是get</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第一个姓名:</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 返回的是一个Ref类型的对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fullName1 = computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> user.firstName + <span class="string">&quot;_&quot;</span> + user.lastName;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第二个姓名:</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fullName2 = computed(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> user.firstName + <span class="string">&quot;_&quot;</span> + user.lastName;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">val: string</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(&#x27;=====&#x27;,val)</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> names = val.split(<span class="string">&quot;_&quot;</span>);</span></span><br><span class="line"><span class="javascript">          user.firstName = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">          user.lastName = names[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第三个姓名:</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> fullName3 = ref(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视----监视指定的数据</span></span></span><br><span class="line"><span class="javascript">      watch(</span></span><br><span class="line"><span class="javascript">        user,</span></span><br><span class="line"><span class="javascript">        <span class="function">(<span class="params">&#123; firstName, lastName &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          fullName3.value = firstName + <span class="string">&quot;_&quot;</span> + lastName;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      );</span></span><br><span class="line"><span class="javascript">      <span class="comment">// immediate 默认会执行一次watch,deep 深度监视</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视,不需要配置immediate,本身默认就会进行监视,(默认执行一次)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// watchEffect(() =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   fullName3.value = user.firstName + &#x27;_&#x27; + user.lastName</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视fullName3的数据,改变firstName和lastName</span></span></span><br><span class="line"><span class="javascript">      watchEffect(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> names = fullName3.value.split(<span class="string">&quot;_&quot;</span>);</span></span><br><span class="line"><span class="javascript">        user.firstName = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        user.lastName = names[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// watch---可以监视多个数据的</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// watch([user.firstName,user.lastName,fullName3],()=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   // 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   console.log(&#x27;====&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 当我们使用watch监视非响应式的数据的时候,代码需要改一下</span></span></span><br><span class="line"><span class="javascript">      watch([<span class="function">() =&gt;</span> user.firstName, <span class="function">() =&gt;</span> user.lastName, fullName3], <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里的代码就没有执行,fullName3是响应式的数据,但是,user.firstName,user.lastName不是响应式的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;====&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        user,</span></span><br><span class="line"><span class="javascript">        fullName1,</span></span><br><span class="line"><span class="javascript">        fullName2,</span></span><br><span class="line"><span class="javascript">        fullName3</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><strong>生命周期 svg</strong></p><svg width="838" height="1388" xmlns="http://www.w3.org/2000/svg" fill="none" font-family="Inter, Roboto, sans-serif" font-size="14" text-anchor="middle">  <g transform="translate(283 63)">    <path d="M131 66v35h6l-7 14-7-14h6v-35h2z" fill="#9AA9B2"/>    <rect stroke="#2F679A" fill="#3E6B94" x="0.5" y="0.5" width="259" height="66" rx="8"/>    <text x="130" y="24.5" fill="#FFF" dominant-baseline="middle">      app = Vue.<tspan fill="#FFB196" dominant-baseline="middle">createApp</tspan>(<tspan fill="#39DD95" dominant-baseline="middle">options</tspan>)    </text>    <text x="130" y="43" fill="#FFF" dominant-baseline="middle">      app.<tspan fill="#FFB196" dominant-baseline="middle">mount</tspan>(<tspan fill="#39DD95" dominant-baseline="middle">el</tspan>)    </text>  </g>  <g transform="translate(316 178)">    <path d="M98 58v46h6l-7 14-7-14h6v-46h2z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="193" height="58" rx="8"/>    <text x="97" y="20.5" fill="#FFF" dominant-baseline="middle">Init</text>    <text x="97" y="39" fill="#FFF" dominant-baseline="middle">events &amp; lifecycle</text>  </g>  <g transform="translate(73 235)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeCreate</text>  </g>  <g transform="translate(316 296)">    <path d="M98 58v46h6l-7 14-7-14h6v-46h2z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="193" height="58" rx="8"/>    <text x="97" y="20.5" fill="#FFF" dominant-baseline="middle">Init</text>    <text x="97" y="39" fill="#FFF" dominant-baseline="middle">injections &amp; reactivity</text>  </g>  <g transform="translate(73 353)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">created</text>  </g>  <g transform="translate(317 414)">    <path d="M-45 53v52h6l-7 14-7-14h6v-54h286v54h6l-7 14-7-14h6v-52z" fill="#9AA9B2"/>    <polygon points="96,0.5 192,52 96,103.5 0,52" stroke="#F2781E" fill="#FF8228"/>    <text fill="#FFF" x="96" y="33.5" dominant-baseline="middle">Has</text>    <text fill="#FFF" x="96" y="52" dominant-baseline="middle">“template”</text>    <text fill="#FFF" x="96" y="70.5" dominant-baseline="middle">option?</text>    <text fill="#8E9EA9" x="-58.5" y="66.5" text-anchor="end" dominant-baseline="middle">YES</text>    <text fill="#8E9EA9" x="250" y="66.5" text-anchor="start" dominant-baseline="middle">NO</text>  </g>  <g transform="translate(167 533)">    <path d="M103 58h2v44h282v-44h2v46h-142v54h6l-7 14l-7-14h6v-54h-142z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="207" height="58" rx="8"/>    <text fill="#FFF" x="104" y="20.5" dominant-baseline="middle">Compile template</text>    <text fill="#FFF" x="104" y="39" dominant-baseline="middle">into render function <tspan fill="#F6DA72" dominant-baseline="middle">*</tspan></text>    <g transform="translate(284 0)">      <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="207" height="58" rx="8"/>      <text fill="#FFF" x="104" y="20.5" dominant-baseline="middle">Compile el’s innerHTML</text>      <text fill="#FFF" x="104" y="39" dominant-baseline="middle">as template <tspan fill="#F6DA72" dominant-baseline="middle">*</tspan></text>    </g>  </g>  <g transform="translate(73 639)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeMount</text>  </g>  <g transform="translate(316 705)">    <path d="M98 58v77h6l-7 14-7-14h6v-77h2z" fill="#9AA9B2"/>    <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="193" height="58" rx="8"/>    <text x="97" y="20.5" fill="#FFF" dominant-baseline="middle">Create app.$el and</text>    <text x="97" y="39" fill="#FFF" dominant-baseline="middle">append it to el</text>  </g>  <g transform="translate(73 777)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">mounted</text>  </g>  <g>    <g transform="translate(651.5 802.363) rotate(140 0 0)">      <path d="M14 0v14l-14-7l14-7z" fill="#DB5B62"/>      <line x1="60" y1="7" x2="15" y2="7" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    </g>    <g transform="translate(619 747)">      <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>      <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeUpdate</text>    </g>    <g transform="translate(642.5 1008.363) rotate(220 0 0)">      <path d="M14 0v14l-14-7l14-7z" fill="#DB5B62"/>      <line x1="60" y1="7" x2="15" y2="7" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    </g>    <g transform="translate(619 1003)">      <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>      <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">updated</text>    </g>    <path transform="translate(430 803)" stroke="#8999A4" stroke-width="2" stroke-dasharray="4" stroke-dashoffset="6" d="M147 16a95 95,0,1,1,-102 0"/>    <g transform="translate(539 860)">      <rect stroke="#23AC70" fill="#3AB881" x="0.5" y="0.5" width="141" height="77" rx="8"/>      <text x="71" y="20.5" fill="#FFF" dominant-baseline="middle">Virtual DOM</text>      <text x="71" y="39" fill="#FFF" dominant-baseline="middle">re-rendered</text>      <text x="71" y="57.5" fill="#FFF" dominant-baseline="middle">and patch</text>    </g>    <g transform="translate(526 803)">      <text x="0" y="0" fill="#8E9EA9" dominant-baseline="middle">when data</text>      <text x="0" y="18.5" fill="#8E9EA9" dominant-baseline="middle">changes</text>    </g>  </g>  <g transform="translate(366 854)">    <circle stroke="#DC424C" fill="#DB5860" cx="47" cy="47" r="46.5"/>    <text x="47" y="48" fill="#FFF" dominant-baseline="middle">Mounted</text>    <path stroke="#9AA9B2" stroke-width="2" stroke-dasharray="3" d="M47 96v33"/>  </g>  <g transform="translate(355 947)">    <text x="58" y="55" fill="#8E9EA9" dominant-baseline="middle">when</text>    <text x="58" y="73.5" fill="#8E9EA9" dominant-baseline="middle">app.<tspan fill="#DB5B62" dominant-baseline="middle">unmount</tspan>()</text>    <text x="56" y="92" fill="#8E9EA9" dominant-baseline="middle">is called</text>    <path stroke="#9AA9B2" stroke-width="2" stroke-dasharray="3" d="M58 107v51"/>    <path d="M51 159l7 14 7-14z" fill="#9AA9B2"/>  </g>  <g transform="translate(73 1056)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">beforeUnmount</text>  </g>  <g transform="translate(73 1150)">    <path d="M160 18v14l-14-7l14-7z" fill="#DB5B62"/>    <line x1="338" y1="25" x2="161" y2="25" stroke="#DB5B62" stroke-width="2" stroke-dasharray="3"/>    <rect stroke="#DB5B62" stroke-width="2" x="1" y="1" width="144" height="48" rx="8"/>    <text x="73" y="25.5" fill="#DB5B62" dominant-baseline="middle">unmounted</text>  </g>  <g transform="translate(359 1120)">    <circle stroke="#DC424C" fill="#DB5860" cx="54" cy="54" r="53.5"/>    <text x="54" y="55" fill="#FFF" dominant-baseline="middle">Unmounted</text>  </g>  <g transform="translate(413 1299.5)">    <text x="0" y="0" fill="#848484" dominant-baseline="middle">* Template compilation is performed ahead-of-time if using</text>    <text x="0" y="18.5" fill="#848484" dominant-baseline="middle">a build step, e.g., with single-file components.</text>  </g></svg><p><img src="/image/vue3/lifecycle.png" alt="生命周期"></p><p><a href="https://blog.csdn.net/qq_42445025/article/details/121978510">生命周期</a></p><p><strong>与 2.x 版本生命周期相对应的组合式 API</strong></p><ul><li><code>beforeCreate</code> -&gt; 使用 <code>setup()</code></li><li><code>created</code> -&gt; 使用 <code>setup()</code></li><li><code>beforeMount</code> -&gt; <code>onBeforeMount</code></li><li><code>mounted</code> -&gt; <code>onMounted</code></li><li><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li><li><code>updated</code> -&gt; <code>onUpdated</code></li><li><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code></li><li><code>destroyed</code> -&gt; <code>onUnmounted</code></li><li><code>errorCaptured</code> -&gt; <code>onErrorCaptured</code></li></ul><p><strong>新增的钩子函数</strong></p><p>组合式 API 还提供了以下调试钩子函数：</p><ul><li>onRenderTracked</li><li>onRenderTriggered</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child子级组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>msg:&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="javascript">    defineComponent,</span></span><br><span class="line"><span class="javascript">    ref,</span></span><br><span class="line"><span class="javascript">    onBeforeMount,</span></span><br><span class="line"><span class="javascript">    onMounted,</span></span><br><span class="line"><span class="javascript">    onBeforeUpdate,</span></span><br><span class="line"><span class="javascript">    onUpdated,</span></span><br><span class="line"><span class="javascript">    onBeforeUnmount,</span></span><br><span class="line"><span class="javascript">    onUnmounted</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue2.x中的生命周期钩子</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeCreate...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的created...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeMount...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的mounted...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeUpdate...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的updated...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue2.x中的beforeDestroy和destroyed这两个生命周期回调已经在vue3中改名了,所以,不能再使用了</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUnmount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的beforeUnmount...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">unmounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;2.x中的unmounted...&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的setup&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 响应式的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> msg = ref(<span class="string">&quot;abc&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 按钮点击事件的回调</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg.value += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      onBeforeMount(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onBeforeMount&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onMounted&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onBeforeUpdate(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onBeforeUpdate&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onUpdated(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onUpdated&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onBeforeUnmount&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      onUnmounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;3.0中的onUnmounted&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg,</span></span><br><span class="line"><span class="javascript">        update</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><p>自定义 hook 函数</p><ul><li><p>使用 Vue3 的组合 API 封装的可复用的功能函数</p></li><li><p>自定义 hook 的作用类似于 vue2 中的 mixin 技术</p></li><li><p>自定义 Hook 的优势: 很清楚复用功能代码的来源, 更清楚易懂</p></li><li><p>需求 1: 收集用户鼠标点击的页面坐标</p></li><li><p>收集用户鼠标点击的页面坐标</p></li></ul><p>useMousePosition.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeUnmount, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> y = ref(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击事件的回调函数</span></span><br><span class="line">  <span class="keyword">const</span> clickHandler = <span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    x.value = event.pageX;</span><br><span class="line">    y.value = event.pageY;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 页面已经加载完毕了,再进行点击的操作</span></span><br><span class="line">  <span class="comment">// 页面加载完毕的生命周期组合API</span></span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;click&quot;</span>, clickHandler);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 页面卸载之前的生命周期组合API</span></span><br><span class="line">  onBeforeUnmount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;click&quot;</span>, clickHandler);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x,</span><br><span class="line">    y</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>鼠标点击获取坐标<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>x:&#123;&#123; x &#125;&#125;,y:&#123;&#123; y &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>请求接口数据<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;loading&quot;</span>&gt;</span>正在加载中....<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-else-if</span>=<span class="string">&quot;errorMsg&quot;</span>&gt;</span>错误信息:&#123;&#123; errorMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;&#123; addressData.id &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>address:&#123;&#123; addressData.address &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>distance:&#123;&#123; addressData.distance &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;item in data&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>id:&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>title:&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>price:&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> useMousePosition <span class="keyword">from</span> <span class="string">&quot;./useMousePosition&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> useRequest <span class="keyword">from</span> <span class="string">&quot;./useRequest&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义接口,约束对象的类型</span></span></span><br><span class="line"><span class="javascript">  interface AddressData &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">id</span>: number;</span></span><br><span class="line"><span class="javascript">    address: string;</span></span><br><span class="line"><span class="javascript">    distance: string;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  interface ProductsData &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">id</span>: string;</span></span><br><span class="line"><span class="javascript">    title: string;</span></span><br><span class="line"><span class="javascript">    price: number;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//1.鼠标坐标</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition();</span></span><br><span class="line"><span class="javascript">      <span class="comment">//2.自定义数据获取</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; <span class="attr">data</span>: addressData &#125; =</span></span><br><span class="line"><span class="javascript">        useRequest&lt;AddressData&gt;(<span class="string">&quot;/data/address.json&quot;</span>); <span class="comment">// 获取对象数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 数组对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; loading, data, errorMsg &#125; = useRequest&lt;ProductsData[]&gt;(</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;/data/products.json&quot;</span></span></span><br><span class="line"><span class="javascript">      ); <span class="comment">// 获取数组数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 监视</span></span></span><br><span class="line"><span class="javascript">      watch(data, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (data.value) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(data.value.length);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        x,</span></span><br><span class="line"><span class="javascript">        y,</span></span><br><span class="line"><span class="javascript">        loading,</span></span><br><span class="line"><span class="javascript">        data,</span></span><br><span class="line"><span class="javascript">        addressData,</span></span><br><span class="line"><span class="javascript">        errorMsg</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>利用 TS 泛型强化类型检查</p></li><li><p>需求 2: 封装发 ajax 请求的 hook 函数</p><p>useRequest.ts</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">// 发送ajax的请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">url: string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 加载的状态</span></span><br><span class="line">  <span class="keyword">const</span> loading = ref(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 请求成功的数据</span></span><br><span class="line">  <span class="keyword">const</span> data = (ref &lt; T) | (<span class="literal">null</span> &gt; <span class="literal">null</span>); <span class="comment">// 坑</span></span><br><span class="line">  <span class="comment">// 错误信息</span></span><br><span class="line">  <span class="keyword">const</span> errorMsg = ref(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="comment">// 发送请求</span></span><br><span class="line">  axios</span><br><span class="line">    .get(url)</span><br><span class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 改变加载状态</span></span><br><span class="line">      loading.value = <span class="literal">false</span>;</span><br><span class="line">      data.value = response.data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 改变加载状态</span></span><br><span class="line">      loading.value = <span class="literal">false</span>;</span><br><span class="line">      errorMsg.value = error.message || <span class="string">&quot;未知错误&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    loading,</span><br><span class="line">    data,</span><br><span class="line">    errorMsg</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><ul><li>把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</li><li>应用: 当从合成函数返回响应式对象时，toRefs 非常有用，这样消费组件就可以在不丢失响应式的情况下对返回的对象进行分解使用</li><li>问题: reactive 对象取出的所有属性值都是非响应式的</li><li>解决: 利用 toRefs 可以将一个响应式 reactive 对象的所有原始属性转换为响应式的 ref 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>toRefs的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h3&gt;name:&#123;&#123; state.name &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">  &lt;h3&gt;age:&#123;&#123; state.age &#125;&#125;&lt;/h3&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>name:&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>name2:&#123;&#123; name2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age2:&#123;&#123; age2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name2</span>: <span class="string">&quot;自来也&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">age2</span>: <span class="number">47</span></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      ...toRefs(state)</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;自来也&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">47</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// toRefs可以把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// const state2 = toRefs(state)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; name, age &#125; = toRefs(state);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(state2)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定时器,更新数据,(如果数据变化了,界面也会随之变化,肯定是响应式的数据)</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state.name += &#x27;==&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.name.value+=&#x27;===&#x27;</span></span></span><br><span class="line"><span class="javascript">        name.value += <span class="string">&quot;===&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;======&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; name2, age2 &#125; = useFeatureX();</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 下面的方式不行啊</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...state // 不是响应式的数据了----&gt;&#123;name:&#x27;自来也&#x27;,age:47&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// ...state2  toRefs返回来的对象</span></span></span><br><span class="line"><span class="javascript">        name,</span></span><br><span class="line"><span class="javascript">        age,</span></span><br><span class="line"><span class="javascript">        name2,</span></span><br><span class="line"><span class="javascript">        age2</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ref-获取元素"><a href="#ref-获取元素" class="headerlink" title="ref 获取元素"></a>ref 获取元素</h2><p>利用 ref 函数获取组件中的标签元素</p><p>功能需求: 让输入框自动获取焦点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ref的另一个作用:可以获取页面中的元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputRef&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 需求:当页面加载完毕后,页面中的文本框可以直接获取焦点(自动获取焦点)</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 默认是空的,页面加载完毕,说明组件已经存在了,获取文本框元素</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> inputRef = ref&lt;HTMLElement | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面加载后的生命周期组合API</span></span></span><br><span class="line"><span class="javascript">      onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        inputRef.value &amp;&amp; inputRef.value.focus(); <span class="comment">// 自动获取焦点</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        inputRef</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive : 只处理了对象内最外层属性的响应式(也就是浅响应式)</p></li><li><p>shallowRef: 只处理了 value 的响应式, 不进行对象的 reactive 处理</p></li><li><p>什么时候用浅响应式呢?</p><ul><li>一般情况下使用 ref 和 reactive 即可</li><li>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive</li><li>如果有一个对象数据, 后面会产生新的对象来替换 ===&gt; shallowRef</li></ul></li></ul><p>shallowReactive 与 shallowRef<br>shallowReactive: 只处理了对象内最外层属性的响应式(也就是浅响应式)<br>shallowRef: 只处理了 value 的响应式, 不进行对象的 reactive 处理<br>总结:<br>reactive 与 ref 实现的是深度响应式, 而 shallowReactive 与 shallowRef 是浅响应式<br>什么时候用浅响应式呢?<br>一般情况下使用 ref 和 reactive 即可,<br>如果有一个对象数据, 结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive<br>如果有一个对象数据, 后面会产生新的对象来替换 ===&gt; shallowRef</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m1: &#123;&#123;m1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m2: &#123;&#123;m2&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m3: &#123;&#123;m3&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>m4: &#123;&#123;m4&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; reactive, ref, shallowReactive, shallowRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m1 = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">b</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">c</span>: <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m2 = shallowReactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">b</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">c</span>: <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m3 = ref(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">b</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">c</span>: <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> m4 = shallowRef(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">a</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">b</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">c</span>: <span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// m1.b.c += 1</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// m2.b.c += 1</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// m3.value.a += 1</span></span></span><br><span class="line"><span class="javascript">        m4.value.a += <span class="number">1</span>; <span class="comment">//不会更新视图</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        m1,</span></span><br><span class="line"><span class="javascript">        m2,</span></span><br><span class="line"><span class="javascript">        m3,</span></span><br><span class="line"><span class="javascript">        m4,</span></span><br><span class="line"><span class="javascript">        update</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul><li>readonly:<ul><li>深度只读数据</li><li>获取一个对象 (响应式或纯对象) 或 ref 并返回原始代理的只读代理。</li><li>只读代理是深层的：访问的任何嵌套 property 也是只读的。</li></ul></li><li>shallowReadonly<ul><li>浅只读数据</li><li>创建一个代理，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换</li></ul></li><li>应用场景:<ul><li>在某些特定情况下, 我们可能不希望对数据进行更新的操作, 那就可以包装生成一个只读代理对象来读取数据, 而不能修改或删除</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>readonly和shallowReadonly<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>state:&#123;&#123; state2 &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, readonly, shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;佐助&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">name</span>: <span class="string">&quot;奔驰&quot;</span>,</span></span><br><span class="line"><span class="javascript">          <span class="attr">color</span>: <span class="string">&quot;yellow&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 只读的数据---深度的只读</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// const state2 = readonly(state)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 只读的数据---浅只读的</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state2 = shallowReadonly(state);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.name += &#x27;===&#x27;//不能操作</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.car.name += &#x27;==&#x27; //不能操作</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state2.name+=&#x27;===&#x27; // 不能操作</span></span></span><br><span class="line"><span class="javascript">        state2.car.name += <span class="string">&quot;===&quot;</span>; <span class="comment">//可以更新视图</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        state2,</span></span><br><span class="line"><span class="javascript">        update</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul><li>toRaw<ul><li>返回由 <code>reactive</code> 或 <code>readonly</code> 方法转换成响应式代理的普通对象。</li><li>这是一个还原方法，可用于临时读取，访问不会被代理/跟踪，写入时也不会触发界面更新。</li></ul></li><li>markRaw<ul><li>标记一个对象，使其永远不会转换为代理。返回对象本身</li><li>应用场景:<ul><li>有些值不应被设置为响应式的，例如复杂的第三方类实例或 Vue 组件对象。</li><li>当渲染具有不可变数据源的大列表时，跳过代理转换可以提高性能。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>toRaw和markRaw<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>state:&#123;&#123; state &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;testToRaw&quot;</span>&gt;</span>测试toRaw<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;testMarkRaw&quot;</span>&gt;</span>测试markRaw<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, markRaw, reactive, toRaw &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  interface UserInfo &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: string;</span></span><br><span class="line"><span class="javascript">    age: number;</span></span><br><span class="line"><span class="javascript">    likes?: string[];</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive&lt;UserInfo&gt;(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> testToRaw = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把代理对象变成了普通对象了,数据变化,界面不变化</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> user = toRaw(state);</span></span><br><span class="line"><span class="javascript">        user.name += <span class="string">&quot;==&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;哈哈,我好帅哦&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> testMarkRaw = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// state.likes = [&#x27;吃&#x27;, &#x27;喝&#x27;]</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// state.likes[0] += &#x27;==&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(state)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> likes = [<span class="string">&quot;吃&quot;</span>, <span class="string">&quot;喝&quot;</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// markRaw标记的对象数据,从此以后都不能再成为代理对象了</span></span></span><br><span class="line"><span class="javascript">        state.likes = markRaw(likes);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//不会更新视图</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (state.likes) &#123;</span></span><br><span class="line"><span class="javascript">            state.likes[<span class="number">0</span>] += <span class="string">&quot;=&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;定时器走起来&quot;</span>);</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        state,</span></span><br><span class="line"><span class="javascript">        testToRaw,</span></span><br><span class="line"><span class="javascript">        testMarkRaw</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><ul><li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li><li>需求: 使用 customRef 实现 debounce 的示例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CustomRef的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; keyword &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; customRef, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 自定义hook防抖的函数</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// value传入的数据,将来数据的类型不确定,所以,用泛型,delay防抖的间隔时间.默认是200毫秒</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, delay = <span class="number">200</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 准备一个存储定时器的id的变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timeOutId: number | any;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 返回数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 告诉Vue追踪数据</span></span></span><br><span class="line"><span class="javascript">          track();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">newValue: T</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 清理定时器</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearTimeout</span>(timeOutId);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="javascript">          timeOutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            value = newValue;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 告诉Vue更新界面</span></span></span><br><span class="line"><span class="javascript">            trigger();</span></span><br><span class="line"><span class="javascript">          &#125;, delay);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// const keyword = ref(&#x27;abc&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> keyword = useDebouncedRef(<span class="string">&quot;abc&quot;</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        keyword</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="toRef-子父组件通讯"><a href="#toRef-子父组件通讯" class="headerlink" title="toRef(子父组件通讯)"></a>toRef(子父组件通讯)</h2><ul><li>为源响应式对象上的某个属性创建一个 ref 对象, 二者内部操作的是同一个数据值, 更新时二者是同步的</li><li>区别 ref: 拷贝了一份新的数据值单独操作, 更新时相互不影响</li><li>应用: 当要将 某个 prop 的 ref 传递给复合函数时，toRef 很有用</li></ul><blockquote><p>Child 子级组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child子级组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>length:&#123;&#123; length &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, computed, Ref, toRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useGetLength</span>(<span class="params">age: Ref</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> age.value.toString().length;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;Child&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">age</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">type</span>: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">required</span>: <span class="literal">true</span> <span class="comment">// 必须的</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> length = useGetLength(toRef(props, <span class="string">&quot;age&quot;</span>));</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        length</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>父组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>toRef的使用及特点:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>state:&#123;&#123; state &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>money:&#123;&#123; money &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>更新数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineComponent, reactive, toRef, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./child.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      Child</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">money</span>: <span class="number">100</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把响应式数据state对象中的某个属性age变成了ref对象了</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> age = toRef(state, <span class="string">&quot;age&quot;</span>); <span class="comment">//子父组件公用数据</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 把响应式对象中的某个属性使用ref进行包装,变成了一个ref对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> money = ref(state.money);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(age)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// console.log(money)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> update = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 更新数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(&#x27;测试&#x27;)</span></span></span><br><span class="line"><span class="javascript">        state.age += <span class="number">2</span>; <span class="comment">//子父视图更新</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//age.value += 3 //子父视图更新</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//money.value += 10 //父视图更新</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        state,</span></span><br><span class="line"><span class="javascript">        age,</span></span><br><span class="line"><span class="javascript">        money,</span></span><br><span class="line"><span class="javascript">        update</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="customRef-1"><a href="#customRef-1" class="headerlink" title="customRef"></a>customRef</h2><ul><li>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li><li>需求: 使用 customRef 实现 debounce 的示例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CustomRef的使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; keyword &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; customRef, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 自定义hook防抖的函数</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// value传入的数据,将来数据的类型不确定,所以,用泛型,delay防抖的间隔时间.默认是200毫秒</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, delay = <span class="number">200</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 准备一个存储定时器的id的变量</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timeOutId: number | any;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 返回数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 告诉Vue追踪数据</span></span></span><br><span class="line"><span class="javascript">          track();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置数据的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">set</span>(<span class="params">newValue: T</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 清理定时器</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearTimeout</span>(timeOutId);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="javascript">          timeOutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            value = newValue;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 告诉Vue更新界面</span></span></span><br><span class="line"><span class="javascript">            trigger();</span></span><br><span class="line"><span class="javascript">          &#125;, delay);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> defineComponent(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// const keyword = ref(&#x27;abc&#x27;)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> keyword = useDebouncedRef(<span class="string">&quot;abc&quot;</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        keyword</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><ul><li><p><code>provide</code>和<code>inject</code>提供依赖注入，功能类似 2.x 的<code>provide/inject</code></p></li><li><p>实现跨层级组件(祖孙)间通信</p></li><li><p>代码糖</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    reactive,</span><br><span class="line">    provide</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;parent&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        childTest,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> person = reactive(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 给自己的后代组件传递数据</span></span><br><span class="line">        provide(<span class="string">&quot;person&quot;</span>, person);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            person,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    inject</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 函数的返回值就是我们所接收的值</span></span><br><span class="line">        <span class="keyword">let</span> person = inject(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            person,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="Fragment-片断"><a href="#Fragment-片断" class="headerlink" title="Fragment(片断)"></a>Fragment(片断)</h2><ul><li>在 Vue2 中: 组件必须有一个根标签</li><li>在 Vue3 中: 组件可以没有根标签, 内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Teleport-瞬移"><a href="#Teleport-瞬移" class="headerlink" title="Teleport(瞬移)"></a>Teleport(瞬移)</h2><ul><li>Teleport 提供了一种干净的方法, 让组件的 html 在父组件界面外的特定标签(很可能是 body)下插入显示</li></ul><p>ModalButton.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modalOpen = true&quot;</span>&gt;</span></span><br><span class="line">    Open full screen modal! (With teleport!)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;modalOpen&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        I&#x27;m a teleported modal! (My parent is &quot;body&quot;)</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modalOpen = false&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;modal-button&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> modalOpen = ref(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        modalOpen</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.modal</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.modal</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: white;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modal-button</span>&gt;</span><span class="tag">&lt;/<span class="name">modal-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> ModalButton <span class="keyword">from</span> <span class="string">&quot;./ModalButton.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      ModalButton</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Suspense-不确定的"><a href="#Suspense-不确定的" class="headerlink" title="Suspense(不确定的)"></a>Suspense(不确定的)</h2><ul><li>它们允许我们的应用程序在等待异步组件时渲染一些后备内容，可以让我们创建一个平滑的用户体验</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AsyncComp</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;AsyncAddress/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:fallback</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LOADING...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="javascript">异步组件 + Suspense组件</span></span></span><br><span class="line"><span class="comment"><span class="javascript">*/</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// import AsyncComp from &#x27;./AsyncComp.vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> AsyncAddress <span class="keyword">from</span> <span class="string">&quot;./AsyncAddress.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> AsyncComp = defineAsyncComponent(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./AsyncComp.vue&quot;</span>));</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">      AsyncComp,</span></span><br><span class="line"><span class="javascript">      AsyncAddress</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>AsyncComp.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>AsyncComp22<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;AsyncComp&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// return new Promise((resolve, reject) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   setTimeout(() =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//     resolve(&#123;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//       msg: &#x27;abc&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//     &#125;)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//   &#125;, 2000)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">msg</span>: <span class="string">&quot;abc&quot;</span></span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>AsyncAddress.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> result = <span class="keyword">await</span> axios.get(<span class="string">&quot;/data/address.json&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: result.data</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="createVNode"><a href="#createVNode" class="headerlink" title="createVNode"></a>createVNode</h2><ul><li>创建虚拟节点插入到对应元素中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; render, ref, createVNode, onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 元素Dom</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> here = ref();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建vnode节点</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> div = createVNode(<span class="string">&quot;div&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">class</span>: [<span class="string">&quot;className&quot;</span>],</span></span><br><span class="line"><span class="javascript">    <span class="attr">style</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">width</span>: <span class="string">&quot;100px&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">height</span>: <span class="string">&quot;100px&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">border</span>: <span class="string">&quot;1px solid black&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">onClick</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 渲染到对应元素</span></span></span><br><span class="line"><span class="javascript">    render(div, here.value);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-slot:</span>&#x27;插槽名&#x27;&gt;</span>我是插槽内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> #插槽名&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;插槽名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 孙组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;插槽名&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父级 --&gt;</span></span><br><span class="line">&lt;子组件 v-bind=&quot;$attrs&quot;&gt;&lt;/子组件&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;父级组件名&quot;</span>,</span><br><span class="line">  <span class="attr">inheritAttrs</span>: <span class="literal">true</span> <span class="comment">// 继承组件props等属性,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><blockquote><p>步骤</p></blockquote><ul><li><ol><li>安装<br><code>npm install vue-router@next --save</code></li></ol></li><li><ol start="2"><li>新建组件<br>在 components 文件下新建 vue 页面文件</li></ol></li><li><ol start="3"><li>在 src 目录下新建 router.ts 文件</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入vue-router</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> Reactive <span class="keyword">from</span> <span class="string">&quot;./components/reactive.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHashHistory(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/reactive&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: Reactive</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 导出router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p><code>注意</code></p><p>找不到模块“xxx.vue”或其相应的类型声明问题解决<br>在项目根目录或 src 文件夹下创建一个后缀为 .d.ts 的文件，并写入以下内容：<br>在 src 新建 vue.d.ts 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="built_in">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span> &#123;</span><br><span class="line">        App,</span><br><span class="line">        defineComponent</span><br><span class="line">    &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> component: ReturnType &lt; <span class="keyword">typeof</span> defineComponent &gt; &amp; &#123;</span><br><span class="line">        install(app: App): <span class="keyword">void</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>在入口文件 main.ts 中挂载使用 router</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>; <span class="comment">// 引入router</span></span><br><span class="line"><span class="comment">// createApp(App).mount(&#x27;#app&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(router); <span class="comment">//挂载使用router</span></span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><ol start="5"><li>在跟组件 App.vue 中使用路由</li></ol></li><li><p>视图</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>跳转</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/reative&quot;</span>&gt;</span>reative<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="导入-axios-时，报错"><a href="#导入-axios-时，报错" class="headerlink" title="导入 axios 时，报错"></a>导入 axios 时，报错</h2><p><span style="color:#fe2c24; ">Uncaught SyntaxError: The requested module ‘/@modules/axios/index.js’ does not provide an export named ‘default’</span></p><p>方法一<br>处理: 下载 axios 的位置必须在”dependencies”中而不能是 “devDependencies”</p><p>方法二</p><ol><li>将 vite 升级到了 vite2.x 版本</li><li>对应插件@vitejs/plugin-vue</li></ol><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;@vue/compiler-sfc&quot;</span>: <span class="string">&quot;^3.0.4&quot;</span>,</span><br><span class="line"><span class="attr">&quot;@vitejs/plugin-vue&quot;</span>: <span class="string">&quot;^2.3.3&quot;</span>,</span><br><span class="line"><span class="attr">&quot;vite&quot;</span>: <span class="string">&quot;^1.0.0-rc.13&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件配置<br>根目录新建 vite.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vue = <span class="built_in">require</span>(<span class="string">&quot;@vitejs/plugin-vue&quot;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [vue()]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue3学习</summary>
    
    
    
    <category term="vue" scheme="https://wecy-chen.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://wecy-chen.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="https://wecy-chen.github.io/2022/08/22/ts/"/>
    <id>https://wecy-chen.github.io/2022/08/22/ts/</id>
    <published>2022-08-22T01:42:38.310Z</published>
    <updated>2022-08-22T01:42:38.311Z</updated>
    
    <content type="html"><![CDATA[<!-- 图片路径/image/ts/ --><p><strong>TypeScript学习</strong></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>文档说明</p><ol><li> <a href="https://jkchao.github.io/typescript-book-chinese/typings/literals.html">学习地址</a>  </li><li><a href="https://24kcs.github.io/vue3_study/">快速上手</a></li><li><a href="https://www.typescriptlang.org/zh/play?ts=4.1.0-pr-40336-8#code/C4TwDgpgBAggJnAThAziqBeKBtFxECWAdgOYA0URArgLYBGEiAugNwBQAZlUQMbAEB7IlBQRg8JKhQAKAHTyAhohIoAXLATI0ASigBvNlCgB6YyIE1oPAXGgALRhENRrRFAIA2EWR4ElpSira7AC+bKLimlLSAEQAjDEUAEzBQA">代码测试</a></li><li>安装</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install -g typescript   安装</span><br><span class="line">&gt;tsc -v     查看版本Version <span class="number">4.6</span><span class="number">.4</span></span><br><span class="line">&gt;tsc --init  生成tsconfig.json配置文件</span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><blockquote><p>新建ts文件</p></blockquote><p>src/helloworld.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&#x27;Yee&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user))</span><br></pre></td></tr></table></figure><p><code>&gt;tsc helloworld.ts</code>  编译<br><code>&gt;node helloworld.js</code> 运行<br><code> hello,Yee</code> 打印</p><blockquote><p>vscode自动编译</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>). 生成配置文件tsconfig.json</span><br><span class="line">    tsc --init</span><br><span class="line"><span class="number">2</span>). 修改tsconfig.json配置</span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">false</span>,    </span><br><span class="line"><span class="number">3</span>). 启动监视任务: </span><br><span class="line">    终端 -&gt; 运行任务 -&gt; 监视tsconfig.json</span><br></pre></td></tr></table></figure><p>终端任务重用<br><img src="/image/ts/639_1.png" alt="e273c55cd0693cc35d379d5a6791b045.png"></p><p>如果还是失败,vscode编辑器要选择默认终端</p><p>配置中文提示<br>配送搜索 typescript local 设置成zh-CN</p><p><a href="https://jkchao.github.io/typescript-book-chinese/project/compilationContext.html#%E5%9F%BA%E7%A1%80">编译选项</a></p><h1 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h1><p> &gt; 基本语法<br> <br> <code> let 变量名: 数据类型 = 值</code></p><p> <br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> a2: number = <span class="number">0b1010</span>  <span class="comment">// 二进制</span></span><br><span class="line"><span class="comment">// 类型包括 :</span></span><br><span class="line"> <span class="comment">// number string undefined boolean object </span></span><br><span class="line"> <span class="comment">// any  任何变量</span></span><br></pre></td></tr></table></figure></p><h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><p>语法:<br> <code>let 变量名: 数据类型[] = [值1,值2,值3]</code><br>语法:<br> <code>let 变量名: Array&lt;数据类型&gt; = [值1,值2,值3]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> arr1: number[] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br></pre></td></tr></table></figure><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>枚举里面的每个数据值都可以叫元素,每个元素都有自己的编号,编号是从0开始的,依次的递增加1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  enum Color &#123;</span><br><span class="line">    red = <span class="number">1</span>,</span><br><span class="line">    green,</span><br><span class="line">    blue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个Color的枚举类型的变量来接收枚举的值</span></span><br><span class="line">  <span class="keyword">let</span> color: Color = Color.red</span><br><span class="line">  <span class="built_in">console</span>.log(color)  <span class="comment">//1 </span></span><br><span class="line">  <span class="built_in">console</span>.log(Color.red, Color.green, Color.blue) <span class="comment">// 1,2,3</span></span><br><span class="line">  <span class="built_in">console</span>.log(Color[<span class="number">3</span>]) <span class="comment">// &quot;blue&quot; </span></span><br></pre></td></tr></table></figure><blockquote><p>void 类型</p></blockquote><p>在函数声明的时候,小括号的后面使用:void,代表的是该函数没有任何的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">    <span class="comment">// return</span></span><br><span class="line">    <span class="comment">// return undefined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span> <span class="comment">//报错</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(showMsg())</span><br></pre></td></tr></table></figure><blockquote><p>object 类型</p></blockquote><p>定义一个函数,参数是object类型,返回值也是object类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params">obj: object</span>): <span class="title">object</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;卡卡西&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(getObj(<span class="built_in">String</span>))</span><br><span class="line">  <span class="comment">//function String() &#123; [native code] &#125; </span></span><br><span class="line">  <span class="comment">// &#123;&quot;name&quot;: &quot;卡卡西&quot;,&quot;age&quot;: 27 &#125; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>联合类型，类型断言，类型推断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类型断言(Type Assertion): 可以用来手动指定一个值的类型</span></span><br><span class="line"><span class="comment">语法:</span></span><br><span class="line"><span class="comment">    方式一: &lt;类型&gt;值</span></span><br><span class="line"><span class="comment">    方式二: 值 as 类型  tsx中只能用这种方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 需求: 定义一个函数得到一个字符串或者数值数据的长度 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">x: number | string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((x <span class="keyword">as</span> string).length) &#123;</span><br><span class="line">    <span class="keyword">return</span> (x <span class="keyword">as</span> string).length</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x.toString().length</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getLength(<span class="string">&#x27;abcd&#x27;</span>), getLength(<span class="number">1234</span>))</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是对象的状态(属性)和行为(方法)的抽象(描述)<br>接口:是一种类型,是一种规范,是一种规则,是一个能力,是一种约束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 需求: 创建人的对象, 需要对人的属性进行一定的约束</span></span><br><span class="line">  <span class="comment">// id是number类型, 必须有, 只读的</span></span><br><span class="line">  <span class="comment">// name是string类型, 必须有</span></span><br><span class="line">  <span class="comment">// age是number类型, 必须有</span></span><br><span class="line">  <span class="comment">// sex是string类型, 可以没有</span></span><br><span class="line">  <span class="comment">// 定义一个接口,该接口作为person对象的类型使用,限定或者是约束该对象中的属性数据</span></span><br><span class="line">  interface IPerson &#123;</span><br><span class="line">    <span class="comment">// readonly id是只读的,是number类型,const修饰属性,想要设置该属性是只读的,是不能使用的</span></span><br><span class="line">    readonly id:  number</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">    <span class="comment">// ? 可有可无的</span></span><br><span class="line">    sex?: string</span><br><span class="line"><span class="comment">//定义了任意属性取 string 类型的值</span></span><br><span class="line">[proppName:string]:any;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个对象,该对象的类型就是我定义的接口IPerson</span></span><br><span class="line">  <span class="keyword">const</span> person: IPerson = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小甜甜&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="comment">// sex这个属性没有也是可以的</span></span><br><span class="line">    <span class="comment">// sex: &#x27;女&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  <span class="comment">// id属性此时是可读可写</span></span><br><span class="line">  <span class="comment">// person.id = 100</span></span><br><span class="line">  person.sex=<span class="string">&#x27;女&#x27;</span></span><br><span class="line">  <span class="comment">// person.money = &#x27;123131&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br></pre></td></tr></table></figure><blockquote><p>函数类型</p></blockquote><p> 为了使用接口表示函数类型，我们需要给接口定义一个调用签名。</p><p>它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 函数类型:通过接口的方式作为函数的类型来使用</span></span><br><span class="line">  <span class="comment">// 定义一个接口,用来作为某个函数的类型使用</span></span><br><span class="line">  interface ISearchFunc &#123;</span><br><span class="line">    <span class="comment">// 定义一个调用签名</span></span><br><span class="line">    (source: string, <span class="attr">subString</span>: string): boolean</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个函数,该类型就是上面定义的接口</span></span><br><span class="line">  <span class="keyword">const</span> searchString: ISearchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">source: string, subString: string</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在source字符串中查找subString这个字符串</span></span><br><span class="line">    <span class="keyword">return</span> source.search(subString) &gt; -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用函数</span></span><br><span class="line">  <span class="built_in">console</span>.log(searchString(<span class="string">&#x27;哈哈,我又变帅了&#x27;</span>, <span class="string">&#x27;帅&#x27;</span>))</span><br><span class="line"><span class="comment">//&quot;Hello, Yee Huang&quot;</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>类类型(约束) </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个接口</span></span><br><span class="line">  interface IFly &#123;</span><br><span class="line">    <span class="comment">// 该方法没有任何的实现(方法中什么都没有)</span></span><br><span class="line">    <span class="comment">// fly()</span></span><br><span class="line">    <span class="attr">fly</span>:<span class="built_in">Function</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,这个类的类型就是上面定义的接口(实际上也可以理解为,IFly接口约束了当前的这个Person类)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">IFly</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现接口中的方法</span></span><br><span class="line">    <span class="function"><span class="title">fly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我会飞了,我是超人&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">  person.fly()   <span class="comment">//&quot;我会飞了,我是超人&quot;</span></span><br><span class="line">  <span class="comment">// 定义一个接口</span></span><br><span class="line">  interface ISwim &#123;</span><br><span class="line">    <span class="attr">swim</span>:<span class="built_in">Function</span></span><br><span class="line">    <span class="comment">// swim()</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,这个类的类型就是IFly和ISwim(当前这个类可以实现多个接口,一个类同时也可以被多个接口进行约束)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person2</span> <span class="title">implements</span> <span class="title">IFly</span>, <span class="title">ISwim</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">fly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我飞了2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">swim</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我会游泳啦2&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person2 = <span class="keyword">new</span> Person2()</span><br><span class="line">  person2.fly()  <span class="comment">//&quot;我飞了2&quot;</span></span><br><span class="line">  person2.swim()   <span class="comment">//&quot;我会游泳啦2&quot;</span></span><br><span class="line">  <span class="comment">// 总结: 类可以通过接口的方式,来定义当前这个类的类型</span></span><br><span class="line">  <span class="comment">// 类可以实现一个接口,类也可以实现多个接口,要注意,接口中的内容都要真正的实现</span></span><br><span class="line">  <span class="comment">// 定义了一个接口,继承其他的多个接口</span></span><br><span class="line">  interface IMyFlyAndSwim <span class="keyword">extends</span> IFly, ISwim &#123; &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,直接实现IMyFlyAndSwim这个接口</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person3</span> <span class="title">implements</span> <span class="title">IMyFlyAndSwim</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">fly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我飞了3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">swim</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我会游泳啦3&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> person3 = <span class="keyword">new</span> Person3()</span><br><span class="line">  person3.fly()   <span class="comment">//&quot;我飞了3&quot;</span></span><br><span class="line">  person3.swim()   <span class="comment">//我会游泳啦3</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 总结:接口和接口之间叫继承(使用的是extends关键字),类和接口之间叫实现(使用的是implements)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>建一个 User 类，它带有一个构造函数和一些公共字段。因为类的字段包含了接口所需要的字段，所以他们能很好的兼容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 类:可以理解为模版,通过模版可以实例化对象</span></span><br><span class="line"><span class="comment">// 面向对象的编程思想</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="attr">fullName</span>: string</span><br><span class="line">  <span class="attr">firstName</span>: string</span><br><span class="line">  <span class="attr">lastName</span>: string</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span> (<span class="params">firstName: string, lastName: string</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName = firstName</span><br><span class="line">    <span class="built_in">this</span>.lastName = lastName</span><br><span class="line">    <span class="built_in">this</span>.fullName = firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">  &#125;&#125;</span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">  <span class="attr">firstName</span>: string</span><br><span class="line">  <span class="attr">lastName</span>: string&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span> (<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + person.firstName + <span class="string">&#x27; &#x27;</span> + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;Yee&#x27;</span>, <span class="string">&#x27;Huang&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user)) <span class="comment">//&quot;Hello, Yee Huang&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>继承</p></blockquote><p> 继承:类与类之间的关系<br> 继承后类与类之间的叫法:<br>A类继承了B这个类,那么此时A类叫子类,B类叫基类<br> 子类—-&gt;派生类<br>基类—-&gt;超类(父类)<br>一旦发生了继承的关系,就出现了父子类的关系(叫法)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 定义一个类,作为基类(超类/父类)</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义属性</span></span><br><span class="line">    <span class="attr">name</span>: string <span class="comment">// 名字</span></span><br><span class="line">    <span class="attr">age</span>: number <span class="comment">// 年龄</span></span><br><span class="line">    <span class="attr">gender</span>: string <span class="comment">// 性别</span></span><br><span class="line">    <span class="comment">// 定义构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string=<span class="string">&#x27;小明&#x27;</span>, age: number=<span class="number">18</span>, gender: string=<span class="string">&#x27;男&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 更新属性数据</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">      <span class="built_in">this</span>.age = age</span><br><span class="line">      <span class="built_in">this</span>.gender = gender</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义实例方法</span></span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params">str: string</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`我是:<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,<span class="subst">$&#123;str&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,继承自Person</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string, age: number, gender: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 调用的是父类中的构造函数,使用的是super</span></span><br><span class="line">      <span class="built_in">super</span>(name, age, gender)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 可以调用父类中的方法</span></span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我是学生类中的sayHi方法&#x27;</span>)</span><br><span class="line">      <span class="comment">// 调用父类中的sayHi方法</span></span><br><span class="line">      <span class="built_in">super</span>.sayHi(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化Person</span></span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;大明明&#x27;</span>,<span class="number">89</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line">  person.sayHi(<span class="string">&#x27;嘎嘎&#x27;</span>)</span><br><span class="line">  <span class="comment">//打印: &quot;我是:大明明,嘎嘎&quot;</span></span><br><span class="line">  <span class="comment">// 实例化Student</span></span><br><span class="line">  <span class="keyword">const</span> stu = <span class="keyword">new</span> Student(<span class="string">&#x27;小甜甜&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">  stu.sayHi()</span><br><span class="line">  <span class="comment">//打印: &quot;我是学生类中的sayHi方法&quot;</span></span><br><span class="line">  <span class="comment">//打印: &quot;我是:小甜甜,哈哈&quot;</span></span><br><span class="line">  <span class="comment">// 总结:类和类之间如果要有继承关系,需要使用extends关键字</span></span><br><span class="line">  <span class="comment">// 子类中可以调用父类中的构造函数,使用的是super关键字(包括调用父类中的实例方法,也可以使用super)</span></span><br><span class="line">  <span class="comment">// 子类中可以重写父类的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>多态</p></blockquote><p>多态:父类型的引用指向了子类型的对象,不同类型的对象针对相同的方法,产生了不同的行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 定义一个父类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个属性</span></span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="comment">// 定义一个构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 更新属性值</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params">distance: number = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`跑了<span class="subst">$&#123;distance&#125;</span> 米这么远的距离`</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 调用父类的构造函数,实现子类中属性的初始化操作</span></span><br><span class="line">      <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法,重写父类中的实例方法</span></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params">distance: number = <span class="number">5</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`跑了<span class="subst">$&#123;distance&#125;</span> 米这么远的距离`</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 调用父类的构造函数,实现子类中属性的初始化操作</span></span><br><span class="line">      <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实例方法,重写父类中的实例方法</span></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params">distance: number = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`跑了<span class="subst">$&#123;distance&#125;</span> 米这么远的距离`</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化父类对象</span></span><br><span class="line">  <span class="keyword">const</span> ani: Animal = <span class="keyword">new</span> Animal(<span class="string">&#x27;动物&#x27;</span>)</span><br><span class="line">  ani.run() <span class="comment">//&quot;跑了0 米这么远的距离&quot;,  &quot;动物&quot;</span></span><br><span class="line">  <span class="comment">// 实例化子类对象</span></span><br><span class="line">  <span class="keyword">const</span> dog: Dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;大黄&#x27;</span>)</span><br><span class="line">  dog.run() <span class="comment">//&quot;跑了5 米这么远的距离&quot;,  &quot;大黄&quot;</span></span><br><span class="line">  <span class="comment">// 实例化子类对象</span></span><br><span class="line">  <span class="keyword">const</span> pig: Pig = <span class="keyword">new</span> Pig(<span class="string">&#x27;八戒&#x27;</span>)</span><br><span class="line">  pig.run() <span class="comment">//&quot;跑了10 米这么远的距离&quot;,  &quot;八戒&quot;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;===========&#x27;</span>)</span><br><span class="line">  <span class="comment">// 父类和子类的关系:父子关系,此时,父类类型创建子类的对象</span></span><br><span class="line">  <span class="keyword">const</span> dog1: Animal = <span class="keyword">new</span> Dog(<span class="string">&#x27;小黄&#x27;</span>)</span><br><span class="line">  dog1.run() <span class="comment">// &quot;跑了5 米这么远的距离&quot;,  &quot;小黄&quot;  </span></span><br><span class="line">  <span class="keyword">const</span> pig1: Animal = <span class="keyword">new</span> Pig(<span class="string">&#x27;小猪&#x27;</span>)</span><br><span class="line">  pig1.run() <span class="comment">//  &quot;跑了10 米这么远的距离&quot;,  &quot;小猪&quot;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;=============&#x27;</span>)</span><br><span class="line">  <span class="comment">// 该函数需要的参数是Animal类型的</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showRun</span>(<span class="params">ani: Animal</span>) </span>&#123;</span><br><span class="line">    ani.run()</span><br><span class="line">  &#125;</span><br><span class="line">  showRun(dog1) <span class="comment">//&quot;跑了5 米这么远的距离&quot;,  &quot;小黄&quot;</span></span><br><span class="line">  showRun(pig1) <span class="comment">//&quot;跑了10 米这么远的距离&quot;,  &quot;小猪&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>修饰符</p></blockquote><p>修饰符(类中的成员的修饰符):主要是描述类中的成员(属性,构造函数,方法)的可访问性<br>类中的成员都有自己的默认的访问修饰符,public<br>public修饰符—公共的,类中成员默认的修饰符,代表的是公共的,任何位置都可以访问类中的成员<br>private修饰符—私有的,类中的成员如果使用private来修饰,那么外部是无法访问这个成员数据的,当然,子类中也是无法访问该成员数据的<br>protected修饰符—-受保护的,类中的成员如果使用protected来修饰,那么外部是无法访问这个成员数据的,当然,子类中是可以访问该成员数据的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性 public 修饰了属性成员</span></span><br><span class="line">    <span class="comment">// public name: string</span></span><br><span class="line">    <span class="comment">// 属性 private 修饰了属性成员</span></span><br><span class="line">    <span class="comment">// private name: string</span></span><br><span class="line">    <span class="comment">// 属性protected 修饰了属性成员</span></span><br><span class="line">    protected name:string</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    public <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 更新属性</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    public <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;嗯,这个骨头真好吃&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">play</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;我就喜欢玩布娃娃&#x27;</span>,<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;大蛇丸&#x27;</span>)</span><br><span class="line">  <span class="comment">// 类的外部可以访问类中的属性成员</span></span><br><span class="line">  <span class="comment">// console.log(per.name)</span></span><br><span class="line">  per.eat()  <span class="comment">//&quot;嗯,这个骨头真好吃&quot;,  &quot;大蛇丸&quot;</span></span><br><span class="line">  <span class="keyword">const</span> stu = <span class="keyword">new</span> Student(<span class="string">&#x27;红豆&#x27;</span>)</span><br><span class="line">  stu.play() <span class="comment">//&quot;我就喜欢玩布娃娃&quot;,  &quot;红豆&quot;</span></span><br><span class="line">  <span class="comment">// console.log(stu.name)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>readonly修饰符</p></blockquote><p>readonly修饰符:首先是一个关键字,对类中的属性成员进行修饰,修饰后,该属性成员,就不能在外部被随意的修改了<br>构造函数中,可以对只读的属性成员的数据进行修改<br>如果构造函数中没有任何的参数,类中的属性成员此时已经使用readonly进行修饰了,那么外部也是不能对这个属性值进行更改的<br>构造函数中的参数可以使用readonly进行修饰,一旦修饰了,那么该类中就有了这个只读的成员属性了,外部可以访问,但是不能修改<br>构造函数中的参数可以使用public及privte和protected进行修饰,无论是哪个进行修饰,该类中都会自动的添加这么一个属性成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// readonly修饰类中的成员属性操作</span></span><br><span class="line">  <span class="comment">// 定义一个类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="comment">// readonly name: string=&#x27;大甜甜&#x27; // 初始值</span></span><br><span class="line">    readonly name: string</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string = <span class="string">&#x27;大甜甜&#x27;</span></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;考尼奇瓦&#x27;</span>, <span class="built_in">this</span>.name)</span><br><span class="line">      <span class="comment">// 类中的普通方法中,也是不能修改readonly修饰的成员属性值</span></span><br><span class="line">      <span class="comment">// this.name = &#x27;大甜甜&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;小甜甜&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  <span class="built_in">console</span>.log(person.name) <span class="comment">//小甜甜</span></span><br><span class="line"> <span class="comment">// 此时无法修改,因为name属性是只读的</span></span><br><span class="line">  person.name = <span class="string">&#x27;大甜甜&#x27;</span> <span class="comment">//报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.name)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 定义一个类型</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用readonly进行修饰后,那么该name参数可以叫参数属性</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用readonly进行修饰后,那么Person中就有了一个name的属性成员</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用readonly进行修饰后,外部也是无法修改类中的name属性成员值的</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">readonly name: string = <span class="string">&#x27;大甜甜&#x27;</span></span>)</span> &#123; <span class="comment">//public private protected</span></span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用public进行修饰后,那么Person类中就有了一个公共的name属性成员了</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用private进行修饰后,那么Person类中就有了一个私有的name属性成员了</span></span><br><span class="line">    <span class="comment">// 构造函数中的name参数,一旦使用protected进行修饰后,那么Person类中就有了一个受保护的name属性成员了(只能在本类和派生类中访问及使用)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;小甜甜&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  person.name = <span class="string">&#x27;佐助&#x27;</span> <span class="comment">//报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>存储器</p></blockquote><p>存取器:让我们可以有效的控制对 对象中的成员的访问,通过getters和setters来进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部可以传入姓氏和名字数据,同时使用set和get控制姓名的数据,外部也可以进行修改操作</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="attr">firstName</span>: string <span class="comment">// 姓氏</span></span><br><span class="line">    <span class="attr">lastName</span>: string <span class="comment">// 名字</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">firstName: string, lastName: string</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.firstName = firstName</span><br><span class="line">      <span class="built_in">this</span>.lastName = lastName</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 姓名的成员属性(外部可以访问,也可以修改)</span></span><br><span class="line">    <span class="comment">// 读取器----负责读取数据的</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;get中...&#x27;</span>)</span><br><span class="line">      <span class="comment">// 姓名====&gt;姓氏和名字的拼接</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置器----负责设置数据的(修改)</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;set中...&#x27;</span>)</span><br><span class="line">      <span class="comment">// 姓名----&gt;把姓氏和名字获取到重新的赋值给firstName和lastName</span></span><br><span class="line">      <span class="keyword">let</span> names = val.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;东方&#x27;</span>, <span class="string">&#x27;不败&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">  <span class="comment">// 获取该属性成员属性</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.fullName)</span><br><span class="line">  <span class="comment">// 设置该属性的数据</span></span><br><span class="line">  person.fullName = <span class="string">&#x27;诸葛_孔明&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(person.fullName)</span><br></pre></td></tr></table></figure><blockquote><p>静态成员</p></blockquote><p>静态成员:在类中通过static修饰的属性或者方法,那么就是静态的属性及静态的方法,也称之为:静态成员<br>静态成员在使用的时候是通过类名.的这种语法来调用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类中默认有一个内置的name属性,所以呢,此时会出现错误的提示信息</span></span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name1: string = <span class="string">&#x27;小甜甜&#x27;</span></span><br><span class="line">    <span class="comment">// 构造函数是不能通过static来进行修饰的</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 此时this是实例对象,name1是静态属性,不能通过实例对象直接调用静态属性来使用</span></span><br><span class="line">      <span class="comment">// this.name1 = name</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;萨瓦迪卡&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化对象</span></span><br><span class="line">  <span class="comment">// const person: Person = new Person()</span></span><br><span class="line">  <span class="comment">// 通过实例对象调用的属性(实例属性)</span></span><br><span class="line">  <span class="comment">// console.log(person.name1)</span></span><br><span class="line">  <span class="comment">// 通过实例对象调用的方法(实例方法)</span></span><br><span class="line">  <span class="comment">// person.sayHi()</span></span><br><span class="line">  <span class="comment">// 通过类名.静态属性的方式来访问该成员数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(Person.name1) <span class="comment">// &quot;小甜甜&quot;</span></span><br><span class="line">  <span class="comment">// 通过类名.静态属性的方式来设置该成员数据</span></span><br><span class="line">  Person.name1 = <span class="string">&#x27;佐助&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(Person.name1) <span class="comment">//&quot;佐助&quot;</span></span><br><span class="line">  <span class="comment">// 通过类名.静态方法的方式来调用内部的静态的方法</span></span><br><span class="line">  Person.sayHi() <span class="comment">// &quot;萨瓦迪卡&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>抽象类</p></blockquote><p>抽象类:包含抽象方法(抽象方法一般没有任何的具体内容的实现),也可以包含实例方法,抽象类是不能被实例化,为了让子类进行实例化及实现内部的抽象方法<br>抽象类的目的或者是作用最终都是为子类服务的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 定义一个抽象类</span></span><br><span class="line">  abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// 抽象属性</span></span><br><span class="line">    <span class="comment">// abstract name:string</span></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    abstract eat()</span><br><span class="line">    <span class="comment">// 报错的,抽象方法不能有具体的实现</span></span><br><span class="line">    <span class="comment">// abstract eat()&#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;趴着吃,跳着吃&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;您好啊&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个子类(派生类)Dog</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">// name:string=&#x27;小黄&#x27;</span></span><br><span class="line">    <span class="comment">// 重新的实现抽象类中的方法,此时这个方法就是当前Dog类的实例方法了</span></span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;舔着吃,真好吃&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化Dog的对象</span></span><br><span class="line">  <span class="keyword">const</span> dog:Dog = <span class="keyword">new</span> Dog()</span><br><span class="line">  dog.eat()</span><br><span class="line">  <span class="comment">// 调用的是抽象类中的实例方法</span></span><br><span class="line">  dog.sayHi()</span><br><span class="line">  <span class="comment">// console.log(dog.name)</span></span><br><span class="line">  <span class="comment">// 不能实例化抽象类的对象</span></span><br><span class="line">  <span class="comment">// const ani:Animal = new Animal()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数:封装了一些重复使用的代码,在需要的时候直接调用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// js中的书写方式-----&gt;在ts中同样的可以这么写</span></span><br><span class="line">  <span class="comment">// 函数声明,命名函数</span></span><br><span class="line">  <span class="comment">// function add(x, y) &#123; // 求和的函数</span></span><br><span class="line">  <span class="comment">//   return x + y</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 函数表达式,匿名函数</span></span><br><span class="line">  <span class="comment">// const add2 = function (x, y) &#123;</span></span><br><span class="line">  <span class="comment">//   return x + y</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// ts中的书写方式</span></span><br><span class="line">  <span class="comment">// 函数声明,命名函数</span></span><br><span class="line">  <span class="comment">// 函数中的x和y参数的类型都是string类型的,小括号后面的:string,代表的是该函数的返回值也是string类型的</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: string, y: string</span>): <span class="title">string</span> </span>&#123; <span class="comment">// 求和的函数</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result1: string = add(<span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(result1)</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="comment">// 函数表达式,匿名函数</span></span><br><span class="line">  <span class="comment">// 函数中的x和y参数的类型都是number类型的,小括号后面的:number,代表的是该函数的返回值也是number类型的</span></span><br><span class="line">  <span class="keyword">const</span> add2 = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(add2(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">  <span class="comment">// 函数的完整的写法</span></span><br><span class="line">  <span class="comment">// add3----&gt;变量名---&gt;函数add3</span></span><br><span class="line">  <span class="comment">// (x: number, y: number) =&gt; number 当前的这个函数的类型</span></span><br><span class="line">  <span class="comment">// function (x: number, y: number): number &#123; return x+y &#125;  就相当于符合上面的这个函数类型的值</span></span><br><span class="line">  <span class="keyword">const</span> add3: <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> number = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(add3(<span class="number">10</span>,<span class="number">100</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><p>可选参数:函数在声明的时候,内部的参数使用了?进行修饰,那么就表示该参数可以传入也可以不用传入,叫可选参数<br>默认参数:函数在声明的时候,内部的参数有自己的默认值,此时的这个参数就可以叫默认参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个函数:传入姓氏和名字,可以得到姓名(姓氏+名字=姓名)</span></span><br><span class="line">  <span class="comment">// 需求:如果不传入任何内容,那么就返回默认的姓氏</span></span><br><span class="line">  <span class="comment">// 需求:如果只传入姓氏,那么就返回姓氏</span></span><br><span class="line">  <span class="comment">// 需求:如果传入姓氏和名字,那么返回来的就是姓名</span></span><br><span class="line">  <span class="keyword">const</span> getFullName = <span class="function"><span class="keyword">function</span> (<span class="params">firstName: string=<span class="string">&#x27;东方&#x27;</span>, lastName?: string</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断名字是否传入了</span></span><br><span class="line">    <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">      <span class="keyword">return</span> firstName + <span class="string">&#x27;_&#x27;</span> + lastName</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> firstName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 函数调用</span></span><br><span class="line">  <span class="comment">// 什么也不传入</span></span><br><span class="line">  <span class="built_in">console</span>.log(getFullName())  <span class="comment">//&quot;东方&quot;</span></span><br><span class="line">  <span class="comment">// 只传入姓氏</span></span><br><span class="line">  <span class="built_in">console</span>.log(getFullName(<span class="string">&#x27;诸葛&#x27;</span>)) <span class="comment">//&quot;诸葛&quot;</span></span><br><span class="line">  <span class="comment">// 传入姓氏和名字</span></span><br><span class="line">  <span class="built_in">console</span>.log(getFullName(<span class="string">&#x27;诸葛&#x27;</span>,<span class="string">&#x27;孔明&#x27;</span>)) <span class="comment">// &quot;诸葛_孔明&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剩余参数(rest参数)</span></span><br><span class="line"><span class="comment">// 剩余参数是放在函数声明的时候所有的参数的最后</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...args:string[] ----&gt;剩余的参数,放在了一个字符串的数组中,args里面</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params">str: string,str2:string, ...args: string[]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str) <span class="comment">// a</span></span><br><span class="line">    <span class="comment">// console.log(str2) // b</span></span><br><span class="line">    <span class="built_in">console</span>.log(args) <span class="comment">// b ,c ,d ,e</span></span><br><span class="line">  &#125;</span><br><span class="line">  showMsg(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>函数重载</p></blockquote><p> 函数重载:函数名字相同,函数的参数及个数不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 定义一个函数</span></span><br><span class="line">  <span class="comment">// 需求: 我们有一个add函数，它可以接收2个string类型的参数进行拼接，也可以接收2个number类型的参数进行相加</span></span><br><span class="line">  <span class="comment">// 函数重载声明</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: string, y: string</span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span></span></span></span><br><span class="line"><span class="function"><span class="function">  // 函数声明</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: string | number, y: string | number</span>): <span class="title">string</span> | <span class="title">number</span> | <span class="title">undefined</span> </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">    <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;string&#x27;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">      <span class="title">return</span> <span class="title">x</span> + <span class="title">y</span> // 字符串拼接</span></span><br><span class="line"><span class="function">    &#125; <span class="title">else</span> <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">&#x27;number&#x27;</span></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x + y <span class="comment">// 数字相加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 函数调用</span></span><br><span class="line">  <span class="comment">// 两个参数都是字符串</span></span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="string">&#x27;诸葛&#x27;</span>, <span class="string">&#x27;孔明&#x27;</span>))</span><br><span class="line">  <span class="comment">// 两个参数都是数字</span></span><br><span class="line">  <span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">  <span class="comment">// 此时如果传入的是非法的数据，ts应该给我提示出错误的信息内容,报红色错误的信息</span></span><br><span class="line">  <span class="comment">// console.log(add(&#x27;真香&#x27;, 10))</span></span><br><span class="line">  <span class="comment">// console.log(add(100, &#x27;真好&#x27;))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>在定义函数、接口、类的时候不能预先确定要使用的数据的类型,而是在使用函数、接口、类的时候才能确定数据的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 需求:定义一个函数,传入两个参数,第一参数是数据,第二个参数是数量</span></span><br><span class="line">  <span class="comment">// 函数的作用:根据数量产生对应个数的数据,存放在一个数组中</span></span><br><span class="line">  <span class="comment">// 定义一个函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr1</span>(<span class="params">value: number, count: number</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="keyword">const</span> arr: number[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getArr1(<span class="number">100.123</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1) <span class="comment">// [100.123, 100.123, 100.123] </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 定义一个函数,同上,只不过传入的是字符串类型</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr2</span>(<span class="params">value: string, count: number</span>): <span class="title">string</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="keyword">const</span> arr: string[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr2 = getArr2(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr2) <span class="comment">//[&quot;abc&quot;, &quot;abc&quot;, &quot;abc&quot;] </span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 需求:可以传入任意类型的数据,返回来的是存储这个任意类型数据的数组</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr3</span>(<span class="params">value: any, count: number</span>): <span class="title">any</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="keyword">const</span> arr: any[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getArr3(<span class="number">100.123</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="keyword">const</span> arr2 = getArr3(<span class="string">&#x27;abc&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1) <span class="comment">//[100.123, 100.123, 100.123] </span></span><br><span class="line">  <span class="built_in">console</span>.log(arr2) <span class="comment">//[&quot;abc&quot;, &quot;abc&quot;, &quot;abc&quot;]</span></span><br><span class="line">  <span class="comment">// arr1中存储的是数字类型的数据</span></span><br><span class="line">  <span class="comment">// arr2中存储的是字符串类型的数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">0</span>].toFixed(<span class="number">2</span>)) <span class="comment">// 没有任何的智能提示的信息(要么有方法名字的提示信息,要么有错误的提示信息)</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr2[<span class="number">0</span>].split(<span class="string">&#x27;&#x27;</span>)) <span class="comment">// 没有任何的智能提示的信息(要么有方法名字的提示信息,要么有错误的提示信息)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getArr4</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, count: number</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="comment">// 根据数据和数量产生一个数组</span></span><br><span class="line">    <span class="comment">// const arr: T[] = []</span></span><br><span class="line">    <span class="keyword">const</span> arr: <span class="built_in">Array</span>&lt;T&gt; = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getArr4&lt;number&gt;(<span class="number">200.12345</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="keyword">const</span> arr2 = getArr4&lt;string&gt;(<span class="string">&#x27;abcdefg&#x27;</span>, <span class="number">5</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1)</span><br><span class="line">  <span class="built_in">console</span>.log(arr2)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">0</span>].toFixed(<span class="number">3</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(arr2[<span class="number">0</span>].split(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">  <span class="comment">// // arr1中存储的是数字类型的数据</span></span><br><span class="line">  <span class="comment">// // arr2中存储的是字符串类型的数据</span></span><br><span class="line">  <span class="comment">// console.log(arr1[0].toFixed(2)) // 没有任何的智能提示的信息(要么有方法名字的提示信息,要么有错误的提示信息)</span></span><br><span class="line">  <span class="comment">// console.log(arr2[0].split(&#x27;&#x27;)) // 没有</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>多个参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 多个泛型参数的函数:函数中有多个泛型的参数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;(<span class="params">value1: K, value2: V</span>): [<span class="title">K</span>, <span class="title">V</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [value1, value2]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr1 = getMsg&lt;string,number&gt;(<span class="string">&#x27;jack&#x27;</span>,<span class="number">100.2345</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">0</span>].split(<span class="string">&#x27;&#x27;</span>)) <span class="comment">// [&quot;j&quot;, &quot;a&quot;, &quot;c&quot;, &quot;k&quot;] </span></span><br><span class="line">  <span class="built_in">console</span>.log(arr1[<span class="number">1</span>].toFixed(<span class="number">1</span>)) <span class="comment">//&quot;100.2&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型接口</p></blockquote><p>在定义接口时, 为接口中的属性或方法定义泛型类型,在使用接口时, 再指定具体的泛型类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 需求:定义一个类,用来存储用户的相关信息(id,名字,年龄)</span></span><br><span class="line">  <span class="comment">// 通过一个类的实例对象调用add方法可以添加多个用户信息对象,调用getUserId方法可以根据id获取某个指定的用户信息对象</span></span><br><span class="line">  <span class="comment">// 定义一个泛型接口</span></span><br><span class="line">  interface IBaseCRUD&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line">    add: <span class="function">(<span class="params">t: T</span>) =&gt;</span> T</span><br><span class="line">    <span class="attr">getUserId</span>: <span class="function">(<span class="params">id: number</span>) =&gt;</span> T | <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个用户信息的类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    id?: number <span class="comment">// 用户的id  ? 代表该属性可有可无</span></span><br><span class="line">    <span class="attr">name</span>: string <span class="comment">// 用户的姓名</span></span><br><span class="line">    <span class="attr">age</span>: number <span class="comment">// 用户的年龄</span></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: string, age: number</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name</span><br><span class="line">      <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义一个类,可以针对用户的信息对象进行增加及查询的操作</span></span><br><span class="line">  <span class="comment">// CRUD----&gt;create,Read,Update,Delete</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">UserCRUD</span> <span class="title">implements</span> <span class="title">IBaseCRUD</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 用来保存多个User类型的用户信息对象</span></span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">Array</span>&lt;User&gt; = []</span><br><span class="line">    <span class="comment">//方法用来存储用户信息对象的</span></span><br><span class="line">    add(user: User): User &#123;</span><br><span class="line">      <span class="comment">// 产生id</span></span><br><span class="line">      user.id = <span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random()</span><br><span class="line">      <span class="comment">// 把用户信息对象添加到data数组中</span></span><br><span class="line">      <span class="built_in">this</span>.data.push(user)</span><br><span class="line">      <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法根据id查询指定的用户信息对象</span></span><br><span class="line">    getUserId(id:number = <span class="number">0</span>): User | <span class="literal">undefined</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.data.find(<span class="function"><span class="params">user</span> =&gt;</span> user.id === id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例化添加用户信息对象的类UserCRUD</span></span><br><span class="line">  <span class="keyword">const</span> userCRUD: UserCRUD = <span class="keyword">new</span> UserCRUD()</span><br><span class="line">  <span class="comment">// 调用添加数据的方法</span></span><br><span class="line">  userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;jack&#x27;</span>, <span class="number">20</span>))</span><br><span class="line">  userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;tom&#x27;</span>, <span class="number">25</span>))</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">23</span>))</span><br><span class="line">  userCRUD.add(<span class="keyword">new</span> User(<span class="string">&#x27;rousi&#x27;</span>, <span class="number">21</span>))</span><br><span class="line"><span class="comment">//   [User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;jack&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 20,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.5513</span></span><br><span class="line"><span class="comment">// &#125;, User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;tom&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 25,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.9338</span></span><br><span class="line"><span class="comment">// &#125;, User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;lucy&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 23,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.7893</span></span><br><span class="line"><span class="comment">// &#125;, User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;rousi&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 21,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.6506</span></span><br><span class="line"><span class="comment">// &#125;] </span></span><br><span class="line">  <span class="built_in">console</span>.log(userCRUD.data)</span><br><span class="line">  <span class="comment">// 根据id查询用户信息对象数据</span></span><br><span class="line">  <span class="keyword">const</span> user = userCRUD.getUserId(id)</span><br><span class="line">  <span class="built_in">console</span>.log(user)</span><br><span class="line"><span class="comment">//   User: &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;lucy&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 23,</span></span><br><span class="line"><span class="comment">//   &quot;id&quot;: 1652847195282.7893</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型类</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类,类中的属性值的类型是不确定,方法中的参数及返回值的类型也是不确定</span></span><br><span class="line"><span class="comment">// 定义一个泛型类</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 默认的属性的值的类型是泛型类型</span></span><br><span class="line">    <span class="attr">defaultValue</span>: T| <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">add</span>: (<span class="function">(<span class="params">x: T,y: T</span>) =&gt;</span> T)| <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在实例化类的对象的时候,再确定泛型的类型</span></span><br><span class="line">  <span class="keyword">const</span> g1: GenericNumber&lt;number&gt; = <span class="keyword">new</span> GenericNumber&lt;number&gt;()</span><br><span class="line">  <span class="comment">// 设置属性值</span></span><br><span class="line">  g1.defaultValue = <span class="number">100</span></span><br><span class="line">  <span class="comment">// 相加的方法</span></span><br><span class="line">  g1.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(g1.add(g1.defaultValue,<span class="number">20</span>)) <span class="comment">//120 </span></span><br><span class="line">  <span class="comment">// 在实例化类的对象的时候,再确定泛型的类型</span></span><br><span class="line">  <span class="keyword">const</span> g2: GenericNumber&lt;string&gt; = <span class="keyword">new</span> GenericNumber&lt;string&gt;()</span><br><span class="line">  <span class="comment">// 设置属性值</span></span><br><span class="line">  g2.defaultValue = <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line">  <span class="comment">// 相加的方法</span></span><br><span class="line">  g2.add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(g2.add(<span class="string">&#x27;帅杨&#x27;</span>,g2.defaultValue))  <span class="comment">//&quot;帅杨哈哈&quot; </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>泛型约束</p></blockquote><p>如果我们直接对一个泛型参数取 length 属性, 会报错, 因为这个泛型根本就不知道它有这个属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个接口,用来约束将来的某个类型中必须要有length这个属性</span></span><br><span class="line">  interface ILength&#123;</span><br><span class="line">    <span class="comment">// 接口中有一个属性length</span></span><br><span class="line">    <span class="attr">length</span>:number</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">ILength</span>&gt;(<span class="params">x: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.length</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(getLength&lt;string&gt;(<span class="string">&#x27;what are you no sha lei&#x27;</span>))</span><br><span class="line">  <span class="comment">// console.log(getLength&lt;number&gt;(123))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">TypeScript学习</summary>
    
    
    
    <category term="typescript" scheme="https://wecy-chen.github.io/categories/typescript/"/>
    
    
    <category term="typescript" scheme="https://wecy-chen.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>新零售项目杂记</title>
    <link href="https://wecy-chen.github.io/2022/08/22/retail_core/"/>
    <id>https://wecy-chen.github.io/2022/08/22/retail_core/</id>
    <published>2022-08-22T01:42:38.307Z</published>
    <updated>2024-10-16T02:12:09.092Z</updated>
    
    <content type="html"><![CDATA[<p>代码片段</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p><a href="https://doc.sequoiadb.com/cn/sequoiadb-cat_id-1558957224-edition_id-500">mongodb 中文文档</a></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MAPP.db_queryAll(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取一条数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> commodity = <span class="keyword">await</span> MAPP.db_getOne(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="string">&#x27;58805dd61d8bdc9c56cc3e2d&#x27;</span>,</span><br><span class="line">    <span class="attr">distributed</span>: &#123;</span><br><span class="line">      <span class="attr">$elemMatch</span>: &#123;</span><br><span class="line">        <span class="attr">store_id</span>: <span class="string">&#x27;5d64d9b75fc33f07bcfe1435&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;distributed.$:&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>不分页</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> MAPP.db_queryAll(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;area&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">pageTurn</span>: <span class="literal">false</span>, <span class="comment">//默认true</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;noPage&#x27;</span>, <span class="comment">//默认&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">isCount</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">page</span>: i + <span class="number">1</span>,</span><br><span class="line">    <span class="attr">limit</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">lean</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="attr">adcode</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>获取过滤数组第一个元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  result = [], count = <span class="number">0</span></span><br><span class="line">&#125; = <span class="keyword">await</span> MAPP.db_queryAll(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;distributed.store_id&#x27;</span>: <span class="string">&#x27;5d64d9b75fc33f07bcfe1435&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;distributed.$&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">[&#123;</span><br><span class="line">  <span class="attr">_id</span>: <span class="number">58805</span> dd61d8bdc9c56cc3e2d,</span><br><span class="line">  <span class="attr">distributed</span>: [</span><br><span class="line">    [<span class="built_in">Object</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">$project</span>: &#123;</span><br><span class="line">   <span class="attr">medical</span>: <span class="number">1</span>, <span class="comment">// 医保商品</span></span><br><span class="line">  <span class="attr">epidemic_situation</span>: <span class="number">1</span>, <span class="comment">// 疫情商品</span></span><br><span class="line">  <span class="attr">name</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bar_code</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">prescription</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">original_price</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">current_price</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">unit_num</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// distributed: 1,</span></span><br><span class="line">  <span class="attr">three_categories</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">cold_chain</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">overseas</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">hide_goods</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">filteredArray</span>: &#123;</span><br><span class="line">              <span class="string">&#x27;$filter&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">input</span>: <span class="string">&#x27;$distributed&#x27;</span>,</span><br><span class="line">                <span class="attr">as</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">                <span class="attr">cond</span>: &#123;</span><br><span class="line">                  <span class="string">&#x27;$and&#x27;</span>: [</span><br><span class="line">                    &#123; <span class="string">&#x27;$eq&#x27;</span>: [<span class="string">&#x27;$$item.store_id&#x27;</span>, ObjectId(<span class="string">&#x27;6201e7893d257513aa054e5c&#x27;</span>)] &#125;,</span><br><span class="line">                    &#123; <span class="string">&#x27;$eq&#x27;</span>: [<span class="string">&#x27;$$item.shelf&#x27;</span>, <span class="literal">true</span>] &#125;,</span><br><span class="line">                    &#123; <span class="string">&#x27;$gt&#x27;</span>: [<span class="string">&#x27;$$item.stock&#x27;</span>, <span class="number">0</span>] &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取数组第一个元素</span></span><br><span class="line">&#123; <span class="attr">$project</span>: &#123; <span class="attr">firstArrayElement</span>: &#123; <span class="attr">$arrayElemAt</span>: [<span class="string">&quot;$myArrayField&quot;</span>, <span class="number">0</span>] &#125; &#125; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/retail_core/xxxx.png" alt="jsuan.png"></p><ol start="3"><li>联表</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> MAPP.db_queryAll(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    page,</span><br><span class="line">    limit,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">isCount</span>: <span class="literal">false</span>, <span class="comment">//不返回条数</span></span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;populate&quot;</span>, <span class="comment">//设置连表</span></span><br><span class="line">  <span class="attr">populate</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;user_id&quot;</span>, <span class="comment">//本表id字段</span></span><br><span class="line">      <span class="attr">select</span>: <span class="string">&quot;nickname full_name phone_number&quot;</span>, <span class="comment">//外表字段过滤</span></span><br><span class="line">      <span class="attr">model</span>: <span class="string">&quot;member&quot;</span>, <span class="comment">//外表</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;cashier_id&quot;</span>,</span><br><span class="line">      <span class="attr">select</span>: <span class="string">&quot;staff_name&quot;</span>,</span><br><span class="line">      <span class="attr">model</span>: <span class="string">&quot;store_staff&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">sort</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>数组拆分在合并</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">await</span> MAPP.db_aggregateAll(&#123;</span><br><span class="line">     <span class="attr">model</span>: <span class="string">&#x27;match_package&#x27;</span>,</span><br><span class="line">     <span class="attr">params</span>: parameter,</span><br><span class="line">     <span class="attr">aggregate</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$match</span>: &#123;</span><br><span class="line">           <span class="attr">store_ids</span>: &#123;</span><br><span class="line">             <span class="attr">$in</span>: [<span class="keyword">new</span> MAPP.MTypesId(store_id)]</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">           <span class="attr">start_time</span>: &#123; <span class="attr">$lte</span>: time &#125;,</span><br><span class="line">           <span class="attr">end_time</span>: &#123; <span class="attr">$gte</span>: time &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123; <span class="attr">$unwind</span>: <span class="string">&#x27;$promotional_goods&#x27;</span> &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$lookup</span>: &#123;</span><br><span class="line">           <span class="attr">from</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">           <span class="attr">localField</span>: <span class="string">&#x27;promotional_goods.goods_id&#x27;</span>,</span><br><span class="line">           <span class="attr">foreignField</span>: <span class="string">&#x27;_id&#x27;</span>,</span><br><span class="line">           <span class="attr">as</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123; <span class="attr">$unwind</span>: <span class="string">&#x27;$commodity&#x27;</span> &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$addFields</span>: &#123;</span><br><span class="line">           <span class="string">&#x27;distributed&#x27;</span>: &#123;</span><br><span class="line">             <span class="attr">$filter</span>: &#123;</span><br><span class="line">               <span class="attr">input</span>: <span class="string">&#x27;$commodity.distributed&#x27;</span>,</span><br><span class="line">               <span class="attr">as</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">               <span class="attr">cond</span>: &#123;</span><br><span class="line">                 <span class="string">&#x27;$eq&#x27;</span>: [<span class="string">&#x27;$$item.store_id&#x27;</span>, <span class="keyword">new</span> MAPP.MTypesId(store_id)]</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$redact</span>: &#123;</span><br><span class="line">           <span class="attr">$cond</span>: &#123;</span><br><span class="line">             <span class="attr">if</span>: &#123;</span><br><span class="line">               <span class="attr">$and</span>: [</span><br><span class="line">                 &#123; <span class="attr">$ne</span>: [<span class="string">&#x27;$distributed&#x27;</span>, []] &#125;</span><br><span class="line">               ]</span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="attr">then</span>: <span class="string">&#x27;$$KEEP&#x27;</span>,</span><br><span class="line">             <span class="attr">else</span>: <span class="string">&#x27;$$PRUNE&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$unwind</span>: <span class="string">&#x27;$distributed&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$project</span>: &#123;</span><br><span class="line">           <span class="attr">title</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">limit_number</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">package_original_price</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">package_total_price</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">package_stock</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">image</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">promotional_goods</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">activity_label</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">priority</span>: -<span class="number">1</span>,</span><br><span class="line">           <span class="attr">update_time</span>: -<span class="number">1</span>,</span><br><span class="line">           <span class="comment">// commodity: 1,</span></span><br><span class="line">           <span class="attr">distributed</span>: <span class="number">1</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$group</span>: &#123;</span><br><span class="line">           <span class="attr">_id</span>: <span class="string">&#x27;$_id&#x27;</span>,</span><br><span class="line">           <span class="attr">out</span>: &#123; <span class="attr">$last</span>: <span class="string">&#x27;$$ROOT&#x27;</span> &#125;,</span><br><span class="line">           <span class="attr">stocks</span>: &#123;</span><br><span class="line">             <span class="comment">// $push: &#x27;$distributed.stock&#x27;</span></span><br><span class="line">             <span class="attr">$push</span>: &#123; <span class="attr">$cond</span>: [&#123; <span class="attr">$gt</span>: [<span class="string">&#x27;$distributed.stock&#x27;</span>, <span class="number">0</span>] &#125;, <span class="literal">true</span>, <span class="literal">false</span>] &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">promotional_goods</span>: &#123;</span><br><span class="line">             <span class="attr">$push</span>: <span class="string">&#x27;$promotional_goods&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$addFields</span>: &#123;</span><br><span class="line">           <span class="attr">noStocks</span>: &#123;</span><br><span class="line">             <span class="string">&#x27;$filter&#x27;</span>: &#123;</span><br><span class="line">               <span class="attr">input</span>: <span class="string">&#x27;$stocks&#x27;</span>,</span><br><span class="line">               <span class="attr">as</span>: <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">               <span class="attr">cond</span>: &#123;</span><br><span class="line">                 <span class="comment">// $lte: [&#x27;$$v&#x27;, 0]</span></span><br><span class="line">                 <span class="attr">$eq</span>: [<span class="string">&#x27;$$v&#x27;</span>, <span class="literal">false</span>]</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$addFields</span>: &#123;</span><br><span class="line">           <span class="attr">stock</span>: &#123; <span class="attr">$arrayElemAt</span>: [<span class="string">&#x27;$noStocks&#x27;</span>, <span class="number">0</span>] &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 添加字段</span></span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$addFields</span>: &#123;</span><br><span class="line">           <span class="attr">hasStock</span>: &#123; <span class="attr">$cond</span>: [&#123; <span class="attr">$eq</span>: [<span class="string">&#x27;$stock&#x27;</span>, <span class="literal">false</span>] &#125;, <span class="literal">false</span>, <span class="literal">true</span>] &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">$sort</span>: &#123;</span><br><span class="line">           <span class="attr">hasStock</span>: -<span class="number">1</span>,</span><br><span class="line">           <span class="string">&#x27;out.priority&#x27;</span>: -<span class="number">1</span>,</span><br><span class="line">           <span class="string">&#x27;out.update_time&#x27;</span>: -<span class="number">1</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// &#123;</span></span><br><span class="line">       <span class="comment">//   $project: &#123;</span></span><br><span class="line">       <span class="comment">//     _id: 1,</span></span><br><span class="line">       <span class="comment">//     out: 1,</span></span><br><span class="line">       <span class="comment">//     stocks: 1,</span></span><br><span class="line">       <span class="comment">//     hasStock: 1</span></span><br><span class="line">       <span class="comment">//   &#125;</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">     ]</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>取模 <code>$mod</code></p><p>获取一条数据 <code>MAPP.db_getOne()</code></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MAPP.db_setOne(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">$set</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  <span class="comment">//更新数据</span></span><br><span class="line">  <span class="attr">$set</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">//插入数据,重复的不插入</span></span><br><span class="line">  <span class="attr">$addToSet</span>: &#123;&#125;</span><br><span class="line">  <span class="comment">//插入数据</span></span><br><span class="line">  <span class="attr">$push</span>: &#123;&#125;</span><br><span class="line">  <span class="comment">//更新或插入数据</span></span><br><span class="line">  <span class="attr">$setOnInsert</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索并更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MAPP.db_setOne(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123; <span class="attr">_id</span>: product_id, <span class="string">&#x27;distributed.store_id&#x27;</span>: store_id &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">$inc</span>: &#123; <span class="string">&#x27;distributed.$.stock&#x27;</span>: stock &#125; &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更新或插入数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MAPP.db_setOne(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">$set</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">$setOnInsert</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">lean</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">new</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">upsert</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">setDefaultsOnInsert</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// options 必须配置</span></span><br></pre></td></tr></table></figure><p>多次嵌套修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MAPP.db_setOne(&#123;</span><br><span class="line">        <span class="attr">model</span>: <span class="string">&#x27;deliver_accept_order&#x27;</span>,</span><br><span class="line">        <span class="attr">condition</span>: &#123; <span class="attr">_id</span>: _id, <span class="attr">product_list</span>: &#123; <span class="attr">$elemMatch</span>: &#123; <span class="attr">batch_number</span>: &#123; <span class="attr">$elemMatch</span>: &#123; <span class="attr">_id</span>: batch_number_id &#125; &#125; &#125; &#125; &#125;,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">          <span class="attr">$set</span>: &#123;</span><br><span class="line">            <span class="attr">receipt_status</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;product_list.$[e].batch_number.$[val].in_quantity&#x27;</span>: in_quantity,</span><br><span class="line">            <span class="string">&#x27;product_list.$[e].batch_number.$[val].diff_quantity&#x27;</span>: transit_quantity - in_quantity,</span><br><span class="line">            <span class="string">&#x27;product_list.$[e].batch_number.$[val].low_quantity&#x27;</span>: low_quantity,</span><br><span class="line">            <span class="string">&#x27;product_list.$[e].batch_number.$[val].low_reason&#x27;</span>: low_reason,</span><br><span class="line">            <span class="string">&#x27;product_list.$[e].batch_number.$[val].take_status&#x27;</span>: in_quantity &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 更新多层嵌套数组</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">arrayFilters</span>: [&#123;</span><br><span class="line">            <span class="string">&#x27;e.product_id&#x27;</span>: goods_mongoId,</span><br><span class="line">          &#125;, &#123;</span><br><span class="line">            <span class="string">&#x27;val.batch_id&#x27;</span>: batch_number_id</span><br><span class="line">          &#125;],</span><br><span class="line">          <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>数组操作</p><p>修改数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改部分</span></span><br><span class="line"><span class="keyword">await</span> MAPP.db_setMany(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;distributed.store_id&#x27;</span>: &#123; <span class="attr">$in</span>: store_ids &#125;,</span><br><span class="line">    <span class="comment">// prescription: prescriptions</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">$set</span>: &#123; [<span class="string">`distributed.$[elem].reduction_ids`</span>]: _ids &#125; &#125;,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">arrayFilters</span>: [</span><br><span class="line">      &#123; <span class="string">&#x27;elem.store_id&#x27;</span>: &#123; <span class="attr">$in</span>: store_ids &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全部修改</span></span><br><span class="line"><span class="keyword">await</span> MAPP.db_setMany(&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">    <span class="attr">condition</span>: &#123; <span class="attr">status</span>: &#123; <span class="attr">$ne</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">$set</span>: &#123; <span class="string">&#x27;distributed.$[].shelf&#x27;</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>基础</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MAPP.db_aggregateAll(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">aggregate</span>: [],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>$filter</code> 过滤数组符合的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">$project</span>: &#123;</span><br><span class="line">    <span class="attr">assigners</span>: &#123;</span><br><span class="line">      <span class="attr">$filter</span>: &#123;</span><br><span class="line">        <span class="attr">input</span>: <span class="string">&#x27;$assigners&#x27;</span>,</span><br><span class="line">        <span class="attr">as</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">        <span class="attr">cond</span>: &#123;</span><br><span class="line">          <span class="attr">$eq</span>: [<span class="string">&#x27;$$item.id&#x27;</span>, MAPP.MTypesId(staff_id)]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$group</code>统计</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">$group</span>: &#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="string">&#x27;$product_list.product_id&#x27;</span>, <span class="comment">//需要统计的_id字段</span></span><br><span class="line">    <span class="comment">// 总价统计</span></span><br><span class="line">    <span class="attr">amount_stat</span>: &#123;</span><br><span class="line">      <span class="attr">$sum</span>: &#123; <span class="attr">$multiply</span>: [<span class="string">&#x27;$product_list.cypher_price&#x27;</span>, <span class="string">&#x27;$product_list.quantity&#x27;</span>] &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">product_id</span>: &#123;</span><br><span class="line">      <span class="attr">$first</span>: <span class="string">&#x27;$$ROOT.product_list.product_id&#x27;</span>, <span class="comment">//第一个统计字段</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">quantity_stat</span>: &#123;</span><br><span class="line">      <span class="attr">$sum</span>: <span class="string">&#x27;$product_list.quantity&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>$lookup</code> 连表 <code>unwind</code> 拆分</p><p>注:连表是数组,需要把数组拆分成对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">$lookup</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&#x27;commodity&#x27;</span>, <span class="comment">//外表</span></span><br><span class="line">      <span class="attr">localField</span>: <span class="string">&#x27;group.kind_id&#x27;</span>, <span class="comment">//本表关联</span></span><br><span class="line">      <span class="attr">foreignField</span>: <span class="string">&#x27;_id&#x27;</span>, <span class="comment">//外表关联</span></span><br><span class="line">      <span class="attr">as</span>: <span class="string">&#x27;commodity&#x27;</span>, <span class="comment">//显示字段</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$unwind</span>: &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;$commodity&#x27;</span>, <span class="comment">//数组拆分</span></span><br><span class="line">      <span class="attr">preserveNullAndEmptyArrays</span>: <span class="literal">true</span> <span class="comment">// 空数组也拆分.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> MAPP.db_aggregateAll(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;order_goods_record&#x27;</span>,</span><br><span class="line">  <span class="attr">isCount</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">pageTurn</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">aggregate</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">$match</span>: &#123;</span><br><span class="line">        <span class="attr">order_id</span>: MAPP.MTypesId(<span class="string">&#x27;63e9f04109ae774560a44829&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">$unwind</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;$product_list&#x27;</span>,</span><br><span class="line">        <span class="attr">preserveNullAndEmptyArrays</span>: <span class="literal">true</span> <span class="comment">// 空数组也拆分.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;product_id&#x27;</span>: <span class="string">&#x27;$product_list.product_id&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;batch_id&#x27;</span>: <span class="string">&#x27;$product_list.batch_id&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;$product_list.type&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;activity_id&#x27;</span>: <span class="string">&#x27;$product_list.activity_id&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 第一个商品</span></span><br><span class="line">        <span class="attr">product_first</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;$first&#x27;</span>: <span class="string">&#x27;$product_list&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 统计金额</span></span><br><span class="line">        <span class="attr">amount_stat</span>: &#123;</span><br><span class="line">          <span class="attr">$sum</span>: &#123; <span class="attr">$multiply</span>: [<span class="string">&#x27;$product_list.final_price&#x27;</span>, <span class="string">&#x27;$product_list.spare_quantity&#x27;</span>] &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result, <span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>商品查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aggregate = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$match</span>: match</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   $sort: &#123;</span></span><br><span class="line">  <span class="comment">//     priority: -1,</span></span><br><span class="line">  <span class="comment">//     &#x27;original_gift_goods.sort&#x27;: 1,</span></span><br><span class="line">  <span class="comment">//     update_time: -1</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$project</span>: &#123;</span><br><span class="line">      <span class="attr">distributed</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;$filter&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">input</span>: <span class="string">&#x27;$commodity.distributed&#x27;</span>,</span><br><span class="line">          <span class="attr">as</span>: <span class="string">&#x27;item&#x27;</span>,</span><br><span class="line">          <span class="attr">cond</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;$and&#x27;</span>: [</span><br><span class="line">              &#123; <span class="string">&#x27;$eq&#x27;</span>: [<span class="string">&#x27;$$item.store_id&#x27;</span>, <span class="keyword">new</span> MAPP.MTypesId(store_id)] &#125;,</span><br><span class="line">              &#123; <span class="string">&#x27;$eq&#x27;</span>: [<span class="string">&#x27;$$item.shelf&#x27;</span>, <span class="literal">true</span>] &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$redact</span>: &#123;</span><br><span class="line">      <span class="attr">$cond</span>: &#123;</span><br><span class="line">        <span class="attr">if</span>: &#123;</span><br><span class="line">          <span class="attr">$and</span>: [</span><br><span class="line">            &#123; <span class="attr">$ne</span>: [<span class="string">&#x27;$distributed&#x27;</span>, []] &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">then</span>: <span class="string">&#x27;$$KEEP&#x27;</span>,</span><br><span class="line">        <span class="attr">else</span>: <span class="string">&#x27;$$PRUNE&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$unwind</span>: <span class="string">&#x27;$distributed&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="comment">// 增加是否库存字段</span></span><br><span class="line">    <span class="attr">$addFields</span>: &#123;</span><br><span class="line">      <span class="attr">hasStock</span>: &#123; <span class="attr">$cond</span>: [&#123; <span class="attr">$gt</span>: [<span class="string">&#x27;$distributed.stock&#x27;</span>, <span class="number">0</span>] &#125;, <span class="literal">true</span>, <span class="literal">false</span>] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$sort</span>: &#123;</span><br><span class="line">      <span class="attr">hasStock</span>: -<span class="number">1</span>,</span><br><span class="line">      <span class="attr">_id</span>: -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>字符串截取 <code>$substr</code></p><p><a href="%E5%9C%B0%E5%9D%80">https://www.jianshu.com/p/8aa8794101e3</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;notice&#x27;</span>).aggregate(</span><br><span class="line">  [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">$project</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: &#123; <span class="attr">$substrCP</span>: [<span class="string">&#x27;$content&#x27;</span>, <span class="number">0</span>, <span class="number">20</span>] &#125; <span class="comment">//从0开始截取长度为20的字符串</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>$$ROOT</code> 根元素过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">$project</span>: &#123;</span><br><span class="line">    <span class="attr">goods_ids</span>: <span class="string">&#x27;$$ROOT.check.goods_ids&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> MAPP.db_deleteOne(&#123;</span><br><span class="line">       <span class="attr">model</span>: <span class="string">&#x27;medicate_info&#x27;</span>,</span><br><span class="line">       <span class="attr">condition</span>: &#123;</span><br><span class="line">         <span class="attr">_id</span>: $id</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">if</span> (res.ok &amp;&amp; res.value) &#123;</span><br><span class="line">       ctx.info(&#123; <span class="attr">message</span>: <span class="string">&#x27;删除成功&#x27;</span> &#125;)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       ctx.info(&#123; <span class="attr">message</span>: <span class="string">&#x27;删除失败&#x27;</span>, <span class="attr">status</span>: <span class="number">403</span> &#125;)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><h2 id="MAPP"><a href="#MAPP" class="headerlink" title="MAPP"></a><code>MAPP</code></h2><p>路径 <code>\api-medicalCenter\libs\utils\</code></p><p><code>plus</code> 加 <code>minus</code> 减 <code>multiply</code> 乘 <code>division</code> 除</p><p><code>selectTime</code> 获取时间范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入</span></span><br><span class="line"><span class="comment">// Month: 本月 LastMonth: 上月 Yesterday:昨天 Day: 今天</span></span><br><span class="line"><span class="comment">// LastWeek:上周  Week: 本周  Year:今年 LastYear:去年</span></span><br><span class="line"><span class="keyword">const</span> timeRange = MAPP.selectTime(<span class="string">&#x27;Today&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(timeRange) <span class="comment">// [ 1658764800000, 1658851199999 ]</span></span><br></pre></td></tr></table></figure><p><code>formatFloat</code> 保留几位小数(四舍五入)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = MAPP.formatFloat(<span class="string">&#x27;2.567&#x27;</span>, <span class="number">2</span>) <span class="comment">// 2.57</span></span><br></pre></td></tr></table></figure><p><code>formatMoney</code> 保留金额两位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = MAPP.formatMoney(<span class="number">5.335</span>) <span class="comment">// 5.34</span></span><br></pre></td></tr></table></figure><p><code>identityGetAge</code> 身份证获取年龄</p><p><code>110101190001011009</code></p><p><code>220202202002020022</code></p><p><a href="http://www.ip33.com/shenfenzheng.html">在线身份证号码验证</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = MAPP.identityGetAge(<span class="string">&#x27;220202202002020022&#x27;</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>方法代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 身份证获取年龄</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identityGetAge</span>(<span class="params">u = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">  u = u.toString()</span><br><span class="line">  <span class="keyword">let</span> len = (u + <span class="string">&#x27;&#x27;</span>).length</span><br><span class="line">  <span class="keyword">let</span> strBirthday = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理18位的身份证号码从号码中得到生日和性别代码</span></span><br><span class="line">    strBirthday =</span><br><span class="line">    u.substr(<span class="number">6</span>, <span class="number">4</span>) +</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span> +</span><br><span class="line">      u.substr(<span class="number">10</span>, <span class="number">2</span>) +</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span> +</span><br><span class="line">      u.substr(<span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">15</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> birthdayValue = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    birthdayValue = u.charAt(<span class="number">6</span>) + u.charAt(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(birthdayValue) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      strBirthday =</span><br><span class="line">        <span class="string">&#x27;20&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">6</span>, <span class="number">2</span>) +</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">8</span>, <span class="number">2</span>) +</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      strBirthday =</span><br><span class="line">        <span class="string">&#x27;19&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">6</span>, <span class="number">2</span>) +</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">8</span>, <span class="number">2</span>) +</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 时间字符串里，必须是“/”</span></span><br><span class="line">  <span class="keyword">let</span> birthDate = <span class="keyword">new</span> <span class="built_in">Date</span>(strBirthday)</span><br><span class="line">  <span class="keyword">let</span> nowDateTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">let</span> age = nowDateTime.getFullYear() - birthDate.getFullYear()</span><br><span class="line">  <span class="comment">// 再考虑月、天的因素;.getMonth()获取的是从0开始的，这里进行比较，不需要加1</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    nowDateTime.getMonth() &lt; birthDate.getMonth() ||</span><br><span class="line">    (nowDateTime.getMonth() === birthDate.getMonth() &amp;&amp;</span><br><span class="line">      nowDateTime.getDate() &lt; birthDate.getDate())</span><br><span class="line">  ) &#123;</span><br><span class="line">    age--</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> age.toString() === <span class="string">&#x27;NaN&#x27;</span> ? <span class="number">0</span> : <span class="built_in">Number</span>(age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>identityGetAge</code> 身份证获取生日</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identityGetBirth = <span class="function">(<span class="params">u = <span class="string">&#x27;&#x27;</span>, s = <span class="string">&#x27;-&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  u = u.toString()</span><br><span class="line">  <span class="keyword">let</span> len = (u + <span class="string">&#x27;&#x27;</span>).length</span><br><span class="line">  <span class="keyword">let</span> strBirthday = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理18位的身份证号码从号码中得到生日和性别代码</span></span><br><span class="line">    strBirthday = u.substr(<span class="number">6</span>, <span class="number">4</span>) + s + u.substr(<span class="number">10</span>, <span class="number">2</span>) + s + u.substr(<span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//第一代身份证15位,现在基本没有了</span></span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">15</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> birthdayValue = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    birthdayValue = u.charAt(<span class="number">6</span>) + u.charAt(<span class="number">7</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(birthdayValue) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      strBirthday =</span><br><span class="line">        <span class="string">&#x27;20&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">6</span>, <span class="number">2</span>) +</span><br><span class="line">        s +</span><br><span class="line">        u.substr(<span class="number">8</span>, <span class="number">2</span>) +</span><br><span class="line">        s +</span><br><span class="line">        u.substr(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      strBirthday =</span><br><span class="line">        <span class="string">&#x27;19&#x27;</span> +</span><br><span class="line">        u.substr(<span class="number">6</span>, <span class="number">2</span>) +</span><br><span class="line">        s +</span><br><span class="line">        u.substr(<span class="number">8</span>, <span class="number">2</span>) +</span><br><span class="line">        s +</span><br><span class="line">        u.substr(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> strBirthday</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a= identityGetBirth(<span class="string">&#x27;220202202002020022&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//&quot;2020-02-02&quot;</span></span><br></pre></td></tr></table></figure><p><code>identityGetSex</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按身份证号码获取性别</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@idNumber </span>身份证号码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return </span>男：male；女：female；异常（身份证号码为空或长度、格式错误）：undefined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identityGetSex</span>(<span class="params">idNumber=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (idNumber) &#123;</span><br><span class="line">    <span class="keyword">let</span> genderCode=<span class="string">&#x27;&#x27;</span> <span class="comment">// 性别代码</span></span><br><span class="line">    <span class="keyword">if</span> (idNumber.length === <span class="number">18</span>) &#123; <span class="comment">// 二代身份证号码长度为18位（第17位为性别代码）</span></span><br><span class="line">      genderCode = idNumber.charAt(<span class="number">16</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (idNumber.length === <span class="number">15</span>) &#123; <span class="comment">// 一代身份证号码长度为15位（第15位为性别代码）</span></span><br><span class="line">      genderCode = idNumber.charAt(<span class="number">14</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (genderCode &amp;&amp; !<span class="built_in">isNaN</span>(genderCode)) &#123;</span><br><span class="line">      <span class="comment">// 两代身份证号码的性别代码都为男奇女偶</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">parseInt</span>(genderCode) % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;female&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> male=identityGetSex(<span class="string">&#x27;220202202002020022&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(male,<span class="string">&#x27;111&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><p>路径 <code>\api-medicalCenter\middleware</code></p><p>validator 校验 userAuth 不用登录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">userAuth</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">validator</span>: &#123;</span><br><span class="line">    <span class="attr">verification_code</span>: <span class="string">&#x27;required|min:6&#x27;</span>,</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&#x27;required|cellphoneNumber&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;required|min:6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;order_group.*.order_number&#x27;</span>: <span class="string">&#x27;required|string&#x27;</span>,</span><br><span class="line">    <span class="attr">openid</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;required|in:order_library,premium_voucher,dr_appointmen,order_deposit,order_retainage&#x27;</span>,</span><br><span class="line">    <span class="attr">voucher_id</span>: [&#123; <span class="attr">required_if</span>: [<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;premium_voucher&#x27;</span>] &#125;, <span class="string">&#x27;mongodbId&#x27;</span>],  <span class="comment">//数组写法</span></span><br><span class="line">    <span class="attr">store_ids</span>: <span class="string">&#x27;required|split-mongodbId&#x27;</span>, <span class="comment">//mongodbId逗号隔开</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>多个|隔开<br><code>required</code> 必传<br><code>min:6</code> 最小 6 位<br><code>split-mongodbId</code> 数组 id</p><p>常用<br><code>mongodbId</code> <code> numeric</code> <code>object</code> <code>string</code> <code>array</code></p><p><code>fullName</code> 姓名应该在 2-4 个中文字符<br><code>IDCard</code> 身份证号码验证<br><code>phoneNumber</code></p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>注:</p><ol><li><code>本地测试要配置nginx中的server_name地址参数</code></li><li><code>获取去掉配置</code></li></ol><p>数据缓存<br>路径 <code>\api-medicalCenter\src\@common\cache</code></p><p>促商品缓存<br>路径 <code>\api-medicalCenter\src\@common\promotion</code></p><p>缓存进程<br>路径 <code>\api-medicalCenter\src\@common\process</code></p><p>/**</p><ul><li>类型 genre: cache promotion</li><li>方式</li><li>cache</li><li>0 allCache 1 cacheBrandCommodity 2 cacheBrandAssort 3 cacheCategoriesCommodity 4 cacheCategoriesAssort</li><li>5 cacheCommodityIntegral 6 cacheCourierCompanyAssort 7 cacheIntegralGoods 8 cacheCouponGoods 9 cacheMemberGrade</li><li>10 cacheStore 11 cacheMallGuideAssort 12 cacheDistributionGoods 13 cacheCommodityIntegralDeduction 14 cacheCommodity</li><li>promotion</li><li>0 allStoreRule 1 cipherRule<br>*/<br>调用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> process_child = fork(MAPP.resolvePath(<span class="string">&#x27;src/@common/process.js&#x27;</span>))</span><br><span class="line">process_child.send(&#123; <span class="attr">genre</span>: <span class="string">&#x27;promotion&#x27;</span>, <span class="attr">method</span>: [<span class="number">1</span>], <span class="attr">conditions</span>: &#123; <span class="number">1</span>: &#123; <span class="attr">store_id</span>: existence.store_ids, <span class="attr">genre</span>: <span class="string">&#x27;reduction&#x27;</span> &#125; &#125; &#125;)  <span class="comment">//满减</span></span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>创建索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> MAPP.db_getDataModel(<span class="string">&#x27;commodity&#x27;</span>).collection.createIndex(&#123; <span class="attr">name</span>: <span class="string">&#x27;text&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// name_text</span></span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><a href="https://blog.csdn.net/qq_43665821/article/details/125579864">Windows 下开启副本集</a></p><p><strong>事务 demo 代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="keyword">await</span> MAPP.Mongoose.startSession() <span class="comment">// 启用事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> session.startTransaction() <span class="comment">// 开始事务</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> MAPP.db_setOne(&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">    <span class="attr">condition</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&#x27;58805dd61d8bdc9c56cc3e2d&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">$set</span>: &#123; <span class="attr">common_name</span>: <span class="string">&#x27;氢溴酸右美沙芬片[测试]&#x27;</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">        session,</span><br><span class="line">        <span class="attr">new</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(result.common_name) <span class="comment">// 修改后的结果</span></span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-throw-literal</span></span><br><span class="line">    <span class="comment">// throw &#x27;Too big&#x27; // 抛出错误</span></span><br><span class="line">    <span class="comment">// to do something..... 代码业务方法</span></span><br><span class="line">    <span class="keyword">await</span> session.commitTransaction() <span class="comment">// 提交事务</span></span><br><span class="line">    <span class="keyword">await</span> session.endSession()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">await</span> session.abortTransaction() <span class="comment">// 终止事务</span></span><br><span class="line">    <span class="keyword">await</span> session.endSession()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微信模板"><a href="#微信模板" class="headerlink" title="微信模板"></a>微信模板</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信服务订阅</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;wx_service_subscription&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MAPP.injectDBModel(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 模板名称 1.售后状态通知  2.订单发货通知 3.缴费通知 4.续费成功通知 5.待尾款提示 6.用药提醒 7.复购提醒 8.订单审核通知</span></span><br><span class="line">    <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 模版id</span></span><br><span class="line">    <span class="attr">template_id</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 是否启用</span></span><br><span class="line">    <span class="attr">enable</span>: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  name</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>用药提醒</strong></p><table><thead><tr><th>字段说明</th><th>参数</th></tr></thead><tbody><tr><td>药品名称</td><td><code>&#123;&#123;thing1.DATA&#125;&#125;</code></td></tr><tr><td>用法用量</td><td><code>&#123;&#123;thing6.DATA&#125;&#125;</code></td></tr><tr><td>注意事项</td><td><code>&#123;&#123;thing7.DATA&#125;&#125;</code></td></tr></tbody></table><p>说明:在订单支付后绑定模板 id 触发</p><p><strong>复购提醒</strong></p><p><code>&#123;thing1:&#123;value:&quot;&quot;&#125;&#125;</code> 最多 20 个中文字符,超出无法发送</p><table><thead><tr><th>字段说明</th><th>参数</th></tr></thead><tbody><tr><td>药品信息</td><td><code>&#123;&#123;thing1.DATA&#125;&#125;</code></td></tr><tr><td>温馨提示</td><td><code>&#123;&#123;thing3.DATA&#125;&#125;</code></td></tr></tbody></table><p>说明:</p><ol><li>定时器每日 8 点推送 (最近 1 个月内商品订单信息开始推送)</li><li>复购推送规则</li></ol><ul><li>待收货,已完成交易,已授权未推送过的订单</li><li>推送时间:发货时间 + 疗程时间 &lt;=当前时间</li><li>推送疗程为下一个最近时间的疗程</li><li>购买的数量没有在疗程内,不推送消息</li><li>推送内容[药品信息][温馨提示](文字内容不超过 20 个字符)</li></ul><p>用药提醒例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">thing3</span>: &#123; <span class="attr">value</span>: v.name || <span class="string">&#x27;------&#x27;</span> &#125;, <span class="comment">// 药品名称</span></span><br><span class="line">  <span class="attr">thing6</span>: &#123; <span class="attr">value</span>: v.usage || <span class="string">&#x27;------&#x27;</span> &#125;, <span class="comment">// 用法用量</span></span><br><span class="line">  <span class="attr">thing7</span>: &#123; <span class="attr">value</span>: v.precautions || <span class="string">&#x27;------&#x27;</span> &#125; <span class="comment">// 注意事项</span></span><br><span class="line"><span class="comment">// console.log()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 推送消息</span></span><br><span class="line"><span class="keyword">await</span> wx.subscribeMessage(&#123;</span><br><span class="line">  <span class="attr">touser</span>: openid,</span><br><span class="line">  <span class="attr">page</span>: <span class="string">`pagesD/indent/details?_id=<span class="subst">$&#123;order._id&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">template_id</span>: wx_service_subscription.template_id,</span><br><span class="line">  <span class="attr">miniprogramState</span>: CONFIG.miniprogramState,</span><br><span class="line">  data,</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">  <span class="comment">// 用户拒绝或者没有订阅消息</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   errcode: 43101,</span></span><br><span class="line">  <span class="comment">//   errmsg: &#x27;user refuse to accept the msg rid: 62fc6378-7f857407-1a8a6b2c&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>(data.errcode) === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;微信订阅通知发送成功！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h1><p>配置</p><blockquote><p><code>npm run copyConfig</code></p></blockquote><p>开发版配置设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;xcx.fenxiangqu.cn&#x27;</span></span><br><span class="line"><span class="keyword">const</span> ossUrl = <span class="string">&#x27;https://syhl-newretail-dev.oss-cn-shenzhen.aliyuncs.com&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    api: &#123;</span><br><span class="line">    BASE_API: `http:<span class="comment">//192.168.1.208:4556`,</span></span><br><span class="line">    <span class="comment">// 上传 请求</span></span><br><span class="line">    UPLOAD_URL: `http:<span class="comment">//192.168.1.208:4556`,</span></span><br><span class="line">    <span class="comment">// websocket 请求</span></span><br><span class="line">    WSS_URL: `ws:<span class="comment">//192.168.1.208:3378/websocket`,</span></span><br><span class="line">    <span class="comment">// 资源访问</span></span><br><span class="line">    RESOURCES_URL: ossUrl,</span><br><span class="line">    <span class="comment">// b2c 微商城</span></span><br><span class="line">    B2C_APP_URL: &#x27;&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息中心"><a href="#消息中心" class="headerlink" title="消息中心"></a>消息中心</h1><p>数据表 <code>message_center</code> <code>order_type</code> 4 商品订单 5 退款订单<br>推送消息到后台方法 <code>pushBackstageMsg</code><br>推送全部 <code>to_user_id: &#39;all&#39;</code></p><ol><li><p>支付订单推送 用户支付订单成功后自动推送</p></li><li><p>退款单推送 用户申请退款单自动推送</p></li></ol><p>推送规则</p><ol><li>超级管理员和有关联该订单门店管理员</li><li>一个订单推送一条消息</li><li>按门店推送</li></ol><h1 id="b2c"><a href="#b2c" class="headerlink" title="b2c"></a>b2c</h1><h2 id="推荐商品"><a href="#推荐商品" class="headerlink" title="推荐商品"></a>推荐商品</h2><p><code>/commodity/recommend/random</code></p><p>类型:1 首页 2 详情推荐</p><p>说明: 推荐商品必须库存大于 0,上架状态</p><p>一, b2c 首页推荐</p><p>9 个可以自定义</p><ol><li>最多设置 50 个推荐商品</li><li>b2c 前台最多随机 9 个推荐商品</li><li>超过 9 个才会随机</li><li>小于 9 个推荐商品 + 普通商品</li></ol><p>二, 详情推荐</p><ol><li>最多随机 8 个商品(关联相同商品的品牌,分类)</li></ol><h2 id="限销"><a href="#限销" class="headerlink" title="限销"></a>限销</h2><p>下单算该商品已购买的数量了(已取消订单不算)</p><p>限销拦截以下</p><ol><li>加入购物车</li><li>设置商品数量</li><li>立即购买</li><li>提交订单</li><li>支付订单</li></ol><h2 id="前台商品搜索"><a href="#前台商品搜索" class="headerlink" title="前台商品搜索"></a>前台商品搜索</h2><ol><li><p><strong>b2c 前台商品列表搜索条件</strong>(/commodity)</p><ul><li>主要搜索<br>name 商品名称/条码/厂家</li><li>其他搜索<br>brand_id 品牌 id<br>categories_id 分类 id<br>prescription 处方药类型<br>for_people 适合人群<br>in_stock 是否有货 (<code>distributed.stock</code>)<br>new_product 是否新品 (<code>distributed.new_product</code>)<br>promotion 促销类型(满赠,满赠) (<code>distributed.gift_ids</code> <code>distributed.reduction_ids</code>)</li><li>排序<br>price_sort 价格降升序 (<code>distributed.current_price</code>)<br>sales_sort 销量排序 (<code>distributed.sales</code>)</li></ul></li><li><p><strong>b2c 前台跨境商品列表搜索</strong>(/commodity/overseas)</p><ul><li>主要搜索 name 商品名称/条码</li><li>排序 sort 字段降序</li></ul></li><li><p><strong>b2c 前台其他商品排序</strong>(/commodity/leaderboard /floor/:id)</p><ul><li>楼层 库存降序 (<code>distributed.stock</code>)</li><li>商品排行榜 销量降序 (<code>distributed.sales</code>)</li></ul></li></ol><h1 id="移动医疗"><a href="#移动医疗" class="headerlink" title="移动医疗"></a>移动医疗</h1><h2 id="医师端"><a href="#医师端" class="headerlink" title="医师端"></a>医师端</h2><h2 id="患者端"><a href="#患者端" class="headerlink" title="患者端"></a>患者端</h2><h1 id="分销"><a href="#分销" class="headerlink" title="分销"></a>分销</h1><h2 id="特殊分销"><a href="#特殊分销" class="headerlink" title="特殊分销"></a>特殊分销</h2><p>页面测试</p><p>D:\fix-bug\uni-b2c\src\pagesA\crossBorder</p><p>pagesA/crossBorder/index</p><p><a href="http://192.168.1.208:8082/pagesA/crossBorder/index">http://192.168.1.208:8082/pagesA/crossBorder/index</a></p><h1 id="任选"><a href="#任选" class="headerlink" title="任选"></a>任选</h1><p>多商品任选计算</p><table><thead><tr><th align="center">例子</th><th align="center">商品 A</th><th align="center">商品 B</th></tr></thead><tbody><tr><td align="center">单价 x 数量(元 x 件)</td><td align="center">10</td><td align="center">20</td></tr><tr><td align="center">规则 1: 2 件 20 元</td><td align="center">6.66 x 1</td><td align="center">13.33 x 1</td></tr><tr><td align="center">规则 2: 3 件 30 元</td><td align="center">6 x 1</td><td align="center">12 x 2</td></tr><tr><td align="center">规则 3: 4 件 40 元</td><td align="center">6.66 x 2</td><td align="center">13.33 x 2</td></tr></tbody></table><p>计算:</p><p>规则 1:<br>商品 A 总价 10 x 1 = 10<br>商品 B 总价 20 x 1 = 20<br>商品 A 实际单价 = (10 ÷ 30 x 20) ÷ 1 ≈ 6.66<br>商品 B 实际单价 = (20 ÷ 30 x 20) ÷ 1 ≈ 13.33</p><p>规则 2:<br>商品 A 总价 10 x 1 = 10<br>商品 B 总价 20 x 2 = 40<br>商品 A 实际单价 = (10 ÷ 50 x 30) ÷ 1 = 6<br>商品 B 实际单价 = (40 ÷ 50 x 30) ÷ 2 = 12</p><p>规则 3:<br>商品 A 总价 10 x 2 = 20<br>商品 B 总价 20 x 2 = 40<br>商品 A 实际单价 = (20 ÷ 60 x 40) ÷ 2 = 6 ≈ 6.66<br>商品 B 实际单价 = (40 ÷ 60 x 40) ÷ 2 ≈ 13.33</p><h2 id="珍药优选"><a href="#珍药优选" class="headerlink" title="珍药优选"></a>珍药优选</h2><p>1.前台结算只能选择珍药商品结算</p><h2 id="分销佣金"><a href="#分销佣金" class="headerlink" title="分销佣金"></a>分销佣金</h2><p><a href="https://szsyhl.yuque.com/books/share/df982670-d0a3-47af-b353-4650ee6a4dfd/dx56dt">分销佣金指南(雨雀)</a></p><p>个人分销商佣金字段(表<code>distributor</code>)</p><p><code>wait_commission</code>: 待结算<br><code>commission</code> 已结算<br><code>extractable_commission</code> 可提取<br><code>already_commission</code> 已提取</p><h2 id="佣金结算"><a href="#佣金结算" class="headerlink" title="佣金结算"></a>佣金结算</h2><ol><li>提交订单(含分销商品)生成分销单(表<code>distribution_order</code>)</li></ol><p>方法: 普通分销 <code>distributorOrder</code> 特殊分销 <code>codeDistributorOrder</code></p><ol start="2"><li><p>支付订单生成分销收入明细(表<code>distribution_income_details</code>) 未到账<br>方法: <code>distributionIncome</code><br>说明 1: 分销单中分销收益有两条数据生成两条明细<br>说明 2: 明细结余(待结算+已结算+可提取)<br>说明 3: 全部退款取消订单 删除分销收入明细数据</p></li><li><p>确认收货结算佣金(表<code>distributor</code>)<br>方法: <code>distributionIReceipt</code><br>说明 1: 按结算规则判断分销商个人佣金对应字段结算<br>说明 2: 更新收入分销明细结字段<br>结算规则:</p><ol><li><strong>settlement_data=0 release_date=0</strong> <code>extractable_commission</code> 可提现</li><li><strong>settlement_data=0 release_date&gt;0</strong> <code>commission</code> 已结算</li><li><strong>settlement_data&gt;0</strong> <code>wait_commission</code> 待结算</li></ol></li><li><p>结算定时器<br>方法: <code>settlementCommission</code><br>说明:</p><ol><li>结算日 已结算增加 待结算减少</li><li>发放日 可提取增加 已提取减少</li></ol></li></ol><p>后台账户佣金: 已结算+可提现</p><p>b2c 前台账户佣金<br>累计收益: 已结算+可提取+已提现<br>今日预估收入:今天分销收入明细<code>amount</code>字段累加(含未到账,创建时间)<br>本月预估收入:本月分销收入明细<code>amount</code>字段累加(含未到账,创建时间)<br>账户余额: 已结算+可提现</p><h1 id="店员端"><a href="#店员端" class="headerlink" title="店员端"></a>店员端</h1><p><strong>app_shop_assistant</strong></p><h1 id="webpos"><a href="#webpos" class="headerlink" title="webpos"></a>webpos</h1><h2 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h2><p>webpos 退款功能说明:</p><ol><li>全部退款可以按原路退或按现金退</li><li>部分退款,按原路退或现金退(单支付)</li><li>部分退款,只能按现金退(多支付)</li><li>退款金额不能超出订单实收金额</li><li>自定义退款数量不能超出商品原数量</li><li>退款金额为商品最终价格金额(平摊后的金额)</li><li>退款金额不能超出商品平摊后的金额</li></ol><h2 id="收银台"><a href="#收银台" class="headerlink" title="收银台"></a>收银台</h2><p><code>order_total</code> 应收金额 (订单金额)<br><code>pay_total</code> 实付金额<br><code>coupon_amount</code> 优惠券抵扣金额<br><code>discount_amount</code> 促销优惠金额 (满减金额)<br><code>member_amount</code> 会员优惠金额 (会员价/内购价)<br><code>whole_amount</code> 整单改价金额 (整单/单品字段二选一)<br><code>single_amount</code> 单品改价金额 (整单/单品字段二选一)</p><p><code>save_data.is_change_price</code> = false 是否自动切换价格(切换会员默认选择最优会员价)<br><code>save_data.no_change</code> = true 是否处理商品会员价/内购价</p><p><code>save_data.pay_total</code> = 0 重新计算应收金额<br><code>save_data.coupon_amount</code> = 0 重新计算优惠券金额</p><p><code>getPendingOne</code> 获取默认挂单信息</p><p><code>getPendingOrder</code> 获取挂单详细信息</p><p><code>productSum</code> 计算商品金额支付</p><p><code>savePendingOrder</code> 保存挂单信息</p><p><code>fullReductionOffer</code> 满减处理方法</p><p><code>fullGiftOffer</code> 满赠处理方法</p><p><code>optimalAmount</code> 处理最优解</p><p><code>goodPromotionRuleList</code> 获取所有商品促销类型</p><p><code>goodSortFn</code> 商品排序</p><p><code>disposeProductList</code> 处理商品字段</p><p><code>noBatchNumber</code> 只按商品销售 (清除批号数组)</p><p><code>disposeBatchNumber</code> 处理批号数据</p><p>收银台字段说明:</p><p>品种数量: 商品个数(对应商品最大的序号)<br>应收金额 = 商品总价相加<br>实收金额 = 应收金额 - 促销优惠 - 改价金额 - 优惠券金额</p><p>促销优惠 = 赠品金额 + 满减金额</p><h2 id="单品改价"><a href="#单品改价" class="headerlink" title="单品改价"></a>单品改价</h2><p>只有普通商品才能改价</p><p>会员价/内购价修改价格变成商城价</p><p>接口名 <code>/commodity/modify/:id</code></p><h2 id="促销"><a href="#促销" class="headerlink" title="促销"></a>促销</h2><p>优先级:</p><p>目前 webpos 添加顺序</p><ol><li>限时抢购 —&gt; 满减 —&gt; 满赠—&gt; 普通</li></ol><p>同个活动的优先级: 先按设置优先级,再按更新时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sort: &#123;</span><br><span class="line">  <span class="attr">priority</span>: -<span class="number">1</span>,</span><br><span class="line">  <span class="attr">update_time</span>: -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>促销类型</strong></p><p><code>general</code> 普通商品<br><code>match_package</code> 组合套餐<br><code>redemption</code> 加钱换购<br><code>limited_time_buying</code> 限时抢购<br><code>presale</code> 预售<br><code>integral_exchange</code> 积分兑换</p><p>1.普通商品 2.限时抢购(限时,限量) 3.满减 4.满赠 5.组合套餐 6.换购 7.预售 8.积分兑换</p><p>门店商品库存不足时,下架状态无法下单购买</p><p>库存注意:</p><ol><li>webpos 库存按商品批号库存,b2c 库存按商品总库存判断</li><li>赠品活动库存目前版本已去掉(赠品库存按门店库存)</li><li>限时抢购设置商品活动库存为 0 时,不限时库存,为商品门店库存</li><li>组合套餐设置活动库存为 0 时,不限时库存,库存为组合商品内最小套餐数量</li><li>活动库存小于门店库存,按门店库存销售</li><li>webpos 批号排序:先按有效期日期近到远排序,如有效期一样,则按批号库存从大到小排序</li></ol><p>组合商品库存 1.当活动库存大于 0 时,以门店库存为主,必须小于活动库存 2.当活动库存等于 0 时(没限制库存) 以活动库存为主</p><p>简单功能说明</p><table><thead><tr><th>促销类型</th><th>说明</th></tr></thead><tbody><tr><td>普通商品</td><td>普通商品含商城价/会员价/内购价,只有普通商品才能切换价格类型</td></tr><tr><td>限时抢购</td><td>限时(按时),限量(按日) (含活动价格,活动库存,限购数量)</td></tr><tr><td>满减</td><td><code>满购x元/件减y元</code>或 <code>满购x元/件打y折</code></td></tr><tr><td>满赠</td><td><code>购买x元/件送y件赠品</code> 加 <code>购买x元/件加送y件赠品</code> (已去掉赠品库存)</td></tr><tr><td>组合套餐</td><td>多个商品价格和数量捆绑合计 (含套餐价格,活动库存,限购数量)</td></tr><tr><td>换购</td><td>达到某个金额后,可以选择加钱换购多种商品 (含换购价格,活动库存,换购数量)</td></tr><tr><td>预售</td><td>商品先支付定金,在指定时间支付尾款 (含预售金额,定金,活动库存)</td></tr><tr><td>积分兑换</td><td>积分兑换商品 (含兑换库存,兑换价格)</td></tr></tbody></table><p>收银台/购物车说明:</p><ol><li>目前促销活动规则只能手动选择</li><li>同种商品只能用一个促销活动,不同种商品可以设置同种一个促销(满减,满赠)</li><li>订单可以有多个促销活动的商品</li><li>改价: 只能改普通商品的价格,不能修改促销商品价格</li><li>添加会员后,再添加商品默认带出商品最优价(会员价,内购价)</li><li>有满减促销时,先减满减金额,再减优惠券金额</li></ol><p>公式–商品分摊(订单含满减,优惠券)</p><ol><li>商品促销分摊 = (促销金额 ÷ 总金额) x 商品金额</li><li>商品优惠券分摊 = (优惠券金额 ÷ 总金额) x 商品金额</li><li>商品支付金额 = 商品金额 - 满减分摊- 优惠券分摊</li></ol><p>例子:</p><p><img src="/image/retail_core/jisuan.png" alt="jsuan.png"></p><h3 id="webpos-1"><a href="#webpos-1" class="headerlink" title="webpos"></a>webpos</h3><p><code>const goodPromotionRuleList</code> 处理,获取所有商品促销类型</p><p><code>const disposeProductList</code> 处理商品字段</p><p><code>const disposeBatchNumber</code> 处理所有商品批号库存</p><p>过滤条件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> MAPP.db_queryAll(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;batch_number&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;noPage&#x27;</span>,</span><br><span class="line">  <span class="attr">pageTurn</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">isCount</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123;</span><br><span class="line">    store_id,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;合格&#x27;</span>,</span><br><span class="line">    <span class="attr">is_delete</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">goods_id</span>: &#123;</span><br><span class="line">      <span class="attr">$in</span>: good_ids_arr.reduce(<span class="function">(<span class="params">p, n</span>) =&gt;</span> p.concat(MAPP.MTypesId(n.toString())), []),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>b2c 立即购买</strong></p><p>最优促销规则</p><p><strong>商品列表</strong></p><p><code>order_total</code> 订单金额 (应收金额)<br><code>pay_total</code> 实付金额 (实收金额)</p><h2 id="配置打包"><a href="#配置打包" class="headerlink" title="配置打包"></a>配置打包</h2><p><strong>桌面应用包</strong></p><ol><li><p>在 <code>package.json</code> 中的 <code>dependencies</code> 添加以下三个依赖包(用 npm 安装)<br><code>&quot;electron&quot;: &quot;^12.0.0&quot;,</code><br><code>&quot;electron-devtools-installer&quot;: &quot;^3.1.0&quot;,</code><br><code>&quot;vue-cli-plugin-electron-builder&quot;: &quot;~2.0.0&quot;,</code></p><p>执行 electron:build 报错</p><p>在项目根目录新增<code>.npmrc</code> 文件</p><p>添加<br><code>ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</code></p><p>全局安装 npm install electron -g</p><p>安装失败处理: <code>npm config set ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/</code> //配置安装镜像源地址<br>打包失败处理: <code>npm config set ELECTRON_BUILDER_BINARIES_MIRROR https://mirrors.huaweicloud.com/electron-builder-binaries/</code> // 配置打包镜像源地址</p><p><a href="https://blog.csdn.net/qq_33973359/article/details/105602141">安装源说明</a></p></li><li><p>manifest.json 路由配置<code>history</code>改成<code>hash</code></p></li><li><p>运行打包</p></li></ol><p><code>npm run electron</code> 打包 64 位应用程序<br><code>npm run electron:build32</code> 打包 32 位应用程序</p><h2 id="商品"><a href="#商品" class="headerlink" title="商品"></a>商品</h2><p>获取所有商品促销类型 <code>const goodPromotionRuleList</code></p><p>处理商品促销字段提示合并组合商品和赠品,换购商品(重新加载商品列表) <code>const disposeProductList</code></p><h2 id="高德地图"><a href="#高德地图" class="headerlink" title="高德地图"></a>高德地图</h2><p>先创建<code>Web服务</code>应用(接口) <code>Web端</code>应用(页面)保存 key 和密钥</p><h1 id="库存"><a href="#库存" class="headerlink" title="库存"></a>库存</h1><p>新零售目前库存字段</p><ol><li><p>商品总库存</p><p>冻结数量<code>blocked_stock</code> 占用数量 <code>occupy_stock</code> 门店库存<code>stock</code></p><p>可销库存 = 门店库存 - 冻结数量 - 占用数量</p></li><li><p>批号库存 <code>stock</code> 冻结数量 <code>blocked_stock</code></p><p>可销库存 = 批号库存 - 冻结数量</p></li></ol><p>webpos 库存说明:</p><ol><li>目前销售先冻结或占用数量,同步日清后才去扣除掉门店账面库存数量,冻结和占用数量</li><li>页面显示的库存都是<code>可销库存</code></li><li>按批号销售:直接冻结商品所在批号数量和冻结商品总数量</li><li>按商品销售:商品销售自动分配批号,出现<code>负库存</code>,数量加在商品<code>占用数量</code>字段</li><li>日清结果:<br>① 更新商品账面和批号库存<br>② 更新订单商品批号数据和日清状态<br>③ 插入/更新新的库存流水记录</li></ol><h2 id="webpos-销售"><a href="#webpos-销售" class="headerlink" title="webpos 销售"></a>webpos 销售</h2><p><strong>总库存字段</strong></p><p>按商品销售:</p><p>可销库存 = 门店账面库存 - 冻结数量 - 占用数量</p><table><thead><tr><th align="center">例子</th><th align="center">商品 A</th><th align="center">批号 1</th><th align="center">批号 2</th><th align="center">数据(行)</th></tr></thead><tbody><tr><td align="center">库存(件)</td><td align="center">15</td><td align="center">10</td><td align="center">5</td><td align="center"></td></tr><tr><td align="center">1. 销售 10</td><td align="center">冻结:10,可销:5</td><td align="center">冻结:10,可销:0</td><td align="center">冻结:0,可销:5</td><td align="center">A1 x 10</td></tr><tr><td align="center">2. 销售 12</td><td align="center">冻结:12,可销:3</td><td align="center">冻结:10,可销:0</td><td align="center">冻结:2,可销:3</td><td align="center">A1 x 10 <br> A2 x 2</td></tr><tr><td align="center">3. 销售 20(负)</td><td align="center">冻结 15,可销:0,占用:5</td><td align="center">冻结:10,可销:0</td><td align="center">冻结:5,可销:0</td><td align="center">A1 x 10 <br> A2 x 5 <br> A (空) x 5</td></tr></tbody></table><p><u>带下划线的文本</u></p><p>门店商品批号库存查询<br><code>circulation_record</code></p><p>封装方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加批号库存记录</span></span><br><span class="line"><span class="keyword">await</span> addCirculationRecord(&#123;</span><br><span class="line">  <span class="attr">good_id</span>: commodity._id,</span><br><span class="line">  <span class="attr">batch_id</span>: batch_one ? batch_one._id : <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">quantity</span>: TRANSIT_QUANTITY,</span><br><span class="line">  <span class="attr">receipt_number</span>: PUT_NUMBER,</span><br><span class="line">  <span class="attr">receipt_type</span>: <span class="string">&#x27;c&#x27;</span>, <span class="comment">// 单据类型 a入库 b销售 c门店调拨 d退库 e初装 f盘点 g退款 h取消订单</span></span><br><span class="line">  operator = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  operator_id = <span class="literal">null</span>,</span><br><span class="line">  store_id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扣商品库存</span></span><br><span class="line"><span class="keyword">await</span> MAPP.db_setOne(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;commodity&#x27;</span>,</span><br><span class="line">  <span class="attr">condition</span>: &#123; <span class="attr">_id</span>: commodity._id, <span class="string">&#x27;distributed.store_id&#x27;</span>: pick_store._id &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">$inc</span>: &#123; <span class="string">&#x27;distributed.$.stock&#x27;</span>: inc_stock &#125; &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>库存批号库存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> MAPP.db_setOne(&#123;</span><br><span class="line">     <span class="attr">model</span>: <span class="string">&#x27;batch_number&#x27;</span>,</span><br><span class="line">     <span class="attr">condition</span>: &#123;</span><br><span class="line">       <span class="attr">_id</span>: batch_one._id</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">$inc</span>: &#123;</span><br><span class="line">         <span class="attr">stock</span>: inc_stock</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h2 id="库存单据"><a href="#库存单据" class="headerlink" title="库存单据"></a>库存单据</h2><p>单据保护:审核前是否修改原单数据</p><p>只要有任一总部账号进入审核页面，均触发单据保护</p><p><code>data_protection</code> 请货单 盘点单 配送单 退库单</p><p>是否审核: 总店是否可审核其他门店单据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 盘点单是否需审核</span></span><br><span class="line">    <span class="attr">check_need_audit</span>: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="comment">// 请货单是否需审核</span></span><br><span class="line">    <span class="attr">apply_lading_need_audit</span>: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="comment">// 手录入库单是否需审核</span></span><br><span class="line">    <span class="attr">warehousing_need_audit</span>: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="comment">// 门店退库单是否需审核</span></span><br><span class="line">    <span class="attr">refund_lading_need_audit</span>: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">true</span> &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="盘点单"><a href="#盘点单" class="headerlink" title="盘点单"></a>盘点单</h3><p>说明:</p><ol><li>完成盘点单后,需要判断是否需要审核</li><li>如需要审核,由中台总店审核和平账库存</li><li>如无需审核,则店员端自动审核通过并自动平账库存</li><li>审核通过后才会推送(每 2 分钟)</li></ol><h3 id="请货单"><a href="#请货单" class="headerlink" title="请货单"></a>请货单</h3><p>说明:</p><ol><li>子门店向子门店请货,不推送 erp,由子门店处理</li><li>子门店向总部请货,推送 erp,由 erp 同步接口出库单 (每 2 分钟同步一次)</li><li>请货单可以配置是否需要审核</li></ol><p>店员端:</p><p>A 门店—&gt;B 门店</p><p>A 门店 向 B 门店请货</p><p>一 、请货流程:</p><ol><li>选择发货门店</li><li>添加请货商品</li><li>设置商品请货数量</li><li>提交请货单</li><li>审核请货单(如审核驳回可以修改后重新提交)</li></ol><p>二 、出库流程 (子门店之间)</p><ol><li>B 门店生成拣货任务 (总部没有生成拣货任务)</li><li>获取根据请货单商品</li><li>选择商品批号和设置数量(子门店需要冻结库存)</li><li>确认出库 (减少账面库存)</li><li>A 门店生成收货任务</li></ol><p>三 、收货流程</p><ol><li>子门店之间,出库数量等于收货数量</li><li>总库出库,子门店收货可以不等于出库数量</li></ol><h3 id="出库单"><a href="#出库单" class="headerlink" title="出库单"></a>出库单</h3><p>说明:</p><ol><li>新零售出库单有关联请货单</li><li>erp 出库单可以不关联请货单</li></ol><h1 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h1><p>新零售目前商品价格: 普通价(零售价/现价) 会员价 付费会员价 内购价 (四种)</p><p>注意:</p><ol><li>若线下零售价为 0 时,用线上零售价</li><li>会员价包括商城会员价(免费),付费会员价</li><li>内购价针对职工内部(职工账号与会员手机号一致则享受内购价)</li></ol><p>设置等级会员价</p><ol><li>权益中心必须开启</li><li>设置商品折扣字段 (折扣大于 0)</li></ol><p><code>current_price</code> 零售价（线上）<br><code>current_price_offline</code> 零售价（线下）<br><code>staff_price</code> 内购价<br><code>member_price</code> 会员价<br><code>paid_price</code> plus 会员价</p><h2 id="会员价"><a href="#会员价" class="headerlink" title="会员价"></a>会员价</h2><p>说明:</p><ol><li>普通会员优先级: 商品指定价 &gt; 其它等级商品折扣</li><li>折扣值范围: 0 &lt; 折扣 &lt; 10</li><li>会员价计算: 会员价 = 零售价 x 折扣 x 0.1</li><li>会员价有可能会大于零售价</li><li>优惠金额: 零售价 - 会员价 (可正可负)</li></ol><p>例子:<br>A 商品 10 元,享折扣八折<br>会员价: 10x8x0.1=8(元)</p><p><code>member_price</code> 普通会员价商品表(指定)</p><p><code>mall_member</code> 普通会员等级表</p><p>字段结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;member_benefits&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span> : <span class="string">&quot;discount&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;number&quot;</span> : <span class="number">8</span>,</span><br><span class="line">        <span class="string">&quot;key_ids&quot;</span> : [],</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;63f85eca8cd8ed367bb1aa97&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取方法</span></span><br><span class="line"> <span class="comment">// 普通会员价</span></span><br><span class="line">  <span class="keyword">const</span> &#123; member_price = <span class="number">0</span>, is_member &#125; = <span class="keyword">await</span> getMemberPrice(&#123; <span class="attr">current_price</span>: commodity.current_price, user_id &#125;)</span><br><span class="line">  commodity.member_price = member_price</span><br><span class="line">  commodity.is_member = is_member</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//批量修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> memberGoods(&#123; <span class="attr">pageTurn</span>: <span class="literal">false</span>, <span class="attr">good_list</span>: result, store_id, user_id &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="plus-会员价"><a href="#plus-会员价" class="headerlink" title="plus 会员价"></a>plus 会员价</h2><p>说明:</p><ol><li>plus 会员优先级: 商品指定价&gt; 专属商品折扣 &gt; 其它商品折扣</li><li>折扣值范围: 0 &lt; 折扣 &lt; 10</li><li>会员价计算: 会员价 = 零售价 x 折扣 x 0.1</li></ol><p><code>paid_price</code> 付费会员价商品表(指定)</p><p><code>paid_member</code> 付费 plus 会员表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;member_benefits&quot;</span> : [</span><br><span class="line">    <span class="comment">//专属商品折扣</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;exclusive_merchandise&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;number&quot;</span> : <span class="number">7</span>,</span><br><span class="line">      <span class="comment">//专属商品折扣</span></span><br><span class="line">      <span class="string">&quot;key_ids&quot;</span> : [</span><br><span class="line">        ObjectId(<span class="string">&quot;58805dd61d8bdc9c56cc3e31&quot;</span>),</span><br><span class="line">        ObjectId(<span class="string">&quot;58805dd61d8bdc9c56cc3e32&quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">//指定商品价</span></span><br><span class="line">      <span class="string">&quot;goods_ids&quot;</span> : [</span><br><span class="line">        ObjectId(<span class="string">&quot;58805dd61d8bdc9c56cc3e3c&quot;</span>),</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;63f7139568a92829840ec51a&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//其它商品折扣</span></span><br><span class="line">      <span class="string">&quot;type&quot;</span> : <span class="string">&quot;discount&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;number&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="string">&quot;key_ids&quot;</span> : [],</span><br><span class="line">      <span class="string">&quot;goods_ids&quot;</span> : [],</span><br><span class="line">      <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;63f7139568a92829840ec518&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取方法</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">await</span> getPaidPrice(&#123; <span class="attr">current_price</span>: commodity.current_price, user_id &#125;, ctx)</span><br><span class="line">commodity.paid_price = obj.paid_price</span><br><span class="line">commodity.is_paid = obj.is_paid</span><br></pre></td></tr></table></figure><h2 id="内购价"><a href="#内购价" class="headerlink" title="内购价"></a>内购价</h2><p>说明:</p><ol><li>内购价: 商品指定价 &gt; 专属商品折扣</li><li>折扣值范围: 0 &lt; 折扣 &lt; 10</li><li>内购价计算: 内购价 = 零售价 x 折扣 x 0.1</li></ol><p><code>staff_price</code> 内购价商品表(指定)</p><p><code>staff_member</code> 内购规则表</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;member_benefits&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 专属商品</span></span><br><span class="line">        <span class="string">&quot;type&quot;</span> : <span class="string">&quot;exclusive_merchandise&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;number&quot;</span> : <span class="number">8</span>,</span><br><span class="line">        <span class="comment">// 商品折扣</span></span><br><span class="line">        <span class="string">&quot;key_ids&quot;</span> : [</span><br><span class="line">            ObjectId(<span class="string">&quot;58805dd61d8bdc9c56cc3e2d&quot;</span>),</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 商品指定价</span></span><br><span class="line">        <span class="string">&quot;goods_ids&quot;</span> : [</span><br><span class="line">            ObjectId(<span class="string">&quot;58805dd61d8bdc9c56cc3e31&quot;</span>),</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;64ebf7a08656fa4768ad1e7a&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h1><h1 id="客服"><a href="#客服" class="headerlink" title="客服"></a>客服</h1><p>说明:</p><ol><li>按门店匹配</li></ol><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><p>自动调度说明(定时器)</p><ol><li>开启自动调度配置,设置无响应时间</li><li>所有未接入的对话 (有对话过的)</li><li>对话更新时间小于(当前时间 - 无响应时间)</li></ol><h2 id="商品-1"><a href="#商品-1" class="headerlink" title="商品"></a>商品</h2><p><code>product_list</code></p><p>单个商品价格:<br><code>price</code>：零售价<br><code>cypher_price</code> : 普通价(零售价/会员价/plus 价/内购价)<br><code>reduction_number</code>: 满减抵扣金额<br><code>coupon_number</code>: 优惠券抵扣金额<br><code>member_number</code>: 会员抵扣金额<br><code>integral_price</code>: 积分抵扣金额<br><code>final_price</code> 最终价格(实际支付价格)</p><p>达到满减条件为:</p><ol><li>满减活动商品实际支付总价 &gt;= 满减门槛规则金额</li><li>满减活动商品总件数 &gt;= 满减门槛件数</li></ol><p>满减满足金额为普通商品<code>cypher_price</code>计算判断</p><p>优惠券可用条件为: 总商品实际支付总价 - 满减金额 &gt;= 优惠券门槛金额</p><p>价格计算</p><p>普通价 = 零售价 - 折扣金额 - 改价金额</p><p><code>cypher_price</code> = <code>price</code> - <code>member_number</code> - <code>change_number</code></p><p>支付价 = 普通价 - 满减金额 - 优惠券金额 - 积分抵扣金额</p><p><code>final_price</code> = <code>cypher_price</code> - <code>reduction_number</code> - <code>coupon_number</code> - <code>integral_price</code></p><p><code>注</code>:</p><ol><li>如抵扣金额(优惠金额小于 0.01 元)按 0 元计算</li><li>webpos 达到满减条件为: 满减活动商品零售价总价 &gt;= 满减门槛规则金额</li></ol><h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><p>型号 :Xprinter 58</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>易语言安装与破解说明：<br>一、解压后，先安装易语言 5.9 官方正式版<br>二、将易语言 5.92 版升级包里面的文件复制到安装目录<br>三、将易语言 5.92 破解补丁里面的“e.exe”复制到安装目录<br>四、可以选择安装易语言助手<br>五、如果出现静态连接失败，请使用“易语言静态连接失败智能修复器 v1.2.exe”进行修复</p><p>开钱箱源码</p><p>.版本 2<br>.支持库 eAPI</p><p>.程序集 程序集 1</p><p>.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行<br>.局部变量 hPrinter, 整数型<br>.局部变量 pd, PRINTER_DEFAULTS<br>.局部变量 字符串, 字节型, , “5”</p><p>字符串 ＝ { 27, 112, 0, 128, 128 } ‘ 打印机指令<br>OpenPrinter (取默认打印机 (), hPrinter, pd)<br>StartDocPrinterA (hPrinter, 1, pd)<br>StartPagePrinter (hPrinter)<br>WritePrinter (hPrinter, 字符串, 5, 0)<br>ClosePrinter (hPrinter)<br>‘ 调试输出 (OpenPrinter (取默认打印机 (), hPrinter, pd))<br>‘ 调试输出 (hPrinter)<br>‘ 调试输出 (StartDocPrinterA (hPrinter, 1, pd))<br>‘ 调试输出 (StartPagePrinter (hPrinter))<br>‘ 调试输出 (WritePrinter (hPrinter, 字符串, 5, 0))<br>‘ 调试输出 (ClosePrinter (hPrinter))<br>返回 (0) ‘ 可以根据您的需要返回任意数值</p><p>其他打印机开钱箱指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">Axionhm A715 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">251</span></span><br><span class="line">Axionhm A756 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">251</span></span><br><span class="line">Axionhm A794 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">251</span></span><br><span class="line">Bixolon SRP-<span class="number">275</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson All <span class="number">27</span>,<span class="number">121</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson M51PD <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson TM-T60 <span class="number">27</span>,<span class="number">112</span>,<span class="number">32</span>,<span class="number">25</span></span><br><span class="line">Epson TM-L60II <span class="number">27</span>,<span class="number">70</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">50</span></span><br><span class="line">Epson TM-T70 <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson T88iii <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U200D <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson T88iiiP <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">240</span></span><br><span class="line">Epson TM-U200D <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">240</span></span><br><span class="line">Epson TM-88IV <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson TM-88V <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson M188D <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson M192C <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson TM-U200 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U200B <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U200D <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">240</span></span><br><span class="line">Epson TM-U210PD <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U210-D <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U220A <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U220PD <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U295 <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Epson ADP-<span class="number">300</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-300D <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U950P <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U300PD <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U325D <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U375 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson M665A <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">250</span></span><br><span class="line">Epson TM-T883P <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">250</span></span><br><span class="line">Epson TM-U950P <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">250</span></span><br><span class="line">Epson TM-H500II <span class="number">27</span>,<span class="number">113</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Epson TM-H6000 <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">IBM <span class="number">4610</span> <span class="number">7</span></span><br><span class="line">IBM <span class="number">4611</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">250</span></span><br><span class="line">Ithaca PcOS-<span class="number">51</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Ithaca PcOS-<span class="number">52</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Ithaca PcOSjet <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Ithaca <span class="number">80</span>-PLUS <span class="number">27</span>,<span class="number">120</span>,<span class="number">1</span></span><br><span class="line">Ithaca SERIES-<span class="number">90</span> <span class="number">27</span>,<span class="number">120</span>,<span class="number">1</span></span><br><span class="line">Ithaca <span class="number">150</span> <span class="number">27</span>,<span class="number">120</span>,<span class="number">1</span></span><br><span class="line">Ithaca POSjet-<span class="number">1000</span> <span class="number">27</span>,<span class="number">120</span>,<span class="number">1</span></span><br><span class="line">NCR <span class="number">7167</span> <span class="number">27</span>,<span class="number">120</span>,<span class="number">1</span></span><br><span class="line">Oliveti PRT-<span class="number">100</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Pos-X XR-<span class="number">200</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Pos-X XR-<span class="number">500</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Posiflex CR-<span class="number">4200</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">80</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Posiflex AURA-<span class="number">5600</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Posiflex PP6000 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Posiflex PP7000 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Samsung SRP-<span class="number">131</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">48</span>,<span class="number">50</span></span><br><span class="line">Samsung SRP-<span class="number">270</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Samsung SRP-270A <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">64</span>,<span class="number">240</span></span><br><span class="line">Samsung SRP-<span class="number">270</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">121</span></span><br><span class="line">Samsung SRP-<span class="number">350</span> <span class="number">27</span>,<span class="number">110</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">250</span></span><br><span class="line">Star All <span class="number">27</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">55</span>,<span class="number">7</span></span><br><span class="line">Star TSP <span class="number">100</span> <span class="number">7</span></span><br><span class="line">Star SP212 <span class="number">27</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">55</span>,<span class="number">7</span></span><br><span class="line">Star TSP200 <span class="number">27</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">55</span>,<span class="number">7</span></span><br><span class="line">Star SP500 <span class="number">27</span>,<span class="number">122</span>,<span class="number">49</span>,<span class="number">7</span></span><br><span class="line">Star TSP-<span class="number">600</span> <span class="number">27</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">7</span></span><br><span class="line">Star TSP-<span class="number">700</span> <span class="number">27</span>,<span class="number">07</span>,<span class="number">11</span>,<span class="number">55</span>,<span class="number">07</span></span><br><span class="line">Star SP2000 <span class="number">27</span>,<span class="number">122</span>,<span class="number">49</span>,<span class="number">7</span></span><br><span class="line">Tec RKP300 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">250</span></span><br><span class="line">Tec TRST-<span class="number">53</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">250</span></span><br><span class="line">Toshiba SX2100 <span class="number">27</span>,<span class="number">112</span>,<span class="number">32</span>,<span class="number">55</span>,<span class="number">255</span></span><br><span class="line">Toshiba Tec-DRJST-<span class="number">51</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">250</span></span><br><span class="line">Unisys EF4272 <span class="number">27</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">250</span></span><br><span class="line">Wasp WTP-<span class="number">100</span> <span class="number">27</span>,<span class="number">112</span>,<span class="number">49</span>,<span class="number">48</span>,<span class="number">48</span></span><br></pre></td></tr></table></figure><h1 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h1><h2 id="裕创"><a href="#裕创" class="headerlink" title="裕创"></a>裕创</h2><p>字段</p><ol><li>会员表<code>member</code>增加门店 <code>store_ids</code> 关联</li><li>平台配置<code>platform_deploy</code><br>总部派送,不限制门店库存<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 门店缺货由总部派送（裕创280增加）</span></span><br><span class="line"> <span class="attr">head_office_delivery</span>: &#123; <span class="attr">type</span>: <span class="built_in">Boolean</span>, <span class="attr">default</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  <span class="comment">// 门店会员访问权限（裕创280增加） 0 所有门店 1 仅限访问关联加盟店</span></span><br><span class="line">  <span class="attr">allow_stores</span>: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>门店表<code>store</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="comment">// 门店类型 0 自营店  1 加盟店</span></span><br><span class="line"> <span class="attr">store_type</span>: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>订单表 <code>order_library</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 商品列表</span></span><br><span class="line">  <span class="attr">product_list</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 调货门店erp内码</span></span><br><span class="line">      <span class="attr">erp_code</span>: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取品平台配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> platform_deploy = <span class="keyword">await</span> MAPP.db_getOne(&#123;</span><br><span class="line">  <span class="attr">model</span>: <span class="string">&#x27;platform_deploy&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"><span class="keyword">const</span> &#123; headStoreGood &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../commodity/_methods&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">stock</span>: _stock = <span class="number">0</span>, <span class="attr">store_id</span>: _store_id = <span class="string">&#x27;&#x27;</span> &#125; = <span class="keyword">await</span> headStoreGood(&#123; <span class="attr">goods_id</span>: product_id, store_id &#125;)</span><br><span class="line"><span class="comment">// 当前门店是总部</span></span><br><span class="line"><span class="keyword">if</span> (_store_id.toString() === store_id.toString()) &#123;</span><br><span class="line">  _stock = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">storeCommodity.stock = MAPP.plus(storeCommodity.stock, _stock)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：<br>1、消费者如果只关联加盟店，且平台配置开启了【仅限访问关联加盟】（原【仅访问关联门店】），那么该消费者只能访问关联的加盟店，不可访问直营店和总店。<br>2、消费者如果关联了任意直营店，则可访问总店、其他任何直营店和已经关联的加盟店。<br>3、平台配置同时开启【仅限访问关联加盟】和【登录时选择配送方式】时，【登录时选择配送方式】的弹窗以消费是否关联了直营店为判断依据。<br>1）如果消费者仅关联加盟店，登录时弹窗不需要显示，且不限制可视门店距离，并直接进入已关联的最近加盟店。<br>2）如果消费者关联了任意直营店，登录时显示配送方式选择弹窗。<br>4、调货门店 erp 内码，指的是门店缺货由总部派送商品时，缺货门店的 erp 内码。</p><h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><h2 id="商品基础表"><a href="#商品基础表" class="headerlink" title="商品基础表"></a>商品基础表</h2><table><thead><tr><th align="center">同步字段</th><th align="center">数据表字段</th><th align="center">同步值</th><th align="center">数据值</th><th align="center">是否非空</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">B_SN</td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center">非空</td><td align="center">同步序号</td></tr><tr><td align="center">NAME</td><td align="center">name</td><td align="center">商品名称</td><td align="center">商品名称</td><td align="center">非空</td><td align="center">名称</td></tr><tr><td align="center">BAR_CODE</td><td align="center">bar_code</td><td align="center">100001</td><td align="center">100001</td><td align="center">非空</td><td align="center">条码</td></tr><tr><td align="center">CODING</td><td align="center">coding</td><td align="center">A00001</td><td align="center">A00001</td><td align="center">非空</td><td align="center">编码</td></tr><tr><td align="center">COMMON_NAME</td><td align="center">common_name</td><td align="center">通用名</td><td align="center">通用名</td><td align="center">非空</td><td align="center">通用名</td></tr><tr><td align="center">MNEMONIC_CODE</td><td align="center">mnemonic_code</td><td align="center">zjm</td><td align="center">zjm</td><td align="center">非空</td><td align="center">首字母</td></tr><tr><td align="center">PRESCRIPTION</td><td align="center">prescription</td><td align="center">处方药</td><td align="center">处方药</td><td align="center">可空</td><td align="center">处方药类型</td></tr><tr><td align="center">ORIGINAL_PRICE</td><td align="center">original_price</td><td align="center">3</td><td align="center">3</td><td align="center">非空</td><td align="center">商品原价</td></tr><tr><td align="center">CURRENT_PRICE</td><td align="center">current_price</td><td align="center">3</td><td align="center">3</td><td align="center">非空</td><td align="center">商品现价(线上)</td></tr><tr><td align="center">CURRENT_PRICE_OFFLINE</td><td align="center">current_price_offline</td><td align="center">0</td><td align="center">0</td><td align="center">可空</td><td align="center">商品现价(线下)</td></tr><tr><td align="center">KEYWORD</td><td align="center">keyword</td><td align="center">西药,感冒药</td><td align="center">西药,感冒药</td><td align="center">可空</td><td align="center">关键字</td></tr><tr><td align="center">DRUG_TYPE</td><td align="center">drug_type</td><td align="center">西药</td><td align="center">2</td><td align="center">非空</td><td align="center">药品类型</td></tr><tr><td align="center">DOSAGE</td><td align="center">usage</td><td align="center">每日三次</td><td align="center">每日三次</td><td align="center">可空</td><td align="center">用法用量</td></tr><tr><td align="center">UNIT</td><td align="center">unit</td><td align="center">件</td><td align="center">件</td><td align="center">非空</td><td align="center">单位</td></tr><tr><td align="center">UNIT_NUM</td><td align="center">unit_num</td><td align="center">1</td><td align="center">1</td><td align="center">非空</td><td align="center">单位数量</td></tr><tr><td align="center">WEIGHT</td><td align="center">weight</td><td align="center">0</td><td align="center">0</td><td align="center">可空</td><td align="center">重量</td></tr><tr><td align="center">VOLUME</td><td align="center">volume</td><td align="center">0</td><td align="center">0</td><td align="center">可空</td><td align="center">体积</td></tr><tr><td align="center">SPECIFICATION</td><td align="center">specification</td><td align="center">500g/盒</td><td align="center">500g/盒</td><td align="center">非空</td><td align="center">规格</td></tr><tr><td align="center">FORMULATION</td><td align="center">formulation</td><td align="center">肠溶片</td><td align="center">肠溶片</td><td align="center">可空</td><td align="center">剂型</td></tr><tr><td align="center">INGREDIENT</td><td align="center">ingredient</td><td align="center">-</td><td align="center">-</td><td align="center">非空</td><td align="center">成分</td></tr><tr><td align="center">SHAPE</td><td align="center">shape</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">性状</td></tr><tr><td align="center">INDICATIONS</td><td align="center">indications</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">适应症</td></tr><tr><td align="center">OVERDOSE</td><td align="center">overdose</td><td align="center">-</td><td align="center">-</td><td align="center">非空</td><td align="center">药物过量</td></tr><tr><td align="center">DRUG_EFFECT</td><td align="center">drug_effect</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">药物作用</td></tr><tr><td align="center">CLINICAL_GUIDELINES</td><td align="center">clinical_guidelines</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">临床应用指南</td></tr><tr><td align="center">MANUFACTURER</td><td align="center">manufacturer</td><td align="center">生产厂家</td><td align="center">生产厂家</td><td align="center">非空</td><td align="center">生产厂家</td></tr><tr><td align="center">PRODUCTION_ORIGIN</td><td align="center">production_origin</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">生产产地</td></tr><tr><td align="center">FOR_PEOPLE</td><td align="center">for_people</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">适用人群</td></tr><tr><td align="center">TABOO</td><td align="center">taboo</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">禁忌</td></tr><tr><td align="center">STORAGE_METHOD</td><td align="center">storage_method</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">贮藏方式</td></tr><tr><td align="center">INTRODUCTION</td><td align="center">introduction</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">商品简介</td></tr><tr><td align="center">INDICATION</td><td align="center">indication</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">功能主治</td></tr><tr><td align="center">PRECAUTIONS</td><td align="center">precautions</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">注意事项</td></tr><tr><td align="center">ADVERSE_REACTIONS</td><td align="center">adverse_reactions</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">不良反应</td></tr><tr><td align="center">MEDICINE_INTERACTIONS</td><td align="center">medicine_interactions</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">药物相互作用</td></tr><tr><td align="center">GMP_CERTIFICATION</td><td align="center">gmp_certification</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">GMP 认证</td></tr><tr><td align="center">APPROVAL_NUMBER</td><td align="center">approval_number</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">批准文号</td></tr><tr><td align="center">VALIDITY_PERIOD</td><td align="center">validity_period</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">有效期</td></tr><tr><td align="center">MEDICAL</td><td align="center">medical</td><td align="center">Y</td><td align="center">true</td><td align="center">非空</td><td align="center">是否医保</td></tr><tr><td align="center">THREE_CATEGORIES</td><td align="center">three_categories</td><td align="center">N</td><td align="center">false</td><td align="center">非空</td><td align="center">是否三类</td></tr><tr><td align="center">COLD_CHAIN</td><td align="center">cold_chain</td><td align="center">N</td><td align="center">false</td><td align="center">非空</td><td align="center">是否冷链</td></tr><tr><td align="center">OVERSEAS</td><td align="center">overseas</td><td align="center">N</td><td align="center">false</td><td align="center">非空</td><td align="center">是否境外</td></tr><tr><td align="center">TARIFF</td><td align="center">tariff</td><td align="center">0</td><td align="center">0</td><td align="center">非空</td><td align="center">进口税率</td></tr><tr><td align="center">EPIDEMIC_SITUATION</td><td align="center">epidemic_situation</td><td align="center">N</td><td align="center">false</td><td align="center">非空</td><td align="center">是否疫情</td></tr><tr><td align="center">HIDE_GOODS</td><td align="center">hide_goods</td><td align="center">N</td><td align="center">false</td><td align="center">可空</td><td align="center">是否隐藏</td></tr><tr><td align="center">SORT</td><td align="center">sort</td><td align="center">0</td><td align="center">0</td><td align="center">可空</td><td align="center">跨境排序</td></tr><tr><td align="center">NEAR_TERM_WARNING</td><td align="center">near_term_warning</td><td align="center">180</td><td align="center">180</td><td align="center">可空</td><td align="center">近效期预警天数</td></tr><tr><td align="center">LOCAL_CODE</td><td align="center">local_code</td><td align="center">-</td><td align="center">-</td><td align="center">可空</td><td align="center">本位码</td></tr><tr><td align="center">INSERT_TIME</td><td align="center"></td><td align="center">YYYY-MM-DD HH:mm:ss</td><td align="center"></td><td align="center">非空</td><td align="center">插入时间</td></tr></tbody></table><h1 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h1><h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><p>文件:</p><p>绑定标识处理  <code>/bin/socket.js</code></p><p>socket 对象封装 (客户端和服务端)  <code>/src/@common/socket_client.js</code></p><p>服务端连接  <code>/src/@common/ws.js</code></p><p>消息中心通用方法 <code>/src/@common/message_center.js</code></p><p>对应<code>message_center</code>数据表</p><p>提醒发货  订单消息间隔一分钟提醒有效</p><p><code>msg_type</code> 自定类型 (提醒发货 订单 退单)</p><p> from: <code>store_staff</code> 店员端任务类型 (收货 拣货 请货单) </p><p> from <code>message_center</code> 店员端消息中心 请货审核 退货审核</p>]]></content>
    
    
    <summary type="html">新零售代码片段</summary>
    
    
    
    <category term="代码片段" scheme="https://wecy-chen.github.io/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://wecy-chen.github.io/2022/08/22/git/"/>
    <id>https://wecy-chen.github.io/2022/08/22/git/</id>
    <published>2022-08-22T01:42:38.300Z</published>
    <updated>2024-11-04T06:36:48.087Z</updated>
    
    <content type="html"><![CDATA[<p><strong>git 学习</strong></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://git-scm.com/">官网</a></p><blockquote><p>初次安装 git 配置用户名和邮箱</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;你的名称&quot;</span><br><span class="line">$ git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><blockquote><p>git 使用 ssh 密钥</p></blockquote><p>初次使用 git 的用户要使用 git 协议大概需要三个步骤：</p><p>1.生成密钥对 2.设置远程仓库（本文以 github 为例）上的公钥 3.把 git 的 remote url 修改为 git 协议</p><h3 id="1-生成密钥对"><a href="#1-生成密钥对" class="headerlink" title="1.生成密钥对"></a>1.生成密钥对</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>截图本机已经生成过公钥了</p><p><img src="/image/git/ssh.png" alt="ssh.png"></p><p>文件说明:<br>id_rsa: 公钥<br>id_rsa.pub: 私钥</p><p>如果没有存在这个两个文件,则需要生成秘钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class="line"></span><br><span class="line">Creates a new ssh key using the provided email # Generating public/private rsa key pair.</span><br><span class="line"></span><br><span class="line">Enter file in which to save the key (/home/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>直接按 Enter 就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>完成自动生成文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in /home/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com</span><br></pre></td></tr></table></figure><h3 id="2-设置远程仓库"><a href="#2-设置远程仓库" class="headerlink" title="2.设置远程仓库"></a>2.设置远程仓库</h3><ul><li>1.查看你生成的公钥</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa xxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><ul><li>2.配置公钥<ul><li>登陆你的 github 帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</li><li>然后你复制上面的公钥内容，粘贴进“Key”文本域内。 title 域，自己随便起个名字</li><li>点击 Add key<br>完成以后，验证下这个 key 是不是正常工作：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Attempts to ssh to github</span><br></pre></td></tr></table></figure><p>看到这个<br><code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not # provide shell access.</code><br>恭喜你，你的设置已经成功了。</p><p><strong>阿里云配置失败</strong><br><a href="https://www.icode9.com/content-4-1212556.html">阿里云拉取代码失败处理</a><br>C:\Users\wecy.ssh 在这个目录下新建 config 文件<br>添加如下代码<br>Host *<br>HostkeyAlgorithms +ssh-rsa<br>PubkeyAcceptedKeyTypes +ssh-rsa</p><h3 id="3-创建-github-项目"><a href="#3-创建-github-项目" class="headerlink" title="3.创建 github 项目"></a>3.创建 github 项目</h3><p><strong>新建项目分 2 种情况：</strong></p><p>1.本地没有项目代码。 2.本地已经存在项目代码，只是想放到 github 托管。</p><blockquote><p>创建仓库</p></blockquote><p>登录你的 github 账号,来创建远程仓库(如图)</p><p><img src="/image/git/github1.png" alt="github1.png"></p><p><img src="/image/git/github2.png" alt="github2.png"></p><ul><li>由上往下输入你项目的名字、项目的描述，选择这个项目是不是公开(Public)或是作为私人项目(Private)。</li><li>Initialize this repository with a README 这个选项是问你要不要帮你根据你输入的项目名字和描述初始化一个项目(生成一个 README 的 md 文件)</li><li>再接下来是问你要不要添加项目的忽略文件(.gitigore)还有要不要为你的项目增加一个许可证(license)。</li><li>上面的根据你自己的实际需要填完和选择即可，然后点击绿色的按钮就会创建一个项目仓库了。</li><li>然后就会跳转到你项目的一个主页。</li></ul><p><strong>本地没有项目代码</strong></p><p>可以在本地创建一个空白的文件夹，然后克隆刚刚创建的项目(ps: clone url 在项目主页的右下方位置可以找到)本地，然后添加代码再上传。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir project</span><br><span class="line">cd project</span><br><span class="line">git clone https://github.com/github名/项目名.git</span><br></pre></td></tr></table></figure><p>然后就是 git add 和 git push 相应的操作。</p><p><strong>本地已有项目代码</strong></p><p>本地已创建了项目,需要提交到 github 上</p><ol><li>在你的项目文件目录先执行命令<code>git init</code>，使之成为一个 git 仓库。</li><li>将项目里所有文件加到本地的仓库，使用以下命令:<code>git add .</code> , <code>git commit -m &quot;提交信息</code></li><li>然后将 github 上的项目 pull 下来 <code>git pull https://github.com/github名/项目名.git</code></li><li>为版本库添加名为 origin 的远程版本库 <code>git remote add origin https://github.com/github名/项目名.git</code></li><li>执行推送命令，完成 GitHub 版本库的初始化(注意命令行中的-u 参数，在推送成功后自动建立本地分支与远程版本库分支的追踪)<br><code>git push -u origin master</code></li></ol><h3 id="4-修改远程地址"><a href="#4-修改远程地址" class="headerlink" title="4.修改远程地址"></a>4.修改远程地址</h3><p>使用命令 git remote -v 查看你当前的 remote url (线上项目远程地址)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/github名/项目名.git (fetch)</span><br><span class="line">origin https://github.com/github名/项目名.git (push)</span><br></pre></td></tr></table></figure><p>修改命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote set-url origin git@github.com:github名/新的项目名.git</span><br></pre></td></tr></table></figure><p>先删再添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$git remote rm origin</span><br><span class="line">$git remote add origin git@github.com:github名/新的项目名.git</span><br></pre></td></tr></table></figure><h3 id="5-删除项目"><a href="#5-删除项目" class="headerlink" title="5.删除项目"></a>5.删除项目</h3><p>进入项目设置,拉到最后<br><img src="/image/git/github-delete.png" alt="github-delete"></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="git-重置-commit-时的注释"><a href="#git-重置-commit-时的注释" class="headerlink" title="git 重置 commit 时的注释"></a>git 重置 commit 时的注释</h2><p><a href="https://blog.csdn.net/ydk888888/article/details/80167627">原地址见 CSDN</a></p><p><code>注意:在未push的情况下:</code></p><p>方法一: <code>git commit --amend</code> (修改 commit 提交内容)</p><p>方法二: <code>git reset --soft</code> (倒数第二次 commit 的 commit_id”,然后重新 git commit -m “….”)</p><h2 id="强制覆盖本地代码"><a href="#强制覆盖本地代码" class="headerlink" title="强制覆盖本地代码"></a>强制覆盖本地代码</h2><p><a href="https://blog.csdn.net/sinat_36184075/article/details/80115000">原地址见 CSDN</a></p><p><code>git fetch --all</code> (拉取所有更新，不同步)<br><code>git reset --hard origin/master</code> (本地代码同步线上最新版本(会覆盖本地所有与远程仓库上同名的文件))<br><code>git pull</code> (再更新一次)</p><p><code>git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</code> 单条执行</p><p><code>git reset --hard origin/master</code> 就这一条也行</p><h2 id="新建新分支"><a href="#新建新分支" class="headerlink" title="新建新分支"></a>新建新分支</h2><blockquote><p><code>git branch 分支名</code> 新的分支名</p></blockquote><blockquote><p><code>git checkout 分支名</code> 切换到分支</p></blockquote><blockquote><p><code>git checkout -b 分支名</code> 创建并切换分支</p></blockquote><blockquote><p><code>git push --set-upstream origin 分支名</code> 提交分支</p></blockquote><h2 id="更新远程分支列表"><a href="#更新远程分支列表" class="headerlink" title="更新远程分支列表"></a>更新远程分支列表</h2><p><code>git remote update origin --prune</code></p><p>注意:如果你的 remote branch 不是在 origin 下，按你得把 origin 换成你的名字</p><p><code>git branch -a</code></p><p>查看所有的分支(含远程分支)</p><p><code>git checkout -b main origin/main</code></p><p>切换线上分支 origin/main,建立本地 main 分支</p><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ul><li>重命名 git 本地分支</li></ul><p><code>git branch -m 新分支</code> (当前分支的修改)</p><p><code>git branch -m 老分支 新分支</code></p><ul><li>重命名 git 远程分支</li></ul><p>前提 是本地已拉取远程分支</p><p><code>git push --delete origin 远程分支</code> (删除远程分支,也可以不删)<br><code>git branch -m 老分支 新分支</code> (重命名本地分支)<br><code>git push origin 新分支</code> (推送本地分支)<br><code>git branch --set-upstream-to origin/新分支</code> (将修改后的本地分支与远程分支相关联)</p><p>然而，在 github 上操作的时候，我在删除远程分支时碰到这个错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete origin devel</span><br><span class="line">remote: error: refusing to delete the current branch: refs/heads/devel</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line"> ! [remote rejected] devel (deletion of the current branch prohibited)</span><br><span class="line">error: failed to push some refs to &#x27;git@github.com:zrong/quick-cocos2d-x.git&#x27;</span><br></pre></td></tr></table></figure><p>这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：</p><ol><li>进入 github 中该项目的 Settings 页面；</li><li>设置 Default Branch 为其他的分支（例如 master）；</li><li>重新执行删除远程分支命令。</li></ol><h2 id="撤销和回滚操作"><a href="#撤销和回滚操作" class="headerlink" title="撤销和回滚操作"></a>撤销和回滚操作</h2><ul><li>撤销 (未<code>git add</code>操作)</li></ul><p><code>git checkout fileName</code> 撤销修改文件<br><code>git checkout .</code> 撤销全部文件</p><ul><li><p>回退<br><code>git reset --hard HEAD^ </code> 回退到上个版本<br><code>git reset --hard HEAD~n</code> 回退到 n 个版本之前<br><code>git reset --hard commit_id</code> 回退到指定 commit 的 id 位置</p></li><li><p>拉指定分支<br><code>git cherry-pick commit的ID</code>  合并特定提交ID (多个ID,隔开)</p></li></ul><p><strong>强推到远程：(可能需要解决对应分支的保护状态)</strong></p><ul><li>强制提交到对应 id 版本分支记录</li></ul><p>注: 无法撤回,谨慎操作</p><p><code>git push origin HEAD --force</code></p><h2 id="强制忽略跟踪"><a href="#强制忽略跟踪" class="headerlink" title="强制忽略跟踪"></a>强制忽略跟踪</h2><p>一、本地忽略<br>在文件上右键添加进 忽略文件<br>或者手动在 <code>.gitignore</code> 文件中添加文件路径</p><p>这样在 git 仓库已有的文件不生效，依旧会被检测到</p><p>二、强制忽略跟踪</p><p><code>git update-index --assume-unchanged 文件路径</code></p><p><code>git update-index --assume-unchanged src/test/test.http</code></p><p>取消强制忽略跟踪</p><p><code>git update-index --no-assume-unchanged 文件路径</code></p><h2 id="github-无法提交"><a href="#github-无法提交" class="headerlink" title="github 无法提交"></a>github 无法提交</h2><blockquote><p>git pull<br>ssh: connect to host github.com port 22: Connection timed out<br>fatal: Could not read from remote repository.</p></blockquote><p>Please make sure you have the correct access rights<br>and the repository exists.</p><blockquote><p><code>sh -T git@github.com</code> 检查 SSH 是否能够连接成功</p></blockquote><blockquote><p><code>ssh: connect to host github.com port 22: Connection timed out</code> 超时</p></blockquote><p>打开 <code>C:\Users\wecy\.ssh</code></p><p>打开<code>config</code>文件，输入以下内容，保存后即可 (没有的用新建记事本,去掉.txt 后缀)</p><p>输入以下内容</p><p><code>Host github.com User xxxxqq.com Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443</code></p><blockquote><p><code>ssh -T git@github.com</code> 验证选择 yes</p></blockquote><h1 id="github-访问配置"><a href="#github-访问配置" class="headerlink" title="github 访问配置"></a>github 访问配置</h1><p>当无法访问 github 时,可以设置 host 配置<br>windows 路径:<code>C:\Windows\System32\drivers\etc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="line">#</span><br><span class="line"># This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="line">#</span><br><span class="line"># This file contains the mappings of IP addresses to host names. Each</span><br><span class="line"># entry should be kept on an individual line. The IP address should</span><br><span class="line"># be placed in the first column followed by the corresponding host name.</span><br><span class="line"># The IP address and the host name should be separated by at least one</span><br><span class="line"># space.</span><br><span class="line">#</span><br><span class="line"># Additionally, comments (such as these) may be inserted on individual</span><br><span class="line"># lines or following the machine name denoted by a &#x27;#&#x27; symbol.</span><br><span class="line">#</span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class="line">#       38.25.63.10     x.acme.com              # x client host</span><br><span class="line"></span><br><span class="line"># localhost name resolution is handled within DNS itself.</span><br><span class="line">#127.0.0.1       localhost</span><br><span class="line">#::1             localhost</span><br><span class="line"></span><br><span class="line">20.205.243.166 github.com</span><br><span class="line"></span><br><span class="line"># 140.82.114.4 github.com</span><br><span class="line"></span><br><span class="line"># 185.199.108.153 vscode-auth.github.com</span><br><span class="line"># 185.199.110.153 vscode-auth.github.com</span><br><span class="line"># 185.199.111.153 vscode-auth.github.com</span><br><span class="line"># 185.199.109.153 vscode-auth.github.com</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">git学习</summary>
    
    
    
    <category term="git" scheme="https://wecy-chen.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>文章标题教程</title>
    <link href="https://wecy-chen.github.io/2022/08/22/article/"/>
    <id>https://wecy-chen.github.io/2022/08/22/article/</id>
    <published>2022-08-22T01:42:38.297Z</published>
    <updated>2021-11-16T23:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:【必需】页面标题</span><br><span class="line">date:【必需】页面创建日期</span><br><span class="line">type: 【必需】标籤、分类和友情链接三个页面需要配置</span><br><span class="line">updated:【可选】页面更新日期</span><br><span class="line">description:【可选】页面描述</span><br><span class="line">keywords: 【可选】页面关键字</span><br><span class="line">comments: 【可选】显示页面评论模块 (默认 true)</span><br><span class="line">top_img: 【可选】页面顶部图片</span><br><span class="line">mathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</span><br><span class="line">katex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</span><br><span class="line">aside: 【可选】显示侧边栏 (默认 true)</span><br><span class="line">aplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置</span><br><span class="line">highlight_shrink: 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</span><br><span class="line">cover: 文章顶部图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">页面描述</summary>
    
    
    
    <category term="教程" scheme="https://wecy-chen.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>软件</title>
    <link href="https://wecy-chen.github.io/2022/08/09/software/"/>
    <id>https://wecy-chen.github.io/2022/08/09/software/</id>
    <published>2022-08-08T23:04:35.000Z</published>
    <updated>2024-01-31T06:33:52.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p><strong>插件</strong></p><p>内置浏览器</p><p><a href="https://blog.csdn.net/qq812457115/article/details/124586074">教程</a></p><p>旧(废弃)</p><ul><li><code>Live Server</code></li><li><code>Browser Preview</code></li></ul><p>新</p><ul><li><code>Browse Lite</code></li></ul><ul><li>内嵌浏览器</li><li>命令输入”lite” 可以找到并呼出</li><li>适合调试 vue 项目或者 web app 项目</li><li>可以调手机和 pc 模式</li><li>不足:总是有点显示不清晰</li><li>内嵌一个 debug,这个不错</li></ul><h2 id="Xhell"><a href="#Xhell" class="headerlink" title="Xhell"></a>Xhell</h2><p>天翼网盘—&gt;软件—&gt;开发</p><p><strong>安装一</strong></p><p><a href="https://www.jb51.net/softs/732916.html">xshell 7</a><br><a href="https://www.jb51.net/softs/732920.html">xftp 7</a></p><p>xhell 包括两个程序(<code>Xftp7_jb51.rar</code> <code>Xshell7_jb51.rar</code>)</p><ol><li>打开 Xshell-7.0.0109.exe 安装文件 安装路径 D:\Xshell 7</li><li>打开 Xftp-7.0.0107.exe 安装软件 安装路径 D:\Xftp 7</li></ol><p>注意:<br>安装完成后，将 xhell 压缩包里面有 crack 目录，将 nslicense.dll 文件覆盖到软件目录<br>或者使用注册补丁文件，将 NetSarang.7.x.Patch.exe 复制到安装目录下运行，点击应用即可 (容易报毒)</p><p><strong>安装二(推荐)</strong></p><p>天翼网盘—&gt;软件—&gt;开发—&gt;xhell7(推荐)</p><p>替换法</p><p><a href="https://blog.csdn.net/Sunshine_Mr_Sun/article/details/124320972">地址 1</a><br><a href="https://slcp.top/article/read/59">地址 2</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p><a href="https://git-scm.com/download/win">git 官网</a> 官网 (下载速度比较慢)<br><a href="https://npm.taobao.org/mirrors/git-for-windows/">git 镜像</a> 阿里镜像</p><p>截止 2022-08-17 最新版本是<code>Git-2.37.2.2-64-bit</code><br>更新 卸载之前,重新安装最新的 安装一直 next 就行</p><p><a href="https://wecy-chen.github.io/2022/08/08/git/">git 命令文档</a></p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p><a href="https://nodejs.org/zh-cn/">node 官网</a></p><p><a href="https://nodejs.org/download/release/">node 历史版本</a></p><p>下载版本 v14.17.0</p><p><a href="https://nodejs.org/download/release/v14.17.0/">https://nodejs.org/download/release/v14.17.0/</a> 选择 node-v14.17.0-x64.msi (win 下载)</p><p>设置文件安装配置</p><ol><li><p>在 nodejs 目录下新建 <code>node_cache</code> <code>node_global</code> 文件夹</p></li><li><p>配置路径</p><blockquote><p><code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code></p></blockquote><blockquote><p><code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code></p></blockquote></li></ol><p>环境变量<br>在[系统变量] 添加路径 变量名<code>NODE_PATH</code> 变量值<code>D:\nodejs\node_global</code><br>在[用户变量] 将 path 中的<code>C:\Users\wecy\AppData\Roaming\npm</code>修改成 <code>D:\nodejs\node_global</code></p><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>nvm 是一个 nodejs 的版本管理工具，可以通过 nvm 安装和切换不同版本的 nodejs</p><p><a href="https://github.com/coreybutler/nvm-windows/releases">github 下载 nvm</a></p><p>下载 nvm-setup.exe 文件</p><p>安装前,先安装 node(需要设置默认 node 路径),将默认 node 加入到 nvm 中</p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p><a href="https://github.com/MicrosoftArchive/redis/releases">下载</a></p><p>下载<code>Redis-x64-3.0.504.msi</code> 不用配置文件服务<br>下载<code>Redis-x64-3.0.504.zip</code> 需要配置服务</p><p>在 Redis 目录下: ./redis-server –service-install redis.windows.conf –loglevel verbose<br><a href="https://blog.csdn.net/justinytsoft/article/details/54580919">redis 启动命令</a></p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。</p><p>vue 项目检测(vue 项目检测 依赖包是否有使用，缩减打包后体积)</p><p><a href="https://blog.csdn.net/qq_37816525/article/details/98076980">npm 依赖包检测</a></p><p>查看依赖包</p><blockquote><p><code>npm config list</code> 查看配置列表(全)</p></blockquote><p>; cli configs<br>metrics-registry = “<a href="http://registry.npm.taobao.org/&quot;">http://registry.npm.taobao.org/&quot;</a><br>scope = “”<br>user-agent = “npm/6.14.13 node/v14.17.0 win32 x64”</p><p>; userconfig C:\Users\wecy.npmrc<br>ELECTRON_BUILDER_BINARIES_MIRROR = “<a href="https://mirrors.huaweicloud.com/electron-builder-binaries/&quot;">https://mirrors.huaweicloud.com/electron-builder-binaries/&quot;</a><br>ELECTRON_MIRROR = “<a href="http://npm.taobao.org/mirrors/electron/&quot;">http://npm.taobao.org/mirrors/electron/&quot;</a><br>cache = “D:\nodejs\node_cache”<br>prefix = “D:\nodejs\node_global”<br>puppeteer_download_host = “<a href="https://npm.taobao.org/mirrors&quot;">https://npm.taobao.org/mirrors&quot;</a><br>registry = “<a href="http://registry.npm.taobao.org/&quot;">http://registry.npm.taobao.org/&quot;</a></p><p>; globalconfig D:\nodejs\node_global\etc\npmrc<br>python = “C:\Users\wecy\.windows-build-tools\python27\python.exe”</p><p>; builtin config undefined</p><p>; node bin location = D:\nodejs\node.exe<br>; cwd = D:\fix-bug\nuxt-web-b2c<br>; HOME = C:\Users\wecy<br>; “npm config ls -l” to show all defaults.</p><p>设置淘宝镜像</p><blockquote><p><code>npm config set registry https://registry.npm.taobao.org</code> //切换国内镜像，使用淘宝镜像<br><code>npm config set registry https://registry.npmjs.org</code> //国外(默认)<br><code>npm config get registry</code> //查看当前镜像使用的地址</p></blockquote><p><strong>依赖包安装失败</strong></p><p>忽略 npm 脚本</p><blockquote><p><code>npm install --ignore-scripts</code></p></blockquote><p>–ignore-scripts 表示 npm 将不会运行在 package.json 中指定的 scripts 脚本</p><h2 id="npm-安装失败"><a href="#npm-安装失败" class="headerlink" title="npm 安装失败"></a>npm 安装失败</h2><p>npm cache clean –force<br>npm config set strict-ssl false<br>npm install</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>处理 npm 安装依赖时提示：cb() never called 的解决方法：</p><p><a href="https://www.ihtmlcss.com/archives/1430.html">参考</a></p><p>以管理员身份执行：<code>npm install -g windows-build-tools</code></p><p>如果最后安装卡在 Successfully installed Python 2.7，执行以下步骤：</p><ol><li><p><kbd>win</kbd> + <kbd>r</kbd> 打开运行窗口</p></li><li><p>输入 %temp% 然后回车</p></li><li><p>在打开的文件夹中新建文件：<code>dd_client_.log</code> 并写入 Closing installer. Return code: 3010. 然后保存</p></li></ol><p>还是失败</p><p>以管理员身份运行<code>cmd</code>命令行窗口 进入项目目录</p><p>重新切换 npm 配置</p><blockquote><p><code>npm config set registry https://registry.npm.taobao.org</code> //切换国内镜像，使用淘宝镜像<br><code>npm config set registry https://registry.npmjs.org</code> //国外(默认)</p></blockquote><p><strong>mac 下配置 python</strong><br>参考地址: <a href="https://zhuanlan.zhihu.com/p/191495100">https://zhuanlan.zhihu.com/p/191495100</a></p><ol><li><code>vi ~/.bash_profile</code></li><li>配置全局路径</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATH_PYTHON=&quot;/Library/Frameworks/Python.framework/Versions/3.8/bin&quot;</span><br><span class="line"># Setting PATH for Phantomjs 2.1.1-maxcosx</span><br><span class="line">PATH_PHANTOM=&quot;/Users/wecychen/PhantomJs/phantomjs-2.1.1-macosx/bin&quot;</span><br><span class="line">PATH=&quot;$&#123;PATH_PYTHON&#125;:$&#123;PATH_PHANTOM&#125;:$&#123;PATH&#125;&quot;</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>source ~/.bash_profile</code></p></li><li><p><code>phantomjs --version</code></p></li></ol><p><strong>puppeteer</strong></p><p><a href="https://blog.csdn.net/w20101310/article/details/90288271?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">报错处理</a></p><blockquote><p><code>npm config set puppeteer_download_host https://npm.taobao.org/mirrors</code></p></blockquote><blockquote><p><code>npm config set phantomjs_cdnurl https://npm.taobao.org/mirrors/phantomjs/</code> </p></blockquote><p><strong>删除镜像源配置</strong></p><blockquote><p><code>npm config delete puppeteer_download_host</code></p></blockquote><p><a href="https://www.cnblogs.com/ilizhu/p/14504049.html">centos 安装 puppeteer 遇到的报错及解决方案</a></p><p>linux 下报错处理<br>一<br>/home/work/node_modules/puppeteer/.local-chromium/linux-856583/chrome-linux/chrome: error while loading shared libraries: libatk-1.0.so.0: cannot open shared object file: No such file or directory<br>解决:<code>yum install atk</code></p><p>二<br>报错:/home/work/node_modules/puppeteer/.local-chromium/linux-856583/chrome-linux/chrome: error while loading shared libraries: libatk-bridge-2.0.so.0: cannot open shared object file: No such file or directory<br>解决:<code>yum install at-spi2-atk</code></p><p>三<br>报错:/home/work/node_modules/puppeteer/.local-chromium/linux-856583/chrome-linux/chrome: error while loading shared libraries: libxkbcommon.so.0: cannot open shared object file: No such file or directory<br>解决:<code>yum install libxkbcommon-x11-devel</code></p><p>四<br>报错:/home/work/node_modules/puppeteer/.local-chromium/linux-856583/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory<br>解决:<code>yum install libXcomposite</code></p><p>五<br>报错:/home/work/node_modules/puppeteer/.local-chromium/linux-856583/chrome-linux/chrome: error while loading shared libraries: libgtk-3.so.0: cannot open shared object file: No such file or directory<br>解决:<code>yum install gtk3</code></p><p><strong>报 node-sass 错误、python 错误</strong></p><p><a href="https://blog.csdn.net/qq_43541746/article/details/124048252">详细解决</a></p><p><a href="https://blog.csdn.net/qq_43541746/article/details/124048252">解决一</a></p><p>管理员身份 cmd 运行 <code>npm install --global --production windows-build-tools</code></p><p>打开 <code>C:\Users\用户名\.windows-build-tools</code> 复制<code>python27</code>文件夹放在 c 盘内</p><p><a href="https://blog.csdn.net/sdnini/article/details/123089223">解决二</a></p><ol><li><a href="https://www.python.org/download/releases/2.7/">安装 python</a> Windows X86-64 MSI Installer (2.7.0) <a href="sig">1</a></li><li>在系统环境变量 path 中添加路径 C:\Python27</li><li>运行<code>npm rebuild node-sass</code> 命令</li><li>运行<code>npm install</code></li></ol><p>安装失败 用 cnpm 安装</p><p><strong>处理 npm 安装失败</strong></p><p><a href="https://blog.csdn.net/qq_43405812/article/details/119686781?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-119686781-blog-123046105.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-119686781-blog-123046105.pc_relevant_aa&utm_relevant_index=1">参考</a></p><p>网络上找的其他办法<br>第一种<br>1、首先要以管理员模式打开 cmd 清除你的 npm 缓存 : <code>npm cache clean -f</code><br>2、清除完缓存后，安装最新版本的 Node helper： <code>npm install -g n</code></p><p>第二种<br>1、删除 node_modules 和 package-lock.json<br>2、以管理员方式执行<br><code>npm cache clean --force</code><br><code>npm install</code></p><p>第三种<br>1、清楚 npm 缓存：<code>npm cache clean -f</code><br>2、 安装最新版本的 Node <code>helper ：npm install -g n</code><br>3、 安装 npm 包管理助手 ：<code>npm install -g n --force</code><br>4、 安装 npm ：<code>npm install</code></p><p>第四种<br>1、 以管理员模式打开 cmd 清除你的 npm 缓存 (mac 电脑在 npm 前加 sudo) ：<code>npm cache clean -f</code><br>2、 清除完缓存后，安装最新版本的 Node helper ：<code>npm install -g n</code><br>3、安装 npm 包管理助手：<code>npm install -g n --force</code><br>4、用 n 助手安装最新的稳定版 node：<code>n stable</code></p><p><strong>chromedriver</strong></p><p>还是失败,更改数据源<br><code>npm config set chromedriver_cdnurl http://cdn.npm.taobao.org/dist/chromedriver</code></p><p><strong>ffmpeg-static 安装失败</strong></p><p><code>npm config set FFMPEG_BINARIES_URL https://cdn.npmmirror.com/binaries/ffmpeg-static</code></p><p>或使用 cnpm 安装</p><blockquote><p><code>npm install cnpm -g</code> &gt; <code>cnpm i</code></p></blockquote><!-- 使用 yarn 安装> `yarn install` --><p><strong>yarn</strong></p><p>Yarn Facebook 贡献的 Javascript 包管理器。</p><p><strong>rimraf</strong></p><ol><li>删除包<blockquote><p><code>npm install rimraf -g</code> &gt; <code>rimraf node_modules/</code></p></blockquote></li></ol><h2 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h2><p><a href="http://www.electronjs.org/zh/docs/latest">官网文档</a></p><p>依赖包安装失败处理</p><blockquote><p><code>npm config set ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/</code> //安装镜像</p></blockquote><blockquote><p><code>npm config set ELECTRON_BUILDER_BINARIES_MIRROR https://mirrors.huaweicloud.com/electron-builder-binaries/</code> //打包镜像</p></blockquote><h2 id="node-sass"><a href="#node-sass" class="headerlink" title="node-sass"></a>node-sass</h2><p>安装失败处理</p><blockquote><p><code>npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</code></p></blockquote><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h2><p><a href="https://www.jianshu.com/p/a805e182798f">pnpm 介绍</a></p><blockquote><p><code>npm install pnpm -g</code> // 全局安装<br><code>pnpm config get registry</code> // 查看源<br><code>pnpm config set registry http://registry.npm.taobao.org</code> // 切换淘宝源</p></blockquote><p>设置<br><code>pnpm install 包</code><br><code>pnpm i 包</code><br><code>pnpm add</code> 包<code>// -S 默认写入 dependencies</code>pnpm add -D<code>// -D devDependencies</code>pnpm add -g<code>// 全局安装</code>pnpm remove 包<code>//移除包</code>pnpm remove 包 –global<code>//移除全局包</code>pnpm up<code>//更新所有依赖项</code>pnpm upgrade 包<code>//更新包</code>pnpm upgrade 包 –global` //更新全局包<br>设置存储路径：pnpm config set store-dir /path/to/.pnpm-store</p><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p><a href="https://shurufa.sogou.com/">搜狗输入法</a></p><p><a href="https://pinyin.sogou.com/windows/?r=mac&t=pinyin">搜狗下载</a></p><p>搜狗皮肤名称 【竹子】极光黑夜</p><h2 id="qq"><a href="#qq" class="headerlink" title="qq"></a>qq</h2><p><a href="https://im.qq.com/index">官网下载</a></p><p>文件和聊天记录路径</p><p><code>E:\qq文件\492090230\FileRecv\</code> 文件路径<br><code>E:\qq文件\</code> 聊天记录路径</p><h2 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h2><p><a href="https://weixin.qq.com/">官网下载</a></p><p>文件和聊天记录路径 <code>E:\微信文件管理\WeChat Files\</code><br>acer <code>E:\Documents\WeChat Files\</code></p><h1 id="远程唤醒"><a href="#远程唤醒" class="headerlink" title="远程唤醒"></a>远程唤醒</h1><p>前提: 在睡眠,关机情况下,同一个局域网唤醒</p><p><a href="https://zhuanlan.zhihu.com/p/29100706">教程</a></p><p>局域网唤醒 send Options 用 Local Subnet 选项配置</p><p>一. <a href="%E2%80%8Bhttps://www.depicus.com/wake-on-lan/wake-on-lan-gui%E2%80%8B">​WakeOnLanGui 下载</a>(唤醒软件)</p><p><img src="/image/software/%E2%80%8BWakeOnLanGui.png" alt="​WakeOnLanGui"></p><p>二. <a href="https://www.xitongzhijia.net/soft/69311.html">WakeMeOnLan 下载</a>(局域网连接 ip 信息)</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><h2 id="关闭-win11-安全中心"><a href="#关闭-win11-安全中心" class="headerlink" title="关闭 win11 安全中心"></a>关闭 win11 安全中心</h2><p>关闭安全中心自启动<br><a href="https://www.bilibili.com/read/cv13898154/">https://www.bilibili.com/read/cv13898154/</a></p><p>彻底关闭<br><a href="https://www.cnblogs.com/rqcim/p/16116684.html">https://www.cnblogs.com/rqcim/p/16116684.html</a></p>]]></content>
    
    
    <summary type="html">常用的软件</summary>
    
    
    
    <category term="软件" scheme="https://wecy-chen.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="软件" scheme="https://wecy-chen.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置</title>
    <link href="https://wecy-chen.github.io/2022/08/09/vscode/"/>
    <id>https://wecy-chen.github.io/2022/08/09/vscode/</id>
    <published>2022-08-08T23:04:35.000Z</published>
    <updated>2022-10-19T01:18:43.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>打开 vscode</p><p>打开菜单栏[文件]—&gt;[首选项]—&gt;[设置]—&gt;打开设置(<code>settings.json</code>)</p><h2 id="基础配置如下"><a href="#基础配置如下" class="headerlink" title="基础配置如下"></a>基础配置如下</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 底部状态栏</span></span><br><span class="line">  <span class="attr">&quot;workbench.colorCustomizations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;statusBar.background&quot;</span>: <span class="string">&quot;#1A1A1A&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;statusBar.noFolderBackground&quot;</span>: <span class="string">&quot;#0A0A0D&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;statusBar.debuggingBackground&quot;</span>: <span class="string">&quot;#511f1f&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//缩进2格</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">//缩进格数不被重写</span></span><br><span class="line">  <span class="attr">&quot;editor.detectIndentation&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//配置git路径(win)</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class="string">&quot;Git-Bath&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Git-Bath&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;D:\\Git\\bin\\bash.exe&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//保存自动格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//自动保存</span></span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;afterDelay&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vscode-主题字体"><a href="#Vscode-主题字体" class="headerlink" title="Vscode 主题字体"></a>Vscode 主题字体</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主题发光</span></span><br><span class="line"><span class="string">&quot;vscode_custom_css.imports&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;file:///E:/css/synthwave84.css&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">//字体顺序</span></span><br><span class="line"><span class="string">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;Consolas,Microsoft Yahei, &#x27;Courier New&#x27;, monospace&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://wecy-chen.github.io/css/synthwave84.css">css 文件地址</a></p><p>安装 <code>Custom CSS and JS Loader</code> 扩展样式插件</p><p><kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>P</kbd> 打开插件命令设置</p><p>输入命令 <code>Enable Custom CSS and JS</code> 重启生效</p><p>安装<code>Fix VSCode Checksums</code> 插件 输入<code>Fix Checksums: Apply</code> 去掉 code 安装似乎损坏。请重新安装。提示</p><p>效果<br><img src="/image/vscode/setting.png" alt="setting"></p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p><strong>Prettier - Code formatter</strong><br>代码格式化</p><h2 id="打字特效"><a href="#打字特效" class="headerlink" title="打字特效"></a>打字特效</h2><p><a href="https://blog.csdn.net/xiaowuguiya/article/details/118436910">教程</a></p><p><strong>Power Mode</strong></p><p>设置中搜索(文件—&gt;首选项—&gt;设置)</p><ol><li><p>启用 <code>powermode.enable</code></p></li><li><p>抖动<code>powermode</code>—&gt;<code>shake</code> 找到<code>Shake intensity</code> 改为 0 去掉抖动</p></li><li><p>更换特效<code>powermode</code>—&gt;<code>General</code> 找到<code>Presets</code> 下拉选择需要的特效</p></li></ol><h2 id="背景色透明"><a href="#背景色透明" class="headerlink" title="背景色透明"></a>背景色透明</h2><p><strong>Windows opacity</strong></p><p>配置 setting.json</p><p><code>&quot;winopacity.opacity&quot;: 240,</code> 100 ~ 255 就能看见</p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><ol><li><p>卸载 vscode 软件</p></li><li><p>删除没卸干净的配置信息和插件</p><ul><li>删除<code>C:\Users\wecy\.vscode</code>本地插件文件夹</li><li>删除<code>C:\Users\wecy\AppData\Roaming\Code</code>本地缓存</li></ul></li><li><p>重新安装</p></li></ol><p><strong>方法二：原理同方法一</strong></p><ol><li>win + r 打开运行 %appdata% 回车</li><li>删除 Code 和 Visual Studio Code 文件夹</li><li>地址栏输入 %userprofile% 回车</li><li>删除 .vscode 文件夹</li></ol><h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><p><strong>注:设置同步配置失败,要用管理员身份运行 vscode</strong></p>]]></content>
    
    
    <summary type="html">vscode配置</summary>
    
    
    
    <category term="vscode" scheme="https://wecy-chen.github.io/categories/vscode/"/>
    
    
    <category term="vscode" scheme="https://wecy-chen.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>uni-app</title>
    <link href="https://wecy-chen.github.io/2022/08/08/uni-app/"/>
    <id>https://wecy-chen.github.io/2022/08/08/uni-app/</id>
    <published>2022-08-07T23:04:35.000Z</published>
    <updated>2022-11-28T01:48:03.319Z</updated>
    
    <content type="html"><![CDATA[<p>uni-app 开发</p><h1 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h1><p><a href="https://juejin.cn/post/7090532271257714695#heading-14">参考</a></p><p><code>注</code> Vue2 创建的项目，脚手架版本要用@4 的版本，用@5 的版本运行项目会报错，这里推荐 @4.5.15</p><p>查看 vue-cli 版本</p><blockquote><p>$ <code>vue --version</code></p></blockquote><blockquote><p>@vue/cli 4.5.15</p></blockquote><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><blockquote><p><code>npm install -g @vue/cli@4.5.15</code></p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><blockquote><p><code>vue create -p dcloudio/uni-preset-vue 项目名称</code></p></blockquote><p>等待自动安装依赖包</p><h2 id="选择模板"><a href="#选择模板" class="headerlink" title="选择模板"></a>选择模板</h2><p>选择默认模板</p><h2 id="json-文件可写注释"><a href="#json-文件可写注释" class="headerlink" title="json 文件可写注释"></a>json 文件可写注释</h2><p>注: 不要在 package.json 添加注释, 否则编译会出错<br>配置 jsonc 防止文件警告, 在设置中打开 <code>settings.json</code> ，添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pages.json&quot;</span>:<span class="string">&quot;jsonc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;manifest.json&quot;</span>:<span class="string">&quot;jsonc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;jsconfig.json&quot;</span>:<span class="string">&quot;jsonc&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="语法提示和高亮"><a href="#语法提示和高亮" class="headerlink" title="语法提示和高亮"></a>语法提示和高亮</h2><ul><li><code>uni-app-schemas</code>检验插件</li></ul><p>校验 <code>uni-app</code> 中的 <code>androidPrivacy.json</code> 、 <code>pages.json</code> 和 <code>manifest.json</code> 格式`</p><ul><li><code>uni-app-snippets</code>提示插件</li></ul><h2 id="一键创建页面、组件、分包"><a href="#一键创建页面、组件、分包" class="headerlink" title="一键创建页面、组件、分包"></a>一键创建页面、组件、分包</h2><ul><li><code>uni-create-view</code>插件</li></ul><h1 id="uni-app-Vue3-TS-搭建"><a href="#uni-app-Vue3-TS-搭建" class="headerlink" title="uni-app + Vue3 + TS 搭建"></a>uni-app + Vue3 + TS 搭建</h1><h2 id="教程二"><a href="#教程二" class="headerlink" title="教程二"></a>教程二</h2><p>创建 vue3 项目</p><blockquote><p><code>npx degit dcloudio/uni-preset-vue#vite-ts 目录名</code> // 安装项目<br><code>npm install</code> //安装依赖</p></blockquote><p>uni-app 有新版本发布更新@dcloudio 依赖包</p><blockquote><p><code>npx @dcloudio/uvm alpha</code></p></blockquote><h2 id="教程一"><a href="#教程一" class="headerlink" title="教程一"></a>教程一</h2><p>[(<a href="https://www.jianshu.com/p/8cf806f974c3)]">https://www.jianshu.com/p/8cf806f974c3)]</a></p><blockquote><p><code>npm install -g @vue/cli</code> 安装更新 vue 脚手架<br><code>vue create -p dcloudio/uni-preset-vue#vue3 uni-app-vue3</code> 安装 uni-app 默认模板 (选择 typeScript)</p></blockquote><p><a href="https://ext.dcloud.net.cn/plugin?id=4941">hello-uniapp 示例工程</a></p><p>官方更多版本选择命令 ( <code>vue create -p dcloudio/uni-preset-vue my-project</code> )</p><p>可以卸载 &gt; <code>npm uninstall vue-class-component vue-property-decorator</code> 依赖包(非必须)</p><p><a href="https://www.cnblogs.com/goloving/p/15407340.html">vue-class-component</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>更新下版本包</p><blockquote><p><code>npm install vue@3.2.20 vuex@4.0.2 typescript@4.4.4</code></p></blockquote><dl><dt>报错处理</dt><dd>Cannot find module ‘vue-loader-v16/package.json’ 重新安装下 vue-loader-v16</dd></dl><blockquote><p><code>yarn remove vue-loader-v16</code> &gt; <code>yarn add vue-loader-v16</code> 选择 <code>2.0.1-alpha-35420220810001版本</code></p></blockquote><p>error in ./src/main.ts</p><p>Syntax Error: TypeError: loaderContext.getOptions is not a function<br>@ multi (webpack)-dev-server/client?<a href="http://192.168.1.208:8080/sockjs-node">http://192.168.1.208:8080/sockjs-node</a> (webpack)/hot/dev-server.js ./src/main.ts</p><p>配置 SASS<br><code>npm install node-sass@4.0.0 sass-loader@7.3.1 --save-dev</code></p><p>// 如遇到安装问题可手动在 package.json devDependencies 手动中添加<br>// 删除 node_modules 然后 重新安装 npm install<br>复制代码</p><h2 id="eslint-prettier"><a href="#eslint-prettier" class="headerlink" title="eslint + prettier"></a>eslint + prettier</h2><p><strong>配置 eslint + prettier 自动格式化代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h2><p><code>npm install @types/node --save-dev</code> 安装依赖</p><p>在 <code>tsconfig.json</code> 配置 <code>compilerOptions</code> 中增加 <code> &quot;paths&quot;: &#123; &quot;@/*&quot;: [&quot;src/*&quot;] &#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;compilerOptions&quot;: &#123;</span><br><span class="line">    &quot;target&quot;: &quot;esnext&quot;,</span><br><span class="line">    &quot;useDefineForClassFields&quot;: true,</span><br><span class="line">    &quot;module&quot;: &quot;esnext&quot;,</span><br><span class="line">    &quot;moduleResolution&quot;: &quot;node&quot;,</span><br><span class="line">    &quot;strict&quot;: true,</span><br><span class="line">    &quot;noImplicitAny&quot;: false,</span><br><span class="line">    &quot;jsx&quot;: &quot;preserve&quot;,</span><br><span class="line">    &quot;sourceMap&quot;: true,</span><br><span class="line">    &quot;resolveJsonModule&quot;: true,</span><br><span class="line">    &quot;esModuleInterop&quot;: true,</span><br><span class="line">    &quot;lib&quot;: [&quot;esnext&quot;, &quot;dom&quot;],</span><br><span class="line">    &quot;types&quot;: [&quot;@dcloudio/types&quot;],</span><br><span class="line">    &quot;baseUrl&quot;: &quot;.&quot;,</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      //这里配置路径</span><br><span class="line">      &quot;@/*&quot;: [&quot;src/*&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h1><p><a href="https://uniapp.dcloud.net.cn/collocation/pages.html">pages.json 页面路由</a><br><a href="https://uniapp.dcloud.net.cn/collocation/package.html">官网说明</a></p><h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><p><a href="https://uniapp.dcloud.net.cn/api/router.html#navigateto">官网</a></p><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uni.navigateTo(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/pages/QR-code/index&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="api"><a href="#api" class="headerlink" title="api"></a>api</h1><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><p><strong>二维码</strong></p><p><a href="https://www.jianshu.com/p/2e6dad005fa5">vue3 引入</a></p><h1 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h1><h2 id="引入报错"><a href="#引入报错" class="headerlink" title="引入报错"></a>引入报错</h2><p><code>tsconfig.json</code> 添加 <code>&quot;noImplicitAny&quot;: false</code> ，或者 <code>“strict”: true改为false</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;useDefineForClassFields&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">false</span>, <span class="comment">//非严格模式</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;esnext&quot;</span>, <span class="string">&quot;dom&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;@dcloudio/types&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*.ts&quot;</span>, <span class="string">&quot;src/**/*.d.ts&quot;</span>, <span class="string">&quot;src/**/*.tsx&quot;</span>, <span class="string">&quot;src/**/*.vue&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="require-报错"><a href="#require-报错" class="headerlink" title="require 报错"></a>require 报错</h2><p><a href="https://blog.csdn.net/weixin_47093559/article/details/114081002">require is not defined</a></p><h2 id="处理跨域"><a href="#处理跨域" class="headerlink" title="处理跨域"></a>处理跨域</h2><p><strong>处理一</strong></p><p>设置请求头会解决跨域问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">uni.request(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;api/url&#x27;</span>,</span><br><span class="line">  <span class="attr">header</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: params</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>处理二</strong></p><p>在 manifest.json 的代码视图中 根节点中配置 h5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devServer&quot;</span> : &#123;</span><br><span class="line">    <span class="comment">// &quot;port&quot; : 8080, //浏览器运行端口</span></span><br><span class="line">    <span class="string">&quot;https&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;proxy&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;/baseUrlTest&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;target&quot;</span> : <span class="string">&quot;http://192.168.1.34:8084&quot;</span>,</span><br><span class="line">            <span class="string">&quot;changeOrigin&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;secure&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;pathRewrite&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;^/baseUrlTest&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;/baseUrlBuild&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;target&quot;</span> : <span class="string">&quot;http://zhbz-test.xxx.com&quot;</span>,</span><br><span class="line">            <span class="string">&quot;changeOrigin&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;secure&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;pathRewrite&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;^/baseUrlBuild&quot;</span> : <span class="string">&quot;&quot;</span> <span class="comment">//路径重写，将接口路径中以/api开头的部分替换掉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发版配置生产环境配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;cors&#x27;</span>=&gt;[</span><br><span class="line">  <span class="string">&#x27;Origin&#x27;</span> =&gt; [<span class="string">&#x27;*&#x27;</span>], <span class="comment">// 允许跨域的请求源</span></span><br><span class="line">  <span class="string">&#x27;Access-Control-Request-Method&#x27;</span> =&gt; [<span class="string">&#x27;*&#x27;</span>], <span class="comment">// 接收的请求方法</span></span><br><span class="line">  <span class="string">&#x27;Access-Control-Request-Headers&#x27;</span> =&gt; [<span class="string">&#x27;*&#x27;</span>], <span class="comment">// 请求头接收类型</span></span><br><span class="line">  <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> =&gt; <span class="literal">false</span>,  <span class="comment">// 是否允许请求携带 cookie，注意这里如果设置为true，则会报错</span></span><br><span class="line">  <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> =&gt; <span class="number">3600</span> <span class="comment">// 缓存，可不设置</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;uni-app 开发&lt;/p&gt;
&lt;h1 id=&quot;Vue2&quot;&gt;&lt;a href=&quot;#Vue2&quot; class=&quot;headerlink&quot; title=&quot;Vue2&quot;&gt;&lt;/a&gt;Vue2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/709053227125</summary>
      
    
    
    
    <category term="uni-app" scheme="https://wecy-chen.github.io/categories/uni-app/"/>
    
    
    <category term="uni-app" scheme="https://wecy-chen.github.io/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://wecy-chen.github.io/2022/05/09/md/"/>
    <id>https://wecy-chen.github.io/2022/05/09/md/</id>
    <published>2022-05-08T23:04:35.000Z</published>
    <updated>2022-08-22T01:42:38.305Z</updated>
    
    <content type="html"><![CDATA[<p><strong>markdown 学习</strong></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin">百度百科</a></p><ul><li><p>简介<br>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p></li><li><p>应用</p></li></ul><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、知乎等</p><ul><li>徽章<br>徽章是一种小巧精美的小图标，一般配有相关文字进行辅助说明，可对数据进行监控，链接跳转等，富有表现力。<br>常见于 github 项目主页，但其不仅出现于 github 项目主页，凡是能够表现图片的地方都可以出现徽章</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式: [![图片文字说明](图片源地址)](超链接地址)  即超链接内部嵌套图片</span><br><span class="line">语法：</span><br><span class="line">[![github](https://img.shields.io/badge/github-xugaoyi-brightgreen.svg)](https://github.com/xugaoyi)</span><br></pre></td></tr></table></figure><p><a href="https://wecy-chen.github.io/"><img src="https://img.shields.io/badge/github-wecychen-brightgreen.svg" alt="github"></a></p><p>徽章生成网站: <a href="https://shields.io/">https://shields.io/</a></p><p><a href="https://segmentfault.com/a/1190000019552597">徽章生成教程</a></p><ul><li>编辑<br>vscode 下载markdown-formatter插件<br>setting.json配置：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照js格式化</span></span><br><span class="line"><span class="comment">// &quot;markdownFormatter.codeAreaToBlock&quot;: &quot;js&quot;,</span></span><br><span class="line"><span class="comment">// 不格式化</span></span><br><span class="line"><span class="string">&quot;markdownFormatter.codeAreaToBlock&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="comment">// 自动格式化标点</span></span><br><span class="line"><span class="string">&quot;markdownFormatter.fullWidthTurnHalfWidth&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line"><span class="comment">// 中文标点格式化为英文</span></span><br><span class="line"><span class="comment">// &quot;markdownFormatter.fullWidthTurnHalfWidth&quot;: &quot;，：；！“”‘’（）？。&quot;,</span></span><br><span class="line"><span class="string">&quot;markdownFormatter.formatOpt&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;indent_size&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;[markdown]&quot;</span>: &#123;</span><br><span class="line">  <span class="comment">// 自动保存</span></span><br><span class="line">  <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 显示空格</span></span><br><span class="line">  <span class="string">&quot;editor.renderWhitespace&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="comment">// 快速补全</span></span><br><span class="line">  <span class="string">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;other&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;comments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;strings&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// snippet 提示优先</span></span><br><span class="line">  <span class="string">&quot;editor.snippetSuggestions&quot;</span>: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">  <span class="string">&quot;editor.tabCompletion&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="comment">// 使用enter 接受提示</span></span><br><span class="line">  <span class="string">&quot;editor.acceptSuggestionOnEnter&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="comment">// 默认格式化工具为本工具</span></span><br><span class="line">  <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;mervin.markdown-formatter&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul><li><p><strong>段落</strong><br>Markdown 段落没有特殊的格式，直接编写文字，需要段落缩进时使用 2 个 Tab</p></li><li><p><strong>字体</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*   _斜体文本_</span><br><span class="line">**粗体文本**  __粗体文本__</span><br><span class="line">***粗斜体文本***  ___粗斜体文本___</span><br></pre></td></tr></table></figure><p><em>斜体文本</em> <em>斜体文本</em><br><strong>粗体文本</strong> <strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong> <strong><em>粗斜体文本</em></strong></p><ul><li><strong>删除线</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><del>删除线</del></p><ul><li><strong>下划线</strong><br>下划线可以通过 HTML 的 标签来实现：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线的文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p><u>带下划线的文本</u></p><ul><li><strong>文字高亮</strong><br>文字高亮功能能使行内部分文字高亮，使用一对反引号。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`html` `css` `javascript`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>html</code>  <code>css</code>  <code>javascript</code></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">[^变量]</span><br><span class="line">在文档结尾或其他位置給变量赋值：</span><br><span class="line">[^变量]: 注明框内显示的内容</span><br><span class="line"></span><br><span class="line">鼠标移到这里&gt; [^哈喽]</span><br><span class="line">[^哈喽]: 注明框内显示的内容</span><br></pre></td></tr></table></figure><p>鼠标移到这里&gt; [^1]</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><strong>无序列表</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br></pre></td></tr></table></figure><ul><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第一项</p></li><li><p>第二项</p></li></ul><ul><li><strong>有序列表</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br></pre></td></tr></table></figure><ol><li>第一项</li><li>第二项</li></ol><ul><li><strong>折叠列表</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>点我打开关闭折叠<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  折叠内容</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><details><summary>点我打开关闭折叠</summary>折叠内容 <ul><li>1</li> <li>2</li> <li>3</li> </ul></details><ul><li><strong>带复选框列表</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* [x] 第一项</span><br><span class="line">* [ ] 第二项</span><br><span class="line">* [ ] 第三项</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 第一项</li><li><input disabled="" type="checkbox"> 第二项</li><li><input disabled="" type="checkbox"> 第三项</li></ul><p>-<strong>列表嵌套</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">   - 嵌套1</span><br><span class="line">   - 嵌套2</span><br><span class="line">2. 第二项</span><br><span class="line">   - 嵌套1</span><br><span class="line">   - 嵌套2</span><br></pre></td></tr></table></figure><ol><li>第一项<ul><li>嵌套1</li><li>嵌套2</li></ul></li><li>第二项<ul><li>嵌套1</li><li>嵌套2</li></ul></li></ol><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br></pre></td></tr></table></figure><blockquote><p>区块引用</p><p>回车键自动延伸区块</p></blockquote><ul><li><p><strong>区块嵌套</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 第一层</span><br><span class="line">&gt; &gt; 第二层</span><br><span class="line">&gt; &gt; &gt; 第三层</span><br></pre></td></tr></table></figure><blockquote><p>第一层</p><blockquote><p>第二层</p><blockquote><p>第三层</p></blockquote></blockquote></blockquote></li></ul><p>-<strong>区块中使用列表</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; * 111</span><br><span class="line">&gt; * 222</span><br></pre></td></tr></table></figure><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>111</li><li>222</li></ul></blockquote><ul><li><p><strong>列表中使用区块</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; 区块</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure><ul><li>第一项<blockquote><p>区块</p></blockquote></li><li>第二项</li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**`**）：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`function()` 函数</span><br></pre></td></tr></table></figure><p>  <code>function()</code>函数</p><ul><li><p><strong>代码块</strong></p><p>用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）<br>本代码区块为说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```javascript</span><br><span class="line">function test() &#123;</span><br><span class="line">alert(&#x27;test&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line">[链接名称](链接地址,可选的alt)</span><br><span class="line">或</span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](http://www.baidu.com,&#x27;百度&#x27;)</span><br></pre></td></tr></table></figure><p>  <a href="http://www.baidu.com,'百度'/">百度</a></p><p>  直接显示链接地址：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p>  <a href="http://www.baidu.com/">http://www.baidu.com</a></p></li><li><p><strong>变量链接</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">链接可以用变量来代替，文档末尾或其他位置附带变量地址：</span><br><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 baidu 作为网址变量 [Baidu][baidu]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line">  [1]: http://www.google.com/</span><br><span class="line">  [baidu]: http://www.baidu.com/</span><br></pre></td></tr></table></figure><p>  [Google][1]</p><p>  [Baidu][baidu]</p><p>  [1]:<a href="http://www.google.com/">http://www.google.com</a></p><p>  [baidu]: <a href="http://www.baidu.com/">http://www.baidu.com/</a></p></li><li><p><strong>Github中使用内部链接</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可使用相对路径（前提是有该路径下的文件）</span><br><span class="line">[test](/2022/05/30/git/)</span><br></pre></td></tr></table></figure><p>  <a href="/2022/05/30/git/">test</a></p></li><li><p><strong>锚点链接</strong></p><p>  本文件中每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Markdown](#Markdown)</span><br></pre></td></tr></table></figure><blockquote><p>注： github对含有标点符号的标题进行锚点时会忽略掉标点符号，<br>本页中，如果这样写则无法跳转：[链接](#九、链接)<br>正确写法：[链接](#九链接)<br>  <a href="#%E4%B8%80Markdown">Markdown</a></p></blockquote><p>  <a href="#%E4%B9%9D%E9%93%BE%E6%8E%A5">链接</a>     </p><p>  <a href="#%E6%B5%81%E7%A8%8B%E5%9B%BE">流程图</a></p></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![alt替代文本](图片地址)</span><br><span class="line">![alt替代文本](图片地址 &quot;title标题&quot;)</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>开头一个感叹号 !</p></li><li><p>接着一个方括号，里面放上图片的替代文字</p></li><li><p>接着一个普通括号，里面放上图片的地址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://img2.baidu.com/it/u=594502772,1564194739&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=499&amp;h=265 &quot;logo&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://img2.baidu.com/it/u=594502772,1564194739&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=265" alt="logo" title="logo"></p><p>  当然，你也可以像链接那样对图片地址使用变量:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里链接用 img 作为图片地址变量 </span><br><span class="line">然后在文档的结尾或其他位置给变量赋值（图片地址）</span><br><span class="line">![RUNOOB][img]</span><br><span class="line"> [img]: https://img2.baidu.com/it/u=594502772,1564194739&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=499&amp;h=265</span><br></pre></td></tr></table></figure><p><img src="https://img2.baidu.com/it/u=594502772,1564194739&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=265" alt="RUNOOB"></p></li></ul><ul><li><strong>图片宽高</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://img2.baidu.com/it/u=594502772,1564194739&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=499&amp;h=265&quot; width=&quot;50px&quot; height=&quot;30px&quot;&gt;</span><br></pre></td></tr></table></figure><img src="https://img2.baidu.com/it/u=594502772,1564194739&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=265" width="50px" height="30px"><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>制作表格使用 (<strong>|</strong>) 来分隔不同的单元格，使用( <strong>-</strong>) 来分隔表头和其他行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="center">单元格</td><td align="center">单元格</td></tr><tr><td align="center">单元格</td><td align="center">单元格</td></tr></tbody></table><ul><li><strong>对齐方式</strong><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐  </li><li><strong>:-</strong> 设置内容和标题栏居左对齐</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="Emoji表情包"><a href="#Emoji表情包" class="headerlink" title="Emoji表情包"></a>Emoji表情包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：Emoji表情英文名的前后加冒号，Typore上先输入冒号再输入首字母有表情提示</span><br><span class="line">或直接复制表情包</span><br><span class="line">如：</span><br><span class="line">:smirk:</span><br><span class="line">&amp;#x1f602;</span><br></pre></td></tr></table></figure><p>支持不完善</p><p><a href="https://blog.csdn.net/qq_39218530/article/details/118671991">表情包</a></p><p>😀 😃 🥰 😍 😘</p><p>&#x1f602;<br>:smirk: </p><p>更多表情名称请查看：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">表情包清单</a></p><h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><h3 id="支持的-HTML-元素"><a href="#支持的-HTML-元素" class="headerlink" title="支持的 HTML 元素"></a>支持的 HTML 元素</h3><p>不在 Markdown 语法涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p><b>使用b标签的加粗字体</b></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用反斜杠转义字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">**未转义星号显示加粗** </span><br><span class="line">\*\* 转义显示星号 \*\*</span><br></pre></td></tr></table></figure><p><strong>未转义星号显示加粗</strong><br>** 转义显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><hr><p>*** <strong>以下部分在Github暂未支持</strong> ***</p><hr><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$\sqrt{3x-1}+(1+x)^2$</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```chart</span><br><span class="line">,Budget,Income,Expenses,Debt</span><br><span class="line">June,5000,8000,4000,6000</span><br><span class="line">July,3000,1000,4000,3000</span><br><span class="line">Aug,5000,7000,6000,3000</span><br><span class="line">Sep,7000,2000,3000,1000</span><br><span class="line">Oct,6000,5000,4000,2000</span><br><span class="line">Nov,4000,3000,5000,</span><br><span class="line">type: pie</span><br><span class="line">title: Monthly Revenue</span><br><span class="line">x.title: Amount</span><br><span class="line">y.title: Month</span><br><span class="line">y.suffix: $</span><br><span class="line">​```</span><br><span class="line">​```mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: 是否已收到消息？</span><br><span class="line">B--&gt;&gt;A: 已收到消息</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>​<code>chart ,Budget,Income,Expenses,Debt June,5000,8000,4000,6000 July,3000,1000,4000,3000 Aug,5000,7000,6000,3000 Sep,7000,2000,3000,1000 Oct,6000,5000,4000,2000 Nov,4000,3000,5000, type: pie title: Monthly Revenue x.title: Amount y.title: Month y.suffix: $ ​</code></p><p>​<code>mermaid sequenceDiagram A-&gt;&gt;B: 是否已收到消息？ B--&gt;&gt;A: 已收到消息 ​</code></p><blockquote><p>注：在Typora中未支持</p></blockquote><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```mermaid</span><br><span class="line">graph TD</span><br><span class="line">A[模块A] --&gt;|A1| B(模块B)</span><br><span class="line">B --&gt; C&#123;判断条件C&#125;</span><br><span class="line">C --&gt;|条件C1| D[模块D]</span><br><span class="line">C --&gt;|条件C2| E[模块E]</span><br><span class="line">C --&gt;|条件C3| F[模块F]</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>流程图相关文章：<a href="https://www.jianshu.com/p/b421cc723da5">https://www.jianshu.com/p/b421cc723da5</a></p><p><a href="http://www.imooc.com/article/292708">http://www.imooc.com/article/292708</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[模块A] --&gt;|A1| B(模块B)</span><br><span class="line">B --&gt; C&#123;判断条件C&#125;</span><br><span class="line">C --&gt;|条件C1| D[模块D]</span><br><span class="line">C --&gt;|条件C2| E[模块E]</span><br><span class="line">C --&gt;|条件C3| F[模块F]</span><br></pre></td></tr></table></figure><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```mermaid</span><br><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: 是否已收到消息？</span><br><span class="line">B--&gt;&gt;A: 已收到消息</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: 是否已收到消息？</span><br><span class="line">B--&gt;&gt;A: 已收到消息</span><br></pre></td></tr></table></figure><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">​```mermaid</span><br><span class="line">gantt</span><br><span class="line">title 甘特图</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">section 项目A</span><br><span class="line">任务1           :a1, 2018-06-06, 30d</span><br><span class="line">任务2     :after a1  , 20d</span><br><span class="line">section 项目B</span><br><span class="line">任务3      :2018-06-12  , 12d</span><br><span class="line">任务4      : 24d</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">title 甘特图</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">section 项目A</span><br><span class="line">任务1           :a1, 2018-06-06, 30d</span><br><span class="line">任务2     :after a1  , 20d</span><br><span class="line">section 项目B</span><br><span class="line">任务3      :2018-06-12  , 12d</span><br><span class="line">任务4      : 24d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">markdown语法学习</summary>
    
    
    
    <category term="md学习" scheme="https://wecy-chen.github.io/categories/md%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="md学习 markdown" scheme="https://wecy-chen.github.io/tags/md%E5%AD%A6%E4%B9%A0-markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wecy-chen.github.io/2022/03/19/hello-world/"/>
    <id>https://wecy-chen.github.io/2022/03/19/hello-world/</id>
    <published>2022-03-19T01:54:42.201Z</published>
    <updated>2022-08-22T01:42:38.302Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>欢迎来到<a href="https://hexo.io/">Hexo</a>! 这是你的第一篇文章。检查<a href="https://hexo.io/docs/">文件</a>更多信息。如果您在使用Hexo时遇到任何问题，可以在[故障排除]中找到答案(<a href="https://hexo.io/docs/troubleshooting.html)%E6%88%96%E8%80%85%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8[GitHub]%E4%B8%8A%E9%97%AE%E6%88%91(https://github.com/hexojs/hexo/issues)">https://hexo.io/docs/troubleshooting.html)或者你可以在[GitHub]上问我(https://github.com/hexojs/hexo/issues)</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="教程" scheme="https://wecy-chen.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>对接支付宝支付接口</title>
    <link href="https://wecy-chen.github.io/2021/12/08/zhifubao/"/>
    <id>https://wecy-chen.github.io/2021/12/08/zhifubao/</id>
    <published>2021-12-08T01:26:42.000Z</published>
    <updated>2022-08-22T01:42:38.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-申请开发"><a href="#一-申请开发" class="headerlink" title="*一. 申请开发??"></a>*<em>一. 申请开发?</em>?</h2><p>访问开发者中心<a href="https://links.jianshu.com/go?to=https://openhome.alipay.com/platform/appDaily.htm?tab=info">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>进行认证后(真实姓名,绑定手机号和邮箱), 即可进入沙箱配置页</p><p><img src="/image/zhifubao/a43f57e84f55a6f0a29727736934b9a6.png" alt="a43f57e84f55a6f0a29727736934b9a6.png"></p><h2 id="二-配置密钥"><a href="#二-配置密钥" class="headerlink" title="二. 配置密钥"></a><strong>二. 配置密钥</strong></h2><h3 id="1-下载密钥生成工具"><a href="#1-下载密钥生成工具" class="headerlink" title="1. 下载密钥生成工具"></a><strong>1. 下载密钥生成工具</strong></h3><p>访问 <a href="https://links.jianshu.com/go?to=https://docs.open.alipay.com/291/105971">https://docs.open.alipay.com/291/105971</a></p><p><img src="/image/zhifubao/1f8481f58db077b46c576d3f9e2f332c.png" alt="1f8481f58db077b46c576d3f9e2f332c.png"></p><p>下载AlipayDevelopmentAssistant-1.0.7.exe (支付宝开发平台开发助手)密钥工具 大约100多M 正常安装</p><h3 id="2-使用工具生成公钥私钥"><a href="#2-使用工具生成公钥私钥" class="headerlink" title="2.使用工具生成公钥私钥"></a><strong>2.使用工具生成公钥私钥</strong></h3><p><strong><img src="/image/zhifubao/c6f845df84f5cbcac6dce6cb485cb38b.png" alt="c6f845df84f5cbcac6dce6cb485cb38b.png"></strong></p><h3 id="3-设置公钥"><a href="#3-设置公钥" class="headerlink" title="3.设置公钥"></a><strong>3.设置公钥</strong></h3><p>加签方式选择<strong>公钥</strong></p><p><strong><img src="/image/zhifubao/51e1ae5878ebc514b824d38f660fa219.png" alt="51e1ae5878ebc514b824d38f660fa219.png"></strong></p><p>保存公钥,退款需要用到</p><h2 id="三-NodeJS请求支付接口-koa"><a href="#三-NodeJS请求支付接口-koa" class="headerlink" title="三. NodeJS请求支付接口(koa)"></a><strong>三. NodeJS请求支付接口(koa)</strong></h2><p>1.保存私钥</p><p>新建app_private_key.pem文件</p><p><img src="/image/zhifubao/84b01a06d3bab3d55e11b7776901ce77.png" alt="84b01a06d3bab3d55e11b7776901ce77.png"></p><p>2.实现代码</p><p>支付参数</p><p><a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay">https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; nginx &#125; = MAPP.proConfig</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; app_private_key &#125; = MAPP.keys<span class="comment">// 支付宝私钥</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">get</span>: &#123;</span><br><span class="line">    <span class="comment">// 创建支付宝支付连接</span></span><br><span class="line">    <span class="string">&#x27;/test/alipay&#x27;</span>: [</span><br><span class="line">      <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">        <span class="comment">// 支付参数</span></span><br><span class="line">        <span class="comment">// 注意:本地测试回调需要配置ngrok</span></span><br><span class="line">        <span class="keyword">const</span> paramsMap = &#123;</span><br><span class="line">          <span class="attr">app_id</span>: <span class="string">&#x27;2021xxxxxxxx&#x27;</span>, <span class="comment">// 应用id</span></span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;alipay.trade.page.pay&#x27;</span>, <span class="comment">// 调起类型(app,page,wap)(包括app,h5,PC页面支付)</span></span><br><span class="line">          <span class="attr">format</span>: <span class="string">&#x27;JSON&#x27;</span>,</span><br><span class="line">          <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">          <span class="attr">sign_type</span>: <span class="string">&#x27;RSA2&#x27;</span>,</span><br><span class="line">          <span class="attr">timestamp</span>: moment().format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),</span><br><span class="line">          <span class="attr">version</span>: <span class="string">&#x27;1.0&#x27;</span>,</span><br><span class="line">          <span class="attr">notify_url</span>: <span class="string">`https://<span class="subst">$&#123;nginx.server_name&#125;</span>/api-universal/test/aliay/callback`</span>, <span class="comment">// 接口回调(配置ngrok映射https地址)</span></span><br><span class="line">          <span class="comment">// return_url: &#x27;https://b2c-app-dev.fenxiangqu.cn/pages/my/index&#x27;,// 前台跳转页面</span></span><br><span class="line">          <span class="attr">biz_content</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            <span class="attr">product_code</span>: <span class="string">&#x27;FAST_INSTANT_TRADE_PAY&#x27;</span>, <span class="comment">// 商品码</span></span><br><span class="line">            <span class="attr">body</span>: <span class="string">&#x27;订单回调内容&#x27;</span>, <span class="comment">// 订单附加信息。</span></span><br><span class="line">            <span class="attr">subject</span>: <span class="string">&#x27;测试支付宝PC支付&#x27;</span>, <span class="comment">// 交易标题</span></span><br><span class="line">            <span class="attr">out_trade_no</span>: <span class="string">&#x27;xxxxxxxxx&#x27;</span>, <span class="comment">// 订单编号</span></span><br><span class="line">            <span class="attr">total_amount</span>: <span class="number">0.01</span> <span class="comment">// 支付金额</span></span><br><span class="line">          &#125;) <span class="comment">// 订单支付参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拼接参数</span></span><br><span class="line">        <span class="keyword">let</span> objParams = <span class="built_in">Object</span>.keys(paramsMap)</span><br><span class="line">          .sort()</span><br><span class="line">          .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">&#x27;=&#x27;</span> + paramsMap[key]</span><br><span class="line">          &#125;)</span><br><span class="line">          .join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> encodeParams = <span class="built_in">Object</span>.keys(paramsMap)</span><br><span class="line">          .sort()</span><br><span class="line">          .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(paramsMap[key])</span><br><span class="line">          &#125;)</span><br><span class="line">          .join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">        <span class="comment">// RSA2加密签名</span></span><br><span class="line">        <span class="keyword">let</span> sign</span><br><span class="line">        <span class="keyword">let</span> signInit = crypto.createSign(<span class="string">&#x27;RSA-SHA256&#x27;</span>)</span><br><span class="line">        signInit.update(objParams, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">        <span class="comment">// 支付宝私钥签名</span></span><br><span class="line">        <span class="comment">// console.log(app_private_key)</span></span><br><span class="line">        sign = signInit.sign(app_private_key, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> params = encodeParams + <span class="string">&#x27;&amp;sign=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(sign)</span><br><span class="line">        <span class="comment">// https://openapi.alipaydev.com/gateway.do 沙漏环境</span></span><br><span class="line">        <span class="comment">// https://openapi.alipay.com/gateway.do 正式环境</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`https://openapi.alipaydev.com/gateway.do?<span class="subst">$&#123;params&#125;</span>`</span></span><br><span class="line">        ctx.info(&#123; <span class="attr">message</span>: <span class="string">&#x27;创建支付参数成功&#x27;</span>, <span class="attr">data</span>: &#123; url &#125; &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">userAuth</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">post</span>: &#123;</span><br><span class="line">    <span class="comment">// 支付宝回调</span></span><br><span class="line">    <span class="string">&#x27;/test/alipay/callback&#x27;</span>: [<span class="keyword">async</span> ctx =&gt; &#123; &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">userAuth</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.支付信息链接</p><p><img src="/image/zhifubao/409fe8b92de6a90b63cef300de9b23c3.png" alt="409fe8b92de6a90b63cef300de9b23c3.png"></p><p>4.支付界面</p><p> 前台支付界面 <a href="https://opendocs.alipay.com/open/270/01arn8">https://opendocs.alipay.com/open/270/01arn8</a></p><p><img src="/image/zhifubao/0d1453f969811cbc5c3e46dcd98e642d.png" alt="0d1453f969811cbc5c3e46dcd98e642d.png"></p><p>5.生成二维码</p><p><a href="https://opendocs.alipay.com/open/02ekfg?scene=19">api说明</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 创建当面二维码支付</span></span><br><span class="line">  <span class="string">&#x27;/test/alipay/qr&#x27;</span>: [</span><br><span class="line">    <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> paramsMap = &#123;</span><br><span class="line">        <span class="attr">app_id</span>: <span class="string">&#x27;xxxxxx信&#x27;</span>, <span class="comment">// 应用id</span></span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;alipay.trade.precreate&#x27;</span>, <span class="comment">//请求方式名称</span></span><br><span class="line">        <span class="comment">// method: &#x27;alipay.trade.create&#x27;,</span></span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;JSON&#x27;</span>,</span><br><span class="line">        <span class="attr">charset</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        <span class="attr">sign_type</span>: <span class="string">&#x27;RSA2&#x27;</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: moment().format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&#x27;1.0&#x27;</span>,</span><br><span class="line">        <span class="attr">notify_url</span>: <span class="string">`https://<span class="subst">$&#123;nginx.server_name&#125;</span>/api-universal/test/aliay/callback`</span>, <span class="comment">// 接口回调(配置ngrok映射https地址)</span></span><br><span class="line">        <span class="comment">// app_cert_sn: app_private_key, // 秘钥</span></span><br><span class="line">        <span class="comment">// alipay_root_cert_sn: app_public_key, // 公钥</span></span><br><span class="line">        <span class="attr">biz_content</span>: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">          <span class="attr">subject</span>: <span class="string">&#x27;支付宝二维码支付&#x27;</span>, <span class="comment">// 交易标题</span></span><br><span class="line">          <span class="attr">out_trade_no</span>: <span class="string">&#x27;1624678209672759&#x27;</span>, <span class="comment">// 订单编号</span></span><br><span class="line">          <span class="attr">total_amount</span>: <span class="number">0.01</span> <span class="comment">// 支付金额</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 拼接参数</span></span><br><span class="line">      <span class="keyword">let</span> objParams = <span class="built_in">Object</span>.keys(paramsMap)</span><br><span class="line">        .sort()</span><br><span class="line">        .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> key + <span class="string">&#x27;=&#x27;</span> + paramsMap[key]</span><br><span class="line">        &#125;)</span><br><span class="line">        .join(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">      <span class="comment">// RSA2加密签名</span></span><br><span class="line">      <span class="keyword">let</span> sign</span><br><span class="line">      <span class="keyword">let</span> signInit = crypto.createSign(<span class="string">&#x27;RSA-SHA256&#x27;</span>)</span><br><span class="line">      signInit.update(objParams, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">      <span class="comment">// 支付宝私钥签名</span></span><br><span class="line">      <span class="comment">// console.log(app_private_key)</span></span><br><span class="line">      sign = signInit.sign(app_private_key, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> gateway = <span class="string">&#x27;https://openapi.alipaydev.com&#x27;</span></span><br><span class="line">      <span class="comment">// const url = `$&#123;gateway&#125;/gateway.do?$&#123;params&#125;`</span></span><br><span class="line">      paramsMap.sign = sign</span><br><span class="line">      <span class="comment">// 对接支付宝接口,生成地址</span></span><br><span class="line">      <span class="keyword">const</span> server = MAPP.creatServer(gateway)</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> server.get(<span class="string">&#x27;/gateway.do&#x27;</span>, &#123; <span class="attr">params</span>: paramsMap &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(response.data) <span class="comment">//返回信息</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   alipay_trade_precreate_response: &#123;</span></span><br><span class="line">      <span class="comment">//     code: &#x27;10000&#x27;,</span></span><br><span class="line">      <span class="comment">//     msg: &#x27;Success&#x27;,</span></span><br><span class="line">      <span class="comment">//     out_trade_no: &#x27;xxxxxx&#x27;,</span></span><br><span class="line">      <span class="comment">//     qr_code: &#x27;https://qr.alipay.com/bax05172lthykirrqxus00f5&#x27; // 地址要用工具生成二维码扫描</span></span><br><span class="line">      <span class="comment">//   &#125;,</span></span><br><span class="line">      <span class="comment">//   sign: &#x27;&#x27;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">userAuth</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意:</p><h1 id="显示-码已失效，请刷新二维码后重试"><a href="#显示-码已失效，请刷新二维码后重试" class="headerlink" title="显示:码已失效，请刷新二维码后重试"></a><strong>显示:码已失效，请刷新二维码后重试</strong></h1><p>解决办法: 就是使用沙箱版本的支付宝APP扫描或者使用沙箱版本的支付宝账号密码登录付款即可。</p><p>打开开放平台, 沙箱工具中下载沙漏版钱包</p><p><a href="https://open.alipay.com/platform/appDaily.htm?tab=tool">https://open.alipay.com/platform/appDaily.htm?tab=tool</a></p>]]></content>
    
    
    <summary type="html">支付宝接口开发</summary>
    
    
    
    <category term="支付宝" scheme="https://wecy-chen.github.io/categories/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    
  </entry>
  
</feed>
